
CPE329_FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00000d52  00000de6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d4  0080014c  0080014c  00000e32  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e32  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007010  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000158f  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000121e  00000000  00000000  00009763  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a14  00000000  00000000  0000a984  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c0a  00000000  00000000  0000b398  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000032ab  00000000  00000000  0000cfa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000390  00000000  00000000  0001024d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_3>
  10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__vector_4>
  14:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_5>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  34:	0c 94 be 04 	jmp	0x97c	; 0x97c <__vector_13>
  38:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_14>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  40:	0c 94 39 04 	jmp	0x872	; 0x872 <__vector_16>
  44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  48:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__vector_18>
  4c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__vector_19>
  50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <__ctors_start>:
  68:	90 02       	muls	r25, r16
  6a:	0d 03       	fmul	r16, r21

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d8 e0       	ldi	r29, 0x08	; 8
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	e2 e5       	ldi	r30, 0x52	; 82
  80:	fd e0       	ldi	r31, 0x0D	; 13
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	ac 34       	cpi	r26, 0x4C	; 76
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	22 e0       	ldi	r18, 0x02	; 2
  90:	ac e4       	ldi	r26, 0x4C	; 76
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a0 32       	cpi	r26, 0x20	; 32
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	c6 e3       	ldi	r28, 0x36	; 54
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	04 c0       	rjmp	.+8      	; 0xae <__do_global_ctors+0x10>
  a6:	21 97       	sbiw	r28, 0x01	; 1
  a8:	fe 01       	movw	r30, r28
  aa:	0e 94 a1 06 	call	0xd42	; 0xd42 <__tablejump2__>
  ae:	c4 33       	cpi	r28, 0x34	; 52
  b0:	d1 07       	cpc	r29, r17
  b2:	c9 f7       	brne	.-14     	; 0xa6 <__do_global_ctors+0x8>
  b4:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  b8:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <_exit>

000000bc <__bad_interrupt>:
  bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	81 ee       	ldi	r24, 0xE1	; 225
  c4:	94 e0       	ldi	r25, 0x04	; 4
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x6>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x10>
  d0:	00 00       	nop
   uint32_t speed = 999999;
   uint32_t increment = 256;
   
	_delay_ms(100);			// startup delay
	
	init();					// initializations for Arduino.h
  d2:	0e 94 83 04 	call	0x906	; 0x906 <init>
	Tlc.init();				// initialize the TLC chip
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	83 e0       	ldi	r24, 0x03	; 3
  dc:	92 e0       	ldi	r25, 0x02	; 2
  de:	0e 94 73 05 	call	0xae6	; 0xae6 <_ZN7Tlc59404initEj>
	initGPIO();				// initialize GPIO and pull-ups
  e2:	0e 94 94 02 	call	0x528	; 0x528 <_Z8initGPIOv>
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	81 ee       	ldi	r24, 0xE1	; 225
  ea:	94 e0       	ldi	r25, 0x04	; 4
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x2c>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x36>
  f6:	00 00       	nop
	_delay_ms(100);			// GPIO stability delay
	initTimers();			// initialize timer0 (CTC, T~100us)
  f8:	0e 94 9d 02 	call	0x53a	; 0x53a <_Z10initTimersv>
	initPCINT();			// initialize pin change interrupts (2:0)
  fc:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z9initPCINTv>
   
	// Temporary idea: Determine the bottom/back LED, send it to rgbUtil so that
	//  it knows which led to cycle to next
	setBottomLED(0);
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 a6 01 	call	0x34c	; 0x34c <_Z12setBottomLEDi>
	setAmbientColor(TOP_GS, TOP_GS, TOP_GS);
 108:	42 ee       	ldi	r20, 0xE2	; 226
 10a:	54 e0       	ldi	r21, 0x04	; 4
 10c:	62 ee       	ldi	r22, 0xE2	; 226
 10e:	74 e0       	ldi	r23, 0x04	; 4
 110:	82 ee       	ldi	r24, 0xE2	; 226
 112:	94 e0       	ldi	r25, 0x04	; 4
 114:	0e 94 a9 01 	call	0x352	; 0x352 <_Z15setAmbientColoriii>
 118:	2f ef       	ldi	r18, 0xFF	; 255
 11a:	89 e6       	ldi	r24, 0x69	; 105
 11c:	98 e1       	ldi	r25, 0x18	; 24
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x5e>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x68>
 128:	00 00       	nop
 12a:	f6 cf       	rjmp	.-20     	; 0x118 <main+0x58>

0000012c <__vector_14>:

////////////////////////////////ISR////////////////////////////////////////////

// ISR that holds the time between hall effect readings
// timer0 set to overflow every 100us / 0.1ms
ISR(TIMER0_COMPA_vect){
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	2f 93       	push	r18
 138:	8f 93       	push	r24
 13a:	9f 93       	push	r25
 13c:	af 93       	push	r26
 13e:	bf 93       	push	r27
	dt_us = dt_us + 100;
 140:	80 91 4c 01 	lds	r24, 0x014C
 144:	90 91 4d 01 	lds	r25, 0x014D
 148:	a0 91 4e 01 	lds	r26, 0x014E
 14c:	b0 91 4f 01 	lds	r27, 0x014F
 150:	8c 59       	subi	r24, 0x9C	; 156
 152:	9f 4f       	sbci	r25, 0xFF	; 255
 154:	af 4f       	sbci	r26, 0xFF	; 255
 156:	bf 4f       	sbci	r27, 0xFF	; 255
	
	// if dt_us > 1 second bike is probalby stopped 
	if(dt_us > 1000000){
 158:	81 34       	cpi	r24, 0x41	; 65
 15a:	22 e4       	ldi	r18, 0x42	; 66
 15c:	92 07       	cpc	r25, r18
 15e:	2f e0       	ldi	r18, 0x0F	; 15
 160:	a2 07       	cpc	r26, r18
 162:	b1 05       	cpc	r27, r1
 164:	48 f4       	brcc	.+18     	; 0x178 <__vector_14+0x4c>
////////////////////////////////ISR////////////////////////////////////////////

// ISR that holds the time between hall effect readings
// timer0 set to overflow every 100us / 0.1ms
ISR(TIMER0_COMPA_vect){
	dt_us = dt_us + 100;
 166:	80 93 4c 01 	sts	0x014C, r24
 16a:	90 93 4d 01 	sts	0x014D, r25
 16e:	a0 93 4e 01 	sts	0x014E, r26
 172:	b0 93 4f 01 	sts	0x014F, r27
 176:	08 c0       	rjmp	.+16     	; 0x188 <__vector_14+0x5c>
	
	// if dt_us > 1 second bike is probalby stopped 
	if(dt_us > 1000000){
		// tell rgbUtil that bike is stopped
		
		dt_us = 0;		// reset dt_us
 178:	10 92 4c 01 	sts	0x014C, r1
 17c:	10 92 4d 01 	sts	0x014D, r1
 180:	10 92 4e 01 	sts	0x014E, r1
 184:	10 92 4f 01 	sts	0x014F, r1
	}
}
 188:	bf 91       	pop	r27
 18a:	af 91       	pop	r26
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	2f 91       	pop	r18
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <__vector_3>:

// ISR for halleffect1 at pin D8
// enters ISR when set from high (from pull-up) to low
ISR(PCINT0_vect){
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	2f 93       	push	r18
 1a8:	3f 93       	push	r19
 1aa:	4f 93       	push	r20
 1ac:	5f 93       	push	r21
 1ae:	6f 93       	push	r22
 1b0:	7f 93       	push	r23
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	af 93       	push	r26
 1b8:	bf 93       	push	r27
 1ba:	ef 93       	push	r30
 1bc:	ff 93       	push	r31
	cli();
 1be:	f8 94       	cli
	PORTD ^= (1<<DEBUGLED);		// toggle debug LED on
 1c0:	9b b1       	in	r25, 0x0b	; 11
 1c2:	80 e1       	ldi	r24, 0x10	; 16
 1c4:	89 27       	eor	r24, r25
 1c6:	8b b9       	out	0x0b, r24	; 11
	
	dt_us = dt_us + TCNT0;		// add remaining TCNT time to dt_us
 1c8:	86 b5       	in	r24, 0x26	; 38
 1ca:	40 91 4c 01 	lds	r20, 0x014C
 1ce:	50 91 4d 01 	lds	r21, 0x014D
 1d2:	60 91 4e 01 	lds	r22, 0x014E
 1d6:	70 91 4f 01 	lds	r23, 0x014F
 1da:	48 0f       	add	r20, r24
 1dc:	51 1d       	adc	r21, r1
 1de:	61 1d       	adc	r22, r1
 1e0:	71 1d       	adc	r23, r1
 1e2:	40 93 4c 01 	sts	0x014C, r20
 1e6:	50 93 4d 01 	sts	0x014D, r21
 1ea:	60 93 4e 01 	sts	0x014E, r22
 1ee:	70 93 4f 01 	sts	0x014F, r23
	
	nextLED(0, dt_us);
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <_Z7nextLEDhm>
	
	// send dt_us to rgbUtil
	
	dt_us = 0;		// reset dt_us
 1f8:	10 92 4c 01 	sts	0x014C, r1
 1fc:	10 92 4d 01 	sts	0x014D, r1
 200:	10 92 4e 01 	sts	0x014E, r1
 204:	10 92 4f 01 	sts	0x014F, r1
	sei();
 208:	78 94       	sei
}
 20a:	ff 91       	pop	r31
 20c:	ef 91       	pop	r30
 20e:	bf 91       	pop	r27
 210:	af 91       	pop	r26
 212:	9f 91       	pop	r25
 214:	8f 91       	pop	r24
 216:	7f 91       	pop	r23
 218:	6f 91       	pop	r22
 21a:	5f 91       	pop	r21
 21c:	4f 91       	pop	r20
 21e:	3f 91       	pop	r19
 220:	2f 91       	pop	r18
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <__vector_4>:

// ISR for halleffect1 at pin D7
// enters ISR when set from high (from pull-up) to low
ISR(PCINT1_vect){
 22c:	1f 92       	push	r1
 22e:	0f 92       	push	r0
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	0f 92       	push	r0
 234:	11 24       	eor	r1, r1
 236:	2f 93       	push	r18
 238:	3f 93       	push	r19
 23a:	4f 93       	push	r20
 23c:	5f 93       	push	r21
 23e:	6f 93       	push	r22
 240:	7f 93       	push	r23
 242:	8f 93       	push	r24
 244:	9f 93       	push	r25
 246:	af 93       	push	r26
 248:	bf 93       	push	r27
 24a:	ef 93       	push	r30
 24c:	ff 93       	push	r31
	cli();
 24e:	f8 94       	cli
	PORTD ^= (1<<DEBUGLED);		// turn debug LED on
 250:	9b b1       	in	r25, 0x0b	; 11
 252:	80 e1       	ldi	r24, 0x10	; 16
 254:	89 27       	eor	r24, r25
 256:	8b b9       	out	0x0b, r24	; 11
	
	dt_us = dt_us + TCNT0;		// add remaining TCNT time to dt_us
 258:	86 b5       	in	r24, 0x26	; 38
 25a:	40 91 4c 01 	lds	r20, 0x014C
 25e:	50 91 4d 01 	lds	r21, 0x014D
 262:	60 91 4e 01 	lds	r22, 0x014E
 266:	70 91 4f 01 	lds	r23, 0x014F
 26a:	48 0f       	add	r20, r24
 26c:	51 1d       	adc	r21, r1
 26e:	61 1d       	adc	r22, r1
 270:	71 1d       	adc	r23, r1
 272:	40 93 4c 01 	sts	0x014C, r20
 276:	50 93 4d 01 	sts	0x014D, r21
 27a:	60 93 4e 01 	sts	0x014E, r22
 27e:	70 93 4f 01 	sts	0x014F, r23
	
	nextLED(1, dt_us);
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <_Z7nextLEDhm>
	
	// send dt_us to rgbUtil
	
	dt_us = 0;		// reset dt_us	
 288:	10 92 4c 01 	sts	0x014C, r1
 28c:	10 92 4d 01 	sts	0x014D, r1
 290:	10 92 4e 01 	sts	0x014E, r1
 294:	10 92 4f 01 	sts	0x014F, r1
	sei();
 298:	78 94       	sei
}
 29a:	ff 91       	pop	r31
 29c:	ef 91       	pop	r30
 29e:	bf 91       	pop	r27
 2a0:	af 91       	pop	r26
 2a2:	9f 91       	pop	r25
 2a4:	8f 91       	pop	r24
 2a6:	7f 91       	pop	r23
 2a8:	6f 91       	pop	r22
 2aa:	5f 91       	pop	r21
 2ac:	4f 91       	pop	r20
 2ae:	3f 91       	pop	r19
 2b0:	2f 91       	pop	r18
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <__vector_5>:

// ISR for halleffect1 at pin A0
// enters ISR when set from high (from pull-up) to low
ISR(PCINT2_vect){
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	2f 93       	push	r18
 2c8:	3f 93       	push	r19
 2ca:	4f 93       	push	r20
 2cc:	5f 93       	push	r21
 2ce:	6f 93       	push	r22
 2d0:	7f 93       	push	r23
 2d2:	8f 93       	push	r24
 2d4:	9f 93       	push	r25
 2d6:	af 93       	push	r26
 2d8:	bf 93       	push	r27
 2da:	ef 93       	push	r30
 2dc:	ff 93       	push	r31
	cli();
 2de:	f8 94       	cli
	PORTD ^= (1<<DEBUGLED);		// turn debug LED on
 2e0:	9b b1       	in	r25, 0x0b	; 11
 2e2:	80 e1       	ldi	r24, 0x10	; 16
 2e4:	89 27       	eor	r24, r25
 2e6:	8b b9       	out	0x0b, r24	; 11
		
	dt_us = dt_us + TCNT0;		// add remaining TCNT time to dt_us
 2e8:	86 b5       	in	r24, 0x26	; 38
 2ea:	40 91 4c 01 	lds	r20, 0x014C
 2ee:	50 91 4d 01 	lds	r21, 0x014D
 2f2:	60 91 4e 01 	lds	r22, 0x014E
 2f6:	70 91 4f 01 	lds	r23, 0x014F
 2fa:	48 0f       	add	r20, r24
 2fc:	51 1d       	adc	r21, r1
 2fe:	61 1d       	adc	r22, r1
 300:	71 1d       	adc	r23, r1
 302:	40 93 4c 01 	sts	0x014C, r20
 306:	50 93 4d 01 	sts	0x014D, r21
 30a:	60 93 4e 01 	sts	0x014E, r22
 30e:	70 93 4f 01 	sts	0x014F, r23
	
	nextLED(2, dt_us);
 312:	82 e0       	ldi	r24, 0x02	; 2
 314:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <_Z7nextLEDhm>

	
	// send dt_us to rgbUtil

	dt_us = 0;		// reset dt_us
 318:	10 92 4c 01 	sts	0x014C, r1
 31c:	10 92 4d 01 	sts	0x014D, r1
 320:	10 92 4e 01 	sts	0x014E, r1
 324:	10 92 4f 01 	sts	0x014F, r1
	sei();
 328:	78 94       	sei
}
 32a:	ff 91       	pop	r31
 32c:	ef 91       	pop	r30
 32e:	bf 91       	pop	r27
 330:	af 91       	pop	r26
 332:	9f 91       	pop	r25
 334:	8f 91       	pop	r24
 336:	7f 91       	pop	r23
 338:	6f 91       	pop	r22
 33a:	5f 91       	pop	r21
 33c:	4f 91       	pop	r20
 33e:	3f 91       	pop	r19
 340:	2f 91       	pop	r18
 342:	0f 90       	pop	r0
 344:	0f be       	out	0x3f, r0	; 63
 346:	0f 90       	pop	r0
 348:	1f 90       	pop	r1
 34a:	18 95       	reti

0000034c <_Z12setBottomLEDi>:
   Tlc.update();     // send GS data to TLC5940
}

/* Something else determines which LED is on the bottom in main */
void setBottomLED(int LED) {
   bottomLED = LED;
 34c:	80 93 29 01 	sts	0x0129, r24
 350:	08 95       	ret

00000352 <_Z15setAmbientColoriii>:
}

void setAmbientColor(int r, int g, int b) {
   ambientColor.r = r;
 352:	e2 e5       	ldi	r30, 0x52	; 82
 354:	f1 e0       	ldi	r31, 0x01	; 1
 356:	91 83       	std	Z+1, r25	; 0x01
 358:	80 83       	st	Z, r24
   ambientColor.g = g;
 35a:	73 83       	std	Z+3, r23	; 0x03
 35c:	62 83       	std	Z+2, r22	; 0x02
   ambientColor.b = b;
 35e:	55 83       	std	Z+5, r21	; 0x05
 360:	44 83       	std	Z+4, r20	; 0x04
 362:	08 95       	ret

00000364 <_Z18setBrakeBrightnessi>:

void setBrakeBrightness(int deltaT) {
   static uint8_t faster = 0; // To avoid lots of minute adjustments
   static uint8_t slower = 0;
   
   if (deltaT < lastDeltaT) {
 364:	09 2e       	mov	r0, r25
 366:	00 0c       	add	r0, r0
 368:	aa 0b       	sbc	r26, r26
 36a:	bb 0b       	sbc	r27, r27
      faster++;
      slower = 0;
   }
   
   if (faster >= 0) {	// Decreased for testing, normally 10
      faster = 0;
 36c:	10 92 50 01 	sts	0x0150, r1
      if (brightnesslevel > 0)
 370:	20 91 27 01 	lds	r18, 0x0127
 374:	22 23       	and	r18, r18
 376:	19 f0       	breq	.+6      	; 0x37e <_Z18setBrakeBrightnessi+0x1a>
         brightnesslevel--;
 378:	21 50       	subi	r18, 0x01	; 1
 37a:	20 93 27 01 	sts	0x0127, r18
   }
   
   if (slower >= 0) {	// Decreased for testing, normally 10
      slower = 0;
 37e:	10 92 51 01 	sts	0x0151, r1
      if (brightnesslevel < MAX_BRIGHTNESS) {
 382:	20 91 27 01 	lds	r18, 0x0127
 386:	2f 30       	cpi	r18, 0x0F	; 15
 388:	18 f4       	brcc	.+6      	; 0x390 <_Z18setBrakeBrightnessi+0x2c>
         brightnesslevel++;
 38a:	2f 5f       	subi	r18, 0xFF	; 255
 38c:	20 93 27 01 	sts	0x0127, r18
      }
   }
   
   lastDeltaT = deltaT;
 390:	80 93 59 01 	sts	0x0159, r24
 394:	90 93 5a 01 	sts	0x015A, r25
 398:	a0 93 5b 01 	sts	0x015B, r26
 39c:	b0 93 5c 01 	sts	0x015C, r27
 3a0:	08 95       	ret

000003a2 <_Z6setLEDi5color>:
}

void setLED(int ledNum, color color) {
 3a2:	0f 93       	push	r16
 3a4:	1f 93       	push	r17
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	00 d0       	rcall	.+0      	; 0x3ac <_Z6setLEDi5color+0xa>
 3ac:	00 d0       	rcall	.+0      	; 0x3ae <_Z6setLEDi5color+0xc>
 3ae:	00 d0       	rcall	.+0      	; 0x3b0 <_Z6setLEDi5color+0xe>
 3b0:	cd b7       	in	r28, 0x3d	; 61
 3b2:	de b7       	in	r29, 0x3e	; 62
 3b4:	29 83       	std	Y+1, r18	; 0x01
 3b6:	3a 83       	std	Y+2, r19	; 0x02
 3b8:	4b 83       	std	Y+3, r20	; 0x03
 3ba:	5c 83       	std	Y+4, r21	; 0x04
 3bc:	6d 83       	std	Y+5, r22	; 0x05
 3be:	7e 83       	std	Y+6, r23	; 0x06
   int offset = -1;
   ledNum *= numColorChannels;
 3c0:	8c 01       	movw	r16, r24
 3c2:	00 0f       	add	r16, r16
 3c4:	11 1f       	adc	r17, r17
 3c6:	08 0f       	add	r16, r24
 3c8:	19 1f       	adc	r17, r25
   
   if (R_ENABLE)
      Tlc.set(ledNum + ++offset, color.r);
 3ca:	49 81       	ldd	r20, Y+1	; 0x01
 3cc:	5a 81       	ldd	r21, Y+2	; 0x02
 3ce:	60 2f       	mov	r22, r16
 3d0:	83 e0       	ldi	r24, 0x03	; 3
 3d2:	92 e0       	ldi	r25, 0x02	; 2
 3d4:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <_ZN7Tlc59403setEhj>
   if (G_ENABLE)
      Tlc.set(ledNum + ++offset, color.g);
 3d8:	4b 81       	ldd	r20, Y+3	; 0x03
 3da:	5c 81       	ldd	r21, Y+4	; 0x04
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	60 0f       	add	r22, r16
 3e0:	83 e0       	ldi	r24, 0x03	; 3
 3e2:	92 e0       	ldi	r25, 0x02	; 2
 3e4:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <_ZN7Tlc59403setEhj>
   if (B_ENABLE)
      Tlc.set(ledNum + ++offset, color.b);
 3e8:	4d 81       	ldd	r20, Y+5	; 0x05
 3ea:	5e 81       	ldd	r21, Y+6	; 0x06
 3ec:	62 e0       	ldi	r22, 0x02	; 2
 3ee:	60 0f       	add	r22, r16
 3f0:	83 e0       	ldi	r24, 0x03	; 3
 3f2:	92 e0       	ldi	r25, 0x02	; 2
}
 3f4:	26 96       	adiw	r28, 0x06	; 6
 3f6:	0f b6       	in	r0, 0x3f	; 63
 3f8:	f8 94       	cli
 3fa:	de bf       	out	0x3e, r29	; 62
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	cd bf       	out	0x3d, r28	; 61
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	1f 91       	pop	r17
 406:	0f 91       	pop	r16
   if (R_ENABLE)
      Tlc.set(ledNum + ++offset, color.r);
   if (G_ENABLE)
      Tlc.set(ledNum + ++offset, color.g);
   if (B_ENABLE)
      Tlc.set(ledNum + ++offset, color.b);
 408:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <_ZN7Tlc59403setEhj>

0000040c <_Z7nextLEDh>:
   rearLight.r = brightnessSteps[brightnesslevel];
   
   nextLED(sensorNum);
}

void nextLED(uint8_t sensorNum) {
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
   int ndx;
   static uint8_t prevSensorNum = -1;
   
   if (nextSensor(sensorNum, prevSensorNum))
 410:	90 91 00 01 	lds	r25, 0x0100

int nextSensor(uint8_t sensorNum, uint8_t prevSensorVal) {
   int isNextSensor = 0;
   
   if (prevSensorVal == 2)
      isNextSensor = (sensorNum == 0);
 414:	51 e0       	ldi	r21, 0x01	; 1
 416:	40 e0       	ldi	r20, 0x00	; 0
}

int nextSensor(uint8_t sensorNum, uint8_t prevSensorVal) {
   int isNextSensor = 0;
   
   if (prevSensorVal == 2)
 418:	92 30       	cpi	r25, 0x02	; 2
 41a:	19 f4       	brne	.+6      	; 0x422 <_Z7nextLEDh+0x16>
      isNextSensor = (sensorNum == 0);
 41c:	88 23       	and	r24, r24
 41e:	21 f0       	breq	.+8      	; 0x428 <_Z7nextLEDh+0x1c>
 420:	02 c0       	rjmp	.+4      	; 0x426 <_Z7nextLEDh+0x1a>
   else
      isNextSensor = (sensorNum > prevSensorVal);
 422:	98 17       	cp	r25, r24
 424:	08 f0       	brcs	.+2      	; 0x428 <_Z7nextLEDh+0x1c>
 426:	50 e0       	ldi	r21, 0x00	; 0
 428:	25 2f       	mov	r18, r21
 42a:	34 2f       	mov	r19, r20

void nextLED(uint8_t sensorNum) {
   int ndx;
   static uint8_t prevSensorNum = -1;
   
   if (nextSensor(sensorNum, prevSensorNum))
 42c:	23 2b       	or	r18, r19
 42e:	11 f1       	breq	.+68     	; 0x474 <_Z7nextLEDh+0x68>
      if ((++currentLED) >= numLeds)
 430:	40 91 28 01 	lds	r20, 0x0128
 434:	21 e0       	ldi	r18, 0x01	; 1
 436:	24 0f       	add	r18, r20
 438:	20 93 28 01 	sts	0x0128, r18
 43c:	30 91 58 01 	lds	r19, 0x0158
 440:	23 17       	cp	r18, r19
 442:	18 f0       	brcs	.+6      	; 0x44a <_Z7nextLEDh+0x3e>
         currentLED = 0;
 444:	10 92 28 01 	sts	0x0128, r1
 448:	15 c0       	rjmp	.+42     	; 0x474 <_Z7nextLEDh+0x68>
}

int prevSensor(uint8_t sensorNum, uint8_t prevSensorVal) {
   int isPrevSensor = 0;
   
   if (prevSensorVal == 2)
 44a:	92 30       	cpi	r25, 0x02	; 2
 44c:	41 f4       	brne	.+16     	; 0x45e <_Z7nextLEDh+0x52>
      isPrevSensor = (sensorNum == 2);
 44e:	51 e0       	ldi	r21, 0x01	; 1
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	82 30       	cpi	r24, 0x02	; 2
 454:	09 f0       	breq	.+2      	; 0x458 <_Z7nextLEDh+0x4c>
 456:	50 e0       	ldi	r21, 0x00	; 0
 458:	25 2f       	mov	r18, r21
 45a:	39 2f       	mov	r19, r25
 45c:	07 c0       	rjmp	.+14     	; 0x46c <_Z7nextLEDh+0x60>
   else
      isPrevSensor = (sensorNum < prevSensorVal);
 45e:	61 e0       	ldi	r22, 0x01	; 1
 460:	50 e0       	ldi	r21, 0x00	; 0
 462:	89 17       	cp	r24, r25
 464:	08 f0       	brcs	.+2      	; 0x468 <_Z7nextLEDh+0x5c>
 466:	60 e0       	ldi	r22, 0x00	; 0
 468:	26 2f       	mov	r18, r22
 46a:	35 2f       	mov	r19, r21
   static uint8_t prevSensorNum = -1;
   
   if (nextSensor(sensorNum, prevSensorNum))
      if ((++currentLED) >= numLeds)
         currentLED = 0;
   else if (prevSensor(sensorNum, prevSensorNum))
 46c:	23 2b       	or	r18, r19
 46e:	11 f0       	breq	.+4      	; 0x474 <_Z7nextLEDh+0x68>
      if ((--currentLED) < 0)
 470:	40 93 28 01 	sts	0x0128, r20
         currentLED = numLeds - 1;
   prevSensorNum = sensorNum;
 474:	80 93 00 01 	sts	0x0100, r24
   
   if (currentLED < 0)
      currentLED = bottomLED; // Definitely subject to change, just a placeholder
   
   Serial.println(TOP_GS);
 478:	4a e0       	ldi	r20, 0x0A	; 10
 47a:	50 e0       	ldi	r21, 0x00	; 0
 47c:	62 ee       	ldi	r22, 0xE2	; 226
 47e:	74 e0       	ldi	r23, 0x04	; 4
 480:	8d e5       	ldi	r24, 0x5D	; 93
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	0e 94 22 04 	call	0x844	; 0x844 <_ZN5Print7printlnEii>
   Tlc.clear();
 488:	83 e0       	ldi	r24, 0x03	; 3
 48a:	92 e0       	ldi	r25, 0x02	; 2
 48c:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN7Tlc59405clearEv>
   
   for (ndx = 0; ndx < numLeds; ndx++) {
 490:	c0 e0       	ldi	r28, 0x00	; 0
 492:	d0 e0       	ldi	r29, 0x00	; 0
 494:	80 91 58 01 	lds	r24, 0x0158
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	c8 17       	cp	r28, r24
 49c:	d9 07       	cpc	r29, r25
 49e:	24 f5       	brge	.+72     	; 0x4e8 <_Z7nextLEDh+0xdc>
      if (ndx == currentLED)
 4a0:	80 91 28 01 	lds	r24, 0x0128
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	c8 17       	cp	r28, r24
 4a8:	d9 07       	cpc	r29, r25
 4aa:	69 f4       	brne	.+26     	; 0x4c6 <_Z7nextLEDh+0xba>
         setLED(ndx, rearLight);
 4ac:	20 91 01 01 	lds	r18, 0x0101
 4b0:	30 91 02 01 	lds	r19, 0x0102
 4b4:	40 91 03 01 	lds	r20, 0x0103
 4b8:	50 91 04 01 	lds	r21, 0x0104
 4bc:	60 91 05 01 	lds	r22, 0x0105
 4c0:	70 91 06 01 	lds	r23, 0x0106
 4c4:	0c c0       	rjmp	.+24     	; 0x4de <_Z7nextLEDh+0xd2>
      else
         setLED(ndx, ambientColor);
 4c6:	20 91 52 01 	lds	r18, 0x0152
 4ca:	30 91 53 01 	lds	r19, 0x0153
 4ce:	40 91 54 01 	lds	r20, 0x0154
 4d2:	50 91 55 01 	lds	r21, 0x0155
 4d6:	60 91 56 01 	lds	r22, 0x0156
 4da:	70 91 57 01 	lds	r23, 0x0157
 4de:	ce 01       	movw	r24, r28
 4e0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_Z6setLEDi5color>
      currentLED = bottomLED; // Definitely subject to change, just a placeholder
   
   Serial.println(TOP_GS);
   Tlc.clear();
   
   for (ndx = 0; ndx < numLeds; ndx++) {
 4e4:	21 96       	adiw	r28, 0x01	; 1
 4e6:	d6 cf       	rjmp	.-84     	; 0x494 <_Z7nextLEDh+0x88>
         setLED(ndx, rearLight);
      else
         setLED(ndx, ambientColor);
   }
   
   Tlc.update();
 4e8:	83 e0       	ldi	r24, 0x03	; 3
 4ea:	92 e0       	ldi	r25, 0x02	; 2
}
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
         setLED(ndx, rearLight);
      else
         setLED(ndx, ambientColor);
   }
   
   Tlc.update();
 4f0:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <_ZN7Tlc59406updateEv>

000004f4 <_Z7nextLEDhm>:
   ambientColor.g = g;
   ambientColor.b = b;
}

/* Overloading nextLED to take in speed and set the brightness based on it */
void nextLED(uint8_t sensorNum, uint32_t deltaT) {
 4f4:	cf 93       	push	r28
 4f6:	c8 2f       	mov	r28, r24
   setBrakeBrightness(deltaT);
 4f8:	ca 01       	movw	r24, r20
 4fa:	0e 94 b2 01 	call	0x364	; 0x364 <_Z18setBrakeBrightnessi>
   
   rearLight.r = brightnessSteps[brightnesslevel];
 4fe:	e0 91 27 01 	lds	r30, 0x0127
 502:	f0 e0       	ldi	r31, 0x00	; 0
 504:	ee 0f       	add	r30, r30
 506:	ff 1f       	adc	r31, r31
 508:	e9 5f       	subi	r30, 0xF9	; 249
 50a:	fe 4f       	sbci	r31, 0xFE	; 254
 50c:	80 81       	ld	r24, Z
 50e:	91 81       	ldd	r25, Z+1	; 0x01
 510:	90 93 02 01 	sts	0x0102, r25
 514:	80 93 01 01 	sts	0x0101, r24
   
   nextLED(sensorNum);
 518:	8c 2f       	mov	r24, r28
}
 51a:	cf 91       	pop	r28
void nextLED(uint8_t sensorNum, uint32_t deltaT) {
   setBrakeBrightness(deltaT);
   
   rearLight.r = brightnessSteps[brightnesslevel];
   
   nextLED(sensorNum);
 51c:	0c 94 06 02 	jmp	0x40c	; 0x40c <_Z7nextLEDh>

00000520 <_GLOBAL__sub_I_bottomLED>:
   TOP_GS / 16, TOP_GS / 16, TOP_GS / 16, TOP_GS / 16,
   TOP_GS / 16, TOP_GS / 16, TOP_GS / 16, TOP_GS / 16,
   TOP_GS / 16, TOP_GS / 16, TOP_GS / 16, TOP_GS / 16, TOP_GS};

static uint8_t numColorChannels = R_ENABLE + G_ENABLE + B_ENABLE;
static uint8_t numLeds = NUM_LED_CHANNELS / numColorChannels;
 520:	83 e0       	ldi	r24, 0x03	; 3
 522:	80 93 58 01 	sts	0x0158, r24
 526:	08 95       	ret

00000528 <_Z8initGPIOv>:
#include "tmr_int_util.h"

// sets up the inputs, outputs and internal pull-ups 
void initGPIO(){
	// all hall effect sensors are inputs
	DDRB &= ~(1<<HALLEFFECT1);
 528:	20 98       	cbi	0x04, 0	; 4
	DDRD &= ~(1<<HALLEFFECT2);
 52a:	57 98       	cbi	0x0a, 7	; 10
	DDRC &= ~(1<<HALLEFFECT3);
 52c:	38 98       	cbi	0x07, 0	; 7
	
	// Debug LED is an output
	PORTD |= (1<<DEBUGLED);
 52e:	5c 9a       	sbi	0x0b, 4	; 11
	PORTD &= ~(1<<DEBUGLED);		// initially off
 530:	5c 98       	cbi	0x0b, 4	; 11
	
	// turn on internal pull-up for hall effects
	PORTB |= (1<<HALLEFFECT1);
 532:	28 9a       	sbi	0x05, 0	; 5
	PORTD |= (1<<HALLEFFECT2);
 534:	5f 9a       	sbi	0x0b, 7	; 11
	PORTC |= (1<<HALLEFFECT3);
 536:	40 9a       	sbi	0x08, 0	; 8
 538:	08 95       	ret

0000053a <_Z10initTimersv>:
// sets up the timers
void initTimers(){
	// timer1 and timer2 are used in SparkFun library
	
	// timer0 (8bit) 0->255
	TCCR0A = 0x02;		// set timer to CTC mode
 53a:	82 e0       	ldi	r24, 0x02	; 2
 53c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x02;		// set pre-scaler to 8
 53e:	85 bd       	out	0x25, r24	; 37
	OCR0A = OCR0A_OVR;	// overflow value 
 540:	98 ec       	ldi	r25, 0xC8	; 200
 542:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;		// timer mask interrupt on OCR0A overflow
 544:	80 93 6e 00 	sts	0x006E, r24
	TIFR0 = 0x02;		// set overflow to OCR0A value
 548:	85 bb       	out	0x15, r24	; 21
 54a:	08 95       	ret

0000054c <_Z9initPCINTv>:
}

// sets up all three PCINT vectors for each hall effect sensor
void initPCINT(){
	cli();		// clear interrupts
 54c:	f8 94       	cli
	
	// enable PCINT (2:0)
	PCICR = 0b00000111;
 54e:	87 e0       	ldi	r24, 0x07	; 7
 550:	80 93 68 00 	sts	0x0068, r24
	
	// PCINT0 -> D8 (halleffect sensor 1)
	PCMSK0 = (1<<HALLEFFECT1);
 554:	91 e0       	ldi	r25, 0x01	; 1
 556:	90 93 6b 00 	sts	0x006B, r25
	// PCINT1 -> A0 (halleffect sensor 3)
	PCMSK1 = (1<<HALLEFFECT3);
 55a:	90 93 6c 00 	sts	0x006C, r25
	// PCINT2 -> D7 (halleffect sensor 2)
	PCMSK2 = (1<<HALLEFFECT2);
 55e:	90 e8       	ldi	r25, 0x80	; 128
 560:	90 93 6d 00 	sts	0x006D, r25
	
	// set the PCINT flag register for all 3 PCINTs
	PCIFR = 0b00000111;
 564:	8b bb       	out	0x1b, r24	; 27
	
	sei();		// set interrupts 
 566:	78 94       	sei
 568:	08 95       	ret

0000056a <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 56a:	1f 92       	push	r1
 56c:	0f 92       	push	r0
 56e:	0f b6       	in	r0, 0x3f	; 63
 570:	0f 92       	push	r0
 572:	11 24       	eor	r1, r1
 574:	2f 93       	push	r18
 576:	8f 93       	push	r24
 578:	9f 93       	push	r25
 57a:	ef 93       	push	r30
 57c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 57e:	e0 91 6d 01 	lds	r30, 0x016D
 582:	f0 91 6e 01 	lds	r31, 0x016E
 586:	80 81       	ld	r24, Z
 588:	e0 91 73 01 	lds	r30, 0x0173
 58c:	f0 91 74 01 	lds	r31, 0x0174
 590:	82 fd       	sbrc	r24, 2
 592:	12 c0       	rjmp	.+36     	; 0x5b8 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 594:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 596:	80 91 76 01 	lds	r24, 0x0176
 59a:	8f 5f       	subi	r24, 0xFF	; 255
 59c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 59e:	20 91 77 01 	lds	r18, 0x0177
 5a2:	82 17       	cp	r24, r18
 5a4:	51 f0       	breq	.+20     	; 0x5ba <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 5a6:	e0 91 76 01 	lds	r30, 0x0176
 5aa:	f0 e0       	ldi	r31, 0x00	; 0
 5ac:	e3 5a       	subi	r30, 0xA3	; 163
 5ae:	fe 4f       	sbci	r31, 0xFE	; 254
 5b0:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 5b2:	80 93 76 01 	sts	0x0176, r24
 5b6:	01 c0       	rjmp	.+2      	; 0x5ba <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 5b8:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 5ba:	ff 91       	pop	r31
 5bc:	ef 91       	pop	r30
 5be:	9f 91       	pop	r25
 5c0:	8f 91       	pop	r24
 5c2:	2f 91       	pop	r18
 5c4:	0f 90       	pop	r0
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	0f 90       	pop	r0
 5ca:	1f 90       	pop	r1
 5cc:	18 95       	reti

000005ce <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 5ce:	1f 92       	push	r1
 5d0:	0f 92       	push	r0
 5d2:	0f b6       	in	r0, 0x3f	; 63
 5d4:	0f 92       	push	r0
 5d6:	11 24       	eor	r1, r1
 5d8:	2f 93       	push	r18
 5da:	3f 93       	push	r19
 5dc:	4f 93       	push	r20
 5de:	5f 93       	push	r21
 5e0:	6f 93       	push	r22
 5e2:	7f 93       	push	r23
 5e4:	8f 93       	push	r24
 5e6:	9f 93       	push	r25
 5e8:	af 93       	push	r26
 5ea:	bf 93       	push	r27
 5ec:	ef 93       	push	r30
 5ee:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 5f0:	8d e5       	ldi	r24, 0x5D	; 93
 5f2:	91 e0       	ldi	r25, 0x01	; 1
 5f4:	0e 94 f5 05 	call	0xbea	; 0xbea <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 5f8:	ff 91       	pop	r31
 5fa:	ef 91       	pop	r30
 5fc:	bf 91       	pop	r27
 5fe:	af 91       	pop	r26
 600:	9f 91       	pop	r25
 602:	8f 91       	pop	r24
 604:	7f 91       	pop	r23
 606:	6f 91       	pop	r22
 608:	5f 91       	pop	r21
 60a:	4f 91       	pop	r20
 60c:	3f 91       	pop	r19
 60e:	2f 91       	pop	r18
 610:	0f 90       	pop	r0
 612:	0f be       	out	0x3f, r0	; 63
 614:	0f 90       	pop	r0
 616:	1f 90       	pop	r1
 618:	18 95       	reti

0000061a <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 61a:	ed e5       	ldi	r30, 0x5D	; 93
 61c:	f1 e0       	ldi	r31, 0x01	; 1
 61e:	13 82       	std	Z+3, r1	; 0x03
 620:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 622:	88 ee       	ldi	r24, 0xE8	; 232
 624:	93 e0       	ldi	r25, 0x03	; 3
 626:	a0 e0       	ldi	r26, 0x00	; 0
 628:	b0 e0       	ldi	r27, 0x00	; 0
 62a:	84 83       	std	Z+4, r24	; 0x04
 62c:	95 83       	std	Z+5, r25	; 0x05
 62e:	a6 83       	std	Z+6, r26	; 0x06
 630:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 632:	8f e3       	ldi	r24, 0x3F	; 63
 634:	91 e0       	ldi	r25, 0x01	; 1
 636:	91 83       	std	Z+1, r25	; 0x01
 638:	80 83       	st	Z, r24
 63a:	85 ec       	ldi	r24, 0xC5	; 197
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	95 87       	std	Z+13, r25	; 0x0d
 640:	84 87       	std	Z+12, r24	; 0x0c
 642:	84 ec       	ldi	r24, 0xC4	; 196
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	97 87       	std	Z+15, r25	; 0x0f
 648:	86 87       	std	Z+14, r24	; 0x0e
 64a:	80 ec       	ldi	r24, 0xC0	; 192
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	91 8b       	std	Z+17, r25	; 0x11
 650:	80 8b       	std	Z+16, r24	; 0x10
 652:	81 ec       	ldi	r24, 0xC1	; 193
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	93 8b       	std	Z+19, r25	; 0x13
 658:	82 8b       	std	Z+18, r24	; 0x12
 65a:	82 ec       	ldi	r24, 0xC2	; 194
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	95 8b       	std	Z+21, r25	; 0x15
 660:	84 8b       	std	Z+20, r24	; 0x14
 662:	86 ec       	ldi	r24, 0xC6	; 198
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	97 8b       	std	Z+23, r25	; 0x17
 668:	86 8b       	std	Z+22, r24	; 0x16
 66a:	11 8e       	std	Z+25, r1	; 0x19
 66c:	12 8e       	std	Z+26, r1	; 0x1a
 66e:	13 8e       	std	Z+27, r1	; 0x1b
 670:	14 8e       	std	Z+28, r1	; 0x1c
 672:	08 95       	ret

00000674 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 674:	cf 92       	push	r12
 676:	df 92       	push	r13
 678:	ef 92       	push	r14
 67a:	ff 92       	push	r15
 67c:	0f 93       	push	r16
 67e:	1f 93       	push	r17
 680:	cf 93       	push	r28
 682:	df 93       	push	r29
 684:	6c 01       	movw	r12, r24
 686:	eb 01       	movw	r28, r22
 688:	7b 01       	movw	r14, r22
 68a:	e4 0e       	add	r14, r20
 68c:	f5 1e       	adc	r15, r21
  size_t n = 0;
 68e:	00 e0       	ldi	r16, 0x00	; 0
 690:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
 692:	ce 15       	cp	r28, r14
 694:	df 05       	cpc	r29, r15
 696:	61 f0       	breq	.+24     	; 0x6b0 <_ZN5Print5writeEPKhj+0x3c>
    n += write(*buffer++);
 698:	69 91       	ld	r22, Y+
 69a:	d6 01       	movw	r26, r12
 69c:	ed 91       	ld	r30, X+
 69e:	fc 91       	ld	r31, X
 6a0:	01 90       	ld	r0, Z+
 6a2:	f0 81       	ld	r31, Z
 6a4:	e0 2d       	mov	r30, r0
 6a6:	c6 01       	movw	r24, r12
 6a8:	09 95       	icall
 6aa:	08 0f       	add	r16, r24
 6ac:	19 1f       	adc	r17, r25
 6ae:	f1 cf       	rjmp	.-30     	; 0x692 <_ZN5Print5writeEPKhj+0x1e>
  }
  return n;
}
 6b0:	c8 01       	movw	r24, r16
 6b2:	df 91       	pop	r29
 6b4:	cf 91       	pop	r28
 6b6:	1f 91       	pop	r17
 6b8:	0f 91       	pop	r16
 6ba:	ff 90       	pop	r15
 6bc:	ef 90       	pop	r14
 6be:	df 90       	pop	r13
 6c0:	cf 90       	pop	r12
 6c2:	08 95       	ret

000006c4 <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 6c4:	61 15       	cp	r22, r1
 6c6:	71 05       	cpc	r23, r1
 6c8:	79 f0       	breq	.+30     	; 0x6e8 <_ZN5Print5writeEPKc+0x24>
      return write((const uint8_t *)str, strlen(str));
 6ca:	fb 01       	movw	r30, r22
 6cc:	01 90       	ld	r0, Z+
 6ce:	00 20       	and	r0, r0
 6d0:	e9 f7       	brne	.-6      	; 0x6cc <_ZN5Print5writeEPKc+0x8>
 6d2:	31 97       	sbiw	r30, 0x01	; 1
 6d4:	af 01       	movw	r20, r30
 6d6:	46 1b       	sub	r20, r22
 6d8:	57 0b       	sbc	r21, r23
 6da:	dc 01       	movw	r26, r24
 6dc:	ed 91       	ld	r30, X+
 6de:	fc 91       	ld	r31, X
 6e0:	02 80       	ldd	r0, Z+2	; 0x02
 6e2:	f3 81       	ldd	r31, Z+3	; 0x03
 6e4:	e0 2d       	mov	r30, r0
 6e6:	09 94       	ijmp
    }
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	08 95       	ret

000006ee <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 6ee:	dc 01       	movw	r26, r24
 6f0:	ed 91       	ld	r30, X+
 6f2:	fc 91       	ld	r31, X
 6f4:	01 90       	ld	r0, Z+
 6f6:	f0 81       	ld	r31, Z
 6f8:	e0 2d       	mov	r30, r0
 6fa:	09 94       	ijmp

000006fc <_ZN5Print7printlnEv>:
  return x.printTo(*this);
}

size_t Print::println(void)
{
  return write("\r\n");
 6fc:	6a e2       	ldi	r22, 0x2A	; 42
 6fe:	71 e0       	ldi	r23, 0x01	; 1
 700:	0c 94 62 03 	jmp	0x6c4	; 0x6c4 <_ZN5Print5writeEPKc>

00000704 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 704:	8f 92       	push	r8
 706:	9f 92       	push	r9
 708:	af 92       	push	r10
 70a:	bf 92       	push	r11
 70c:	cf 92       	push	r12
 70e:	df 92       	push	r13
 710:	ef 92       	push	r14
 712:	ff 92       	push	r15
 714:	0f 93       	push	r16
 716:	1f 93       	push	r17
 718:	cf 93       	push	r28
 71a:	df 93       	push	r29
 71c:	cd b7       	in	r28, 0x3d	; 61
 71e:	de b7       	in	r29, 0x3e	; 62
 720:	a1 97       	sbiw	r28, 0x21	; 33
 722:	0f b6       	in	r0, 0x3f	; 63
 724:	f8 94       	cli
 726:	de bf       	out	0x3e, r29	; 62
 728:	0f be       	out	0x3f, r0	; 63
 72a:	cd bf       	out	0x3d, r28	; 61
 72c:	6c 01       	movw	r12, r24
 72e:	14 2f       	mov	r17, r20
 730:	e5 2f       	mov	r30, r21
 732:	cb 01       	movw	r24, r22
 734:	02 2f       	mov	r16, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 736:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 738:	22 30       	cpi	r18, 0x02	; 2
 73a:	08 f4       	brcc	.+2      	; 0x73e <_ZN5Print11printNumberEmh+0x3a>
 73c:	0a e0       	ldi	r16, 0x0A	; 10
 73e:	7e 01       	movw	r14, r28
 740:	21 e2       	ldi	r18, 0x21	; 33
 742:	e2 0e       	add	r14, r18
 744:	f1 1c       	adc	r15, r1

  do {
    unsigned long m = n;
    n /= base;
 746:	80 2e       	mov	r8, r16
 748:	91 2c       	mov	r9, r1
 74a:	a1 2c       	mov	r10, r1
 74c:	b1 2c       	mov	r11, r1
 74e:	61 2f       	mov	r22, r17
 750:	7e 2f       	mov	r23, r30
 752:	a5 01       	movw	r20, r10
 754:	94 01       	movw	r18, r8
 756:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__udivmodsi4>
    char c = m - base * n;
 75a:	02 9f       	mul	r16, r18
 75c:	10 19       	sub	r17, r0
 75e:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	e8 1a       	sub	r14, r24
 764:	f1 08       	sbc	r15, r1
 766:	1a 30       	cpi	r17, 0x0A	; 10
 768:	10 f4       	brcc	.+4      	; 0x76e <_ZN5Print11printNumberEmh+0x6a>
 76a:	10 5d       	subi	r17, 0xD0	; 208
 76c:	01 c0       	rjmp	.+2      	; 0x770 <_ZN5Print11printNumberEmh+0x6c>
 76e:	19 5c       	subi	r17, 0xC9	; 201
 770:	f7 01       	movw	r30, r14
 772:	10 83       	st	Z, r17
 774:	12 2f       	mov	r17, r18
 776:	e3 2f       	mov	r30, r19
 778:	ca 01       	movw	r24, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 77a:	23 2b       	or	r18, r19
 77c:	24 2b       	or	r18, r20
 77e:	25 2b       	or	r18, r21
 780:	31 f7       	brne	.-52     	; 0x74e <_ZN5Print11printNumberEmh+0x4a>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 782:	b7 01       	movw	r22, r14
 784:	c6 01       	movw	r24, r12
 786:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_ZN5Print5writeEPKc>
}
 78a:	a1 96       	adiw	r28, 0x21	; 33
 78c:	0f b6       	in	r0, 0x3f	; 63
 78e:	f8 94       	cli
 790:	de bf       	out	0x3e, r29	; 62
 792:	0f be       	out	0x3f, r0	; 63
 794:	cd bf       	out	0x3d, r28	; 61
 796:	df 91       	pop	r29
 798:	cf 91       	pop	r28
 79a:	1f 91       	pop	r17
 79c:	0f 91       	pop	r16
 79e:	ff 90       	pop	r15
 7a0:	ef 90       	pop	r14
 7a2:	df 90       	pop	r13
 7a4:	cf 90       	pop	r12
 7a6:	bf 90       	pop	r11
 7a8:	af 90       	pop	r10
 7aa:	9f 90       	pop	r9
 7ac:	8f 90       	pop	r8
 7ae:	08 95       	ret

000007b0 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 7b0:	cf 92       	push	r12
 7b2:	df 92       	push	r13
 7b4:	ef 92       	push	r14
 7b6:	ff 92       	push	r15
 7b8:	0f 93       	push	r16
 7ba:	1f 93       	push	r17
 7bc:	cf 93       	push	r28
 7be:	df 93       	push	r29
 7c0:	ec 01       	movw	r28, r24
 7c2:	6a 01       	movw	r12, r20
 7c4:	7b 01       	movw	r14, r22
  if (base == 0) {
 7c6:	21 15       	cp	r18, r1
 7c8:	31 05       	cpc	r19, r1
 7ca:	79 f4       	brne	.+30     	; 0x7ea <_ZN5Print5printEli+0x3a>
    return write(n);
 7cc:	e8 81       	ld	r30, Y
 7ce:	f9 81       	ldd	r31, Y+1	; 0x01
 7d0:	01 90       	ld	r0, Z+
 7d2:	f0 81       	ld	r31, Z
 7d4:	e0 2d       	mov	r30, r0
 7d6:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 7d8:	df 91       	pop	r29
 7da:	cf 91       	pop	r28
 7dc:	1f 91       	pop	r17
 7de:	0f 91       	pop	r16
 7e0:	ff 90       	pop	r15
 7e2:	ef 90       	pop	r14
 7e4:	df 90       	pop	r13
 7e6:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 7e8:	09 94       	ijmp
  } else if (base == 10) {
 7ea:	2a 30       	cpi	r18, 0x0A	; 10
 7ec:	31 05       	cpc	r19, r1
 7ee:	e9 f4       	brne	.+58     	; 0x82a <_ZN5Print5printEli+0x7a>
    if (n < 0) {
 7f0:	77 ff       	sbrs	r23, 7
 7f2:	1a c0       	rjmp	.+52     	; 0x828 <_ZN5Print5printEli+0x78>
      int t = print('-');
 7f4:	6d e2       	ldi	r22, 0x2D	; 45
 7f6:	0e 94 77 03 	call	0x6ee	; 0x6ee <_ZN5Print5printEc>
 7fa:	8c 01       	movw	r16, r24
      n = -n;
 7fc:	44 27       	eor	r20, r20
 7fe:	55 27       	eor	r21, r21
 800:	ba 01       	movw	r22, r20
 802:	4c 19       	sub	r20, r12
 804:	5d 09       	sbc	r21, r13
 806:	6e 09       	sbc	r22, r14
 808:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
 80a:	2a e0       	ldi	r18, 0x0A	; 10
 80c:	ce 01       	movw	r24, r28
 80e:	0e 94 82 03 	call	0x704	; 0x704 <_ZN5Print11printNumberEmh>
 812:	80 0f       	add	r24, r16
 814:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 816:	df 91       	pop	r29
 818:	cf 91       	pop	r28
 81a:	1f 91       	pop	r17
 81c:	0f 91       	pop	r16
 81e:	ff 90       	pop	r15
 820:	ef 90       	pop	r14
 822:	df 90       	pop	r13
 824:	cf 90       	pop	r12
 826:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
 828:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
 82a:	b7 01       	movw	r22, r14
 82c:	a6 01       	movw	r20, r12
 82e:	ce 01       	movw	r24, r28
  }
}
 830:	df 91       	pop	r29
 832:	cf 91       	pop	r28
 834:	1f 91       	pop	r17
 836:	0f 91       	pop	r16
 838:	ff 90       	pop	r15
 83a:	ef 90       	pop	r14
 83c:	df 90       	pop	r13
 83e:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 840:	0c 94 82 03 	jmp	0x704	; 0x704 <_ZN5Print11printNumberEmh>

00000844 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 844:	0f 93       	push	r16
 846:	1f 93       	push	r17
 848:	cf 93       	push	r28
 84a:	df 93       	push	r29
 84c:	ec 01       	movw	r28, r24
 84e:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 850:	ab 01       	movw	r20, r22
 852:	77 0f       	add	r23, r23
 854:	66 0b       	sbc	r22, r22
 856:	77 0b       	sbc	r23, r23
 858:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <_ZN5Print5printEli>
 85c:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 85e:	ce 01       	movw	r24, r28
 860:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_ZN5Print7printlnEv>
  return n;
}
 864:	80 0f       	add	r24, r16
 866:	91 1f       	adc	r25, r17
 868:	df 91       	pop	r29
 86a:	cf 91       	pop	r28
 86c:	1f 91       	pop	r17
 86e:	0f 91       	pop	r16
 870:	08 95       	ret

00000872 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 872:	1f 92       	push	r1
 874:	0f 92       	push	r0
 876:	0f b6       	in	r0, 0x3f	; 63
 878:	0f 92       	push	r0
 87a:	11 24       	eor	r1, r1
 87c:	2f 93       	push	r18
 87e:	3f 93       	push	r19
 880:	8f 93       	push	r24
 882:	9f 93       	push	r25
 884:	af 93       	push	r26
 886:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 888:	80 91 fb 01 	lds	r24, 0x01FB
 88c:	90 91 fc 01 	lds	r25, 0x01FC
 890:	a0 91 fd 01 	lds	r26, 0x01FD
 894:	b0 91 fe 01 	lds	r27, 0x01FE
	unsigned char f = timer0_fract;
 898:	30 91 fa 01 	lds	r19, 0x01FA

	m += MILLIS_INC;
	f += FRACT_INC;
 89c:	23 e0       	ldi	r18, 0x03	; 3
 89e:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 8a0:	2d 37       	cpi	r18, 0x7D	; 125
 8a2:	20 f4       	brcc	.+8      	; 0x8ac <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 8a4:	01 96       	adiw	r24, 0x01	; 1
 8a6:	a1 1d       	adc	r26, r1
 8a8:	b1 1d       	adc	r27, r1
 8aa:	05 c0       	rjmp	.+10     	; 0x8b6 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 8ac:	26 e8       	ldi	r18, 0x86	; 134
 8ae:	23 0f       	add	r18, r19
		m += 1;
 8b0:	02 96       	adiw	r24, 0x02	; 2
 8b2:	a1 1d       	adc	r26, r1
 8b4:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 8b6:	20 93 fa 01 	sts	0x01FA, r18
	timer0_millis = m;
 8ba:	80 93 fb 01 	sts	0x01FB, r24
 8be:	90 93 fc 01 	sts	0x01FC, r25
 8c2:	a0 93 fd 01 	sts	0x01FD, r26
 8c6:	b0 93 fe 01 	sts	0x01FE, r27
	timer0_overflow_count++;
 8ca:	80 91 ff 01 	lds	r24, 0x01FF
 8ce:	90 91 00 02 	lds	r25, 0x0200
 8d2:	a0 91 01 02 	lds	r26, 0x0201
 8d6:	b0 91 02 02 	lds	r27, 0x0202
 8da:	01 96       	adiw	r24, 0x01	; 1
 8dc:	a1 1d       	adc	r26, r1
 8de:	b1 1d       	adc	r27, r1
 8e0:	80 93 ff 01 	sts	0x01FF, r24
 8e4:	90 93 00 02 	sts	0x0200, r25
 8e8:	a0 93 01 02 	sts	0x0201, r26
 8ec:	b0 93 02 02 	sts	0x0202, r27
}
 8f0:	bf 91       	pop	r27
 8f2:	af 91       	pop	r26
 8f4:	9f 91       	pop	r25
 8f6:	8f 91       	pop	r24
 8f8:	3f 91       	pop	r19
 8fa:	2f 91       	pop	r18
 8fc:	0f 90       	pop	r0
 8fe:	0f be       	out	0x3f, r0	; 63
 900:	0f 90       	pop	r0
 902:	1f 90       	pop	r1
 904:	18 95       	reti

00000906 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 906:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 908:	84 b5       	in	r24, 0x24	; 36
 90a:	82 60       	ori	r24, 0x02	; 2
 90c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 90e:	84 b5       	in	r24, 0x24	; 36
 910:	81 60       	ori	r24, 0x01	; 1
 912:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 914:	85 b5       	in	r24, 0x25	; 37
 916:	82 60       	ori	r24, 0x02	; 2
 918:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 91a:	85 b5       	in	r24, 0x25	; 37
 91c:	81 60       	ori	r24, 0x01	; 1
 91e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 920:	ee e6       	ldi	r30, 0x6E	; 110
 922:	f0 e0       	ldi	r31, 0x00	; 0
 924:	80 81       	ld	r24, Z
 926:	81 60       	ori	r24, 0x01	; 1
 928:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 92a:	e1 e8       	ldi	r30, 0x81	; 129
 92c:	f0 e0       	ldi	r31, 0x00	; 0
 92e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 930:	80 81       	ld	r24, Z
 932:	82 60       	ori	r24, 0x02	; 2
 934:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 936:	80 81       	ld	r24, Z
 938:	81 60       	ori	r24, 0x01	; 1
 93a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 93c:	e0 e8       	ldi	r30, 0x80	; 128
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	80 81       	ld	r24, Z
 942:	81 60       	ori	r24, 0x01	; 1
 944:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 946:	e1 eb       	ldi	r30, 0xB1	; 177
 948:	f0 e0       	ldi	r31, 0x00	; 0
 94a:	80 81       	ld	r24, Z
 94c:	84 60       	ori	r24, 0x04	; 4
 94e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 950:	e0 eb       	ldi	r30, 0xB0	; 176
 952:	f0 e0       	ldi	r31, 0x00	; 0
 954:	80 81       	ld	r24, Z
 956:	81 60       	ori	r24, 0x01	; 1
 958:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 95a:	ea e7       	ldi	r30, 0x7A	; 122
 95c:	f0 e0       	ldi	r31, 0x00	; 0
 95e:	80 81       	ld	r24, Z
 960:	84 60       	ori	r24, 0x04	; 4
 962:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 964:	80 81       	ld	r24, Z
 966:	82 60       	ori	r24, 0x02	; 2
 968:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 96a:	80 81       	ld	r24, Z
 96c:	81 60       	ori	r24, 0x01	; 1
 96e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 970:	80 81       	ld	r24, Z
 972:	80 68       	ori	r24, 0x80	; 128
 974:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 976:	10 92 c1 00 	sts	0x00C1, r1
 97a:	08 95       	ret

0000097c <__vector_13>:
/** Don't add an extra SCLK pulse after switching from dot-correction mode. */
static uint8_t firstGSInput;

/** Interrupt called after an XLAT pulse to prevent more XLAT pulses. */
ISR(TIMER1_OVF_vect)
{
 97c:	1f 92       	push	r1
 97e:	0f 92       	push	r0
 980:	0f b6       	in	r0, 0x3f	; 63
 982:	0f 92       	push	r0
 984:	11 24       	eor	r1, r1
 986:	2f 93       	push	r18
 988:	3f 93       	push	r19
 98a:	4f 93       	push	r20
 98c:	5f 93       	push	r21
 98e:	6f 93       	push	r22
 990:	7f 93       	push	r23
 992:	8f 93       	push	r24
 994:	9f 93       	push	r25
 996:	af 93       	push	r26
 998:	bf 93       	push	r27
 99a:	ef 93       	push	r30
 99c:	ff 93       	push	r31
    disable_XLAT_pulses();
 99e:	80 e2       	ldi	r24, 0x20	; 32
 9a0:	80 93 80 00 	sts	0x0080, r24
    clear_XLAT_interrupt();
 9a4:	10 92 6f 00 	sts	0x006F, r1
    tlc_needXLAT = 0;
 9a8:	10 92 1f 02 	sts	0x021F, r1
    if (tlc_onUpdateFinished) {
 9ac:	80 91 1d 02 	lds	r24, 0x021D
 9b0:	90 91 1e 02 	lds	r25, 0x021E
 9b4:	89 2b       	or	r24, r25
 9b6:	31 f0       	breq	.+12     	; 0x9c4 <__vector_13+0x48>
        sei();
 9b8:	78 94       	sei
        tlc_onUpdateFinished();
 9ba:	e0 91 1d 02 	lds	r30, 0x021D
 9be:	f0 91 1e 02 	lds	r31, 0x021E
 9c2:	09 95       	icall
    }
}
 9c4:	ff 91       	pop	r31
 9c6:	ef 91       	pop	r30
 9c8:	bf 91       	pop	r27
 9ca:	af 91       	pop	r26
 9cc:	9f 91       	pop	r25
 9ce:	8f 91       	pop	r24
 9d0:	7f 91       	pop	r23
 9d2:	6f 91       	pop	r22
 9d4:	5f 91       	pop	r21
 9d6:	4f 91       	pop	r20
 9d8:	3f 91       	pop	r19
 9da:	2f 91       	pop	r18
 9dc:	0f 90       	pop	r0
 9de:	0f be       	out	0x3f, r0	; 63
 9e0:	0f 90       	pop	r0
 9e2:	1f 90       	pop	r1
 9e4:	18 95       	reti

000009e6 <_ZN7Tlc59403setEhj>:
           channel 0, OUT0 of the next TLC is channel 16, etc.
    \param value (0-4095).  The grayscale value, 4095 is maximum.
    \see get */
void Tlc5940::set(TLC_CHANNEL_TYPE channel, uint16_t value)
{
    TLC_CHANNEL_TYPE index8 = (NUM_TLCS * 16 - 1) - channel;
 9e6:	8f e0       	ldi	r24, 0x0F	; 15
 9e8:	86 1b       	sub	r24, r22
    uint8_t *index12p = tlc_GSData + ((((uint16_t)index8) * 3) >> 1);
 9ea:	93 e0       	ldi	r25, 0x03	; 3
 9ec:	89 9f       	mul	r24, r25
 9ee:	f0 01       	movw	r30, r0
 9f0:	11 24       	eor	r1, r1
 9f2:	f6 95       	lsr	r31
 9f4:	e7 95       	ror	r30
 9f6:	eb 5f       	subi	r30, 0xFB	; 251
 9f8:	fd 4f       	sbci	r31, 0xFD	; 253
    if (index8 & 1) { // starts in the middle
 9fa:	80 ff       	sbrs	r24, 0
 9fc:	05 c0       	rjmp	.+10     	; 0xa08 <_ZN7Tlc59403setEhj+0x22>
                      // first 4 bits intact | 4 top bits of value
        *index12p = (*index12p & 0xF0) | (value >> 8);
 9fe:	80 81       	ld	r24, Z
 a00:	80 7f       	andi	r24, 0xF0	; 240
 a02:	85 2b       	or	r24, r21
 a04:	80 83       	st	Z, r24
 a06:	0c c0       	rjmp	.+24     	; 0xa20 <_ZN7Tlc59403setEhj+0x3a>
                      // 8 lower bits of value
        *(++index12p) = value & 0xFF;
    } else { // starts clean
                      // 8 upper bits of value
        *(index12p++) = value >> 4;
 a08:	ca 01       	movw	r24, r20
 a0a:	24 e0       	ldi	r18, 0x04	; 4
 a0c:	96 95       	lsr	r25
 a0e:	87 95       	ror	r24
 a10:	2a 95       	dec	r18
 a12:	e1 f7       	brne	.-8      	; 0xa0c <_ZN7Tlc59403setEhj+0x26>
 a14:	80 83       	st	Z, r24
                      // 4 lower bits of value | last 4 bits intact
        *index12p = ((uint8_t)(value << 4)) | (*index12p & 0xF);
 a16:	81 81       	ldd	r24, Z+1	; 0x01
 a18:	8f 70       	andi	r24, 0x0F	; 15
 a1a:	42 95       	swap	r20
 a1c:	40 7f       	andi	r20, 0xF0	; 240
 a1e:	48 2b       	or	r20, r24
 a20:	41 83       	std	Z+1, r20	; 0x01
 a22:	08 95       	ret

00000a24 <_ZN7Tlc59406setAllEj>:

/** Sets all channels to value.
    \param value grayscale value (0 - 4095) */
void Tlc5940::setAll(uint16_t value)
{
    uint8_t firstByte = value >> 4;
 a24:	cb 01       	movw	r24, r22
 a26:	24 e0       	ldi	r18, 0x04	; 4
 a28:	96 95       	lsr	r25
 a2a:	87 95       	ror	r24
 a2c:	2a 95       	dec	r18
 a2e:	e1 f7       	brne	.-8      	; 0xa28 <_ZN7Tlc59406setAllEj+0x4>
 a30:	98 2f       	mov	r25, r24
    uint8_t secondByte = (value << 4) | (value >> 8);
 a32:	26 2f       	mov	r18, r22
 a34:	86 2f       	mov	r24, r22
 a36:	82 95       	swap	r24
 a38:	80 7f       	andi	r24, 0xF0	; 240
 a3a:	87 2b       	or	r24, r23
    uint8_t *p = tlc_GSData;
 a3c:	e5 e0       	ldi	r30, 0x05	; 5
 a3e:	f2 e0       	ldi	r31, 0x02	; 2
    while (p < tlc_GSData + NUM_TLCS * 24) {
        *p++ = firstByte;
 a40:	90 83       	st	Z, r25
        *p++ = secondByte;
 a42:	81 83       	std	Z+1, r24	; 0x01
 a44:	33 96       	adiw	r30, 0x03	; 3
 a46:	df 01       	movw	r26, r30
 a48:	11 97       	sbiw	r26, 0x01	; 1
        *p++ = (uint8_t)value;
 a4a:	2c 93       	st	X, r18
void Tlc5940::setAll(uint16_t value)
{
    uint8_t firstByte = value >> 4;
    uint8_t secondByte = (value << 4) | (value >> 8);
    uint8_t *p = tlc_GSData;
    while (p < tlc_GSData + NUM_TLCS * 24) {
 a4c:	32 e0       	ldi	r19, 0x02	; 2
 a4e:	ed 31       	cpi	r30, 0x1D	; 29
 a50:	f3 07       	cpc	r31, r19
 a52:	b0 f3       	brcs	.-20     	; 0xa40 <_ZN7Tlc59406setAllEj+0x1c>
        *p++ = firstByte;
        *p++ = secondByte;
        *p++ = (uint8_t)value;
    }
}
 a54:	08 95       	ret

00000a56 <_ZN7Tlc59405clearEv>:
/** Clears the grayscale data array, #tlc_GSData, but does not shift in any
    data.  This call should be followed by update() if you are turning off
    all the outputs. */
void Tlc5940::clear(void)
{
    setAll(0);
 a56:	60 e0       	ldi	r22, 0x00	; 0
 a58:	70 e0       	ldi	r23, 0x00	; 0
 a5a:	0c 94 12 05 	jmp	0xa24	; 0xa24 <_ZN7Tlc59406setAllEj>

00000a5e <_Z15tlc_shift8_initv>:
#elif DATA_TRANSFER_MODE == TLC_SPI

/** Initializes the SPI module to double speed (f_osc / 2) */
void tlc_shift8_init(void)
{
    SIN_DDR    |= _BV(SIN_PIN);    // SPI MOSI as output
 a5e:	23 9a       	sbi	0x04, 3	; 4
    SCLK_DDR   |= _BV(SCLK_PIN);   // SPI SCK as output
 a60:	25 9a       	sbi	0x04, 5	; 4
    TLC_SS_DDR |= _BV(TLC_SS_PIN); // SPI SS as output
 a62:	22 9a       	sbi	0x04, 2	; 4

    SCLK_PORT &= ~_BV(SCLK_PIN);
 a64:	2d 98       	cbi	0x05, 5	; 5

    SPSR = _BV(SPI2X); // double speed (f_osc / 2)
 a66:	81 e0       	ldi	r24, 0x01	; 1
 a68:	8d bd       	out	0x2d, r24	; 45
    SPCR = _BV(SPE)    // enable SPI
         | _BV(MSTR);  // master mode
 a6a:	80 e5       	ldi	r24, 0x50	; 80
 a6c:	8c bd       	out	0x2c, r24	; 44
 a6e:	08 95       	ret

00000a70 <_Z10tlc_shift8h>:
}

/** Shifts out a byte, MSB first */
void tlc_shift8(uint8_t byte)
{
    SPDR = byte; // starts transmission
 a70:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & _BV(SPIF)))
 a72:	0d b4       	in	r0, 0x2d	; 45
 a74:	07 fe       	sbrs	r0, 7
 a76:	fd cf       	rjmp	.-6      	; 0xa72 <_Z10tlc_shift8h+0x2>
        ; // wait for transmission complete
}
 a78:	08 95       	ret

00000a7a <_ZN7Tlc59406updateEv>:
    or
    \code while(tlc_needXLAT); \endcode
    \returns 1 if there is data waiting to be latched, 0 if data was
             successfully shifted in */
uint8_t Tlc5940::update(void)
{
 a7a:	1f 93       	push	r17
 a7c:	cf 93       	push	r28
 a7e:	df 93       	push	r29
    if (tlc_needXLAT) {
 a80:	10 91 1f 02 	lds	r17, 0x021F
 a84:	11 11       	cpse	r17, r1
 a86:	29 c0       	rjmp	.+82     	; 0xada <_ZN7Tlc59406updateEv+0x60>
        return 1;
    }
    disable_XLAT_pulses();
 a88:	80 e2       	ldi	r24, 0x20	; 32
 a8a:	80 93 80 00 	sts	0x0080, r24
    if (firstGSInput) {
 a8e:	80 91 04 02 	lds	r24, 0x0204
 a92:	88 23       	and	r24, r24
 a94:	29 f0       	breq	.+10     	; 0xaa0 <_ZN7Tlc59406updateEv+0x26>
        // adds an extra SCLK pulse unless we've just set dot-correction data
        firstGSInput = 0;
 a96:	10 92 04 02 	sts	0x0204, r1
    or
    \code while(tlc_needXLAT); \endcode
    \returns 1 if there is data waiting to be latched, 0 if data was
             successfully shifted in */
uint8_t Tlc5940::update(void)
{
 a9a:	c5 e0       	ldi	r28, 0x05	; 5
 a9c:	d2 e0       	ldi	r29, 0x02	; 2
 a9e:	03 c0       	rjmp	.+6      	; 0xaa6 <_ZN7Tlc59406updateEv+0x2c>
    disable_XLAT_pulses();
    if (firstGSInput) {
        // adds an extra SCLK pulse unless we've just set dot-correction data
        firstGSInput = 0;
    } else {
        pulse_pin(SCLK_PORT, SCLK_PIN);
 aa0:	2d 9a       	sbi	0x05, 5	; 5
 aa2:	2d 98       	cbi	0x05, 5	; 5
 aa4:	fa cf       	rjmp	.-12     	; 0xa9a <_ZN7Tlc59406updateEv+0x20>
    }
    uint8_t *p = tlc_GSData;
    while (p < tlc_GSData + NUM_TLCS * 24) {
        tlc_shift8(*p++);
 aa6:	88 81       	ld	r24, Y
 aa8:	0e 94 38 05 	call	0xa70	; 0xa70 <_Z10tlc_shift8h>
        tlc_shift8(*p++);
 aac:	89 81       	ldd	r24, Y+1	; 0x01
 aae:	0e 94 38 05 	call	0xa70	; 0xa70 <_Z10tlc_shift8h>
 ab2:	23 96       	adiw	r28, 0x03	; 3
 ab4:	fe 01       	movw	r30, r28
 ab6:	31 97       	sbiw	r30, 0x01	; 1
        tlc_shift8(*p++);
 ab8:	80 81       	ld	r24, Z
 aba:	0e 94 38 05 	call	0xa70	; 0xa70 <_Z10tlc_shift8h>
        firstGSInput = 0;
    } else {
        pulse_pin(SCLK_PORT, SCLK_PIN);
    }
    uint8_t *p = tlc_GSData;
    while (p < tlc_GSData + NUM_TLCS * 24) {
 abe:	82 e0       	ldi	r24, 0x02	; 2
 ac0:	cd 31       	cpi	r28, 0x1D	; 29
 ac2:	d8 07       	cpc	r29, r24
 ac4:	80 f3       	brcs	.-32     	; 0xaa6 <_ZN7Tlc59406updateEv+0x2c>
        tlc_shift8(*p++);
        tlc_shift8(*p++);
        tlc_shift8(*p++);
    }
    tlc_needXLAT = 1;
 ac6:	81 e0       	ldi	r24, 0x01	; 1
 ac8:	80 93 1f 02 	sts	0x021F, r24
    enable_XLAT_pulses();
 acc:	90 ea       	ldi	r25, 0xA0	; 160
 ace:	90 93 80 00 	sts	0x0080, r25
    set_XLAT_interrupt();
 ad2:	b0 9a       	sbi	0x16, 0	; 22
 ad4:	80 93 6f 00 	sts	0x006F, r24
 ad8:	01 c0       	rjmp	.+2      	; 0xadc <_ZN7Tlc59406updateEv+0x62>
    \returns 1 if there is data waiting to be latched, 0 if data was
             successfully shifted in */
uint8_t Tlc5940::update(void)
{
    if (tlc_needXLAT) {
        return 1;
 ada:	11 e0       	ldi	r17, 0x01	; 1
    }
    tlc_needXLAT = 1;
    enable_XLAT_pulses();
    set_XLAT_interrupt();
    return 0;
}
 adc:	81 2f       	mov	r24, r17
 ade:	df 91       	pop	r29
 ae0:	cf 91       	pop	r28
 ae2:	1f 91       	pop	r17
 ae4:	08 95       	ret

00000ae6 <_ZN7Tlc59404initEj>:
/** Pin i/o and Timer setup.  The grayscale register will be reset to all
    zeros, or whatever initialValue is set to and the Timers will start.
    \param initialValue = 0, optional parameter specifing the inital startup
           value */
void Tlc5940::init(uint16_t initialValue)
{
 ae6:	0f 93       	push	r16
 ae8:	1f 93       	push	r17
 aea:	cf 93       	push	r28
 aec:	df 93       	push	r29
 aee:	00 d0       	rcall	.+0      	; 0xaf0 <_ZN7Tlc59404initEj+0xa>
 af0:	cd b7       	in	r28, 0x3d	; 61
 af2:	de b7       	in	r29, 0x3e	; 62
 af4:	8c 01       	movw	r16, r24
    /* Pin Setup */
    XLAT_DDR |= _BV(XLAT_PIN);
 af6:	21 9a       	sbi	0x04, 1	; 4
    BLANK_DDR |= _BV(BLANK_PIN);
 af8:	22 9a       	sbi	0x04, 2	; 4
    GSCLK_DDR |= _BV(GSCLK_PIN);
 afa:	53 9a       	sbi	0x0a, 3	; 10
#endif
#if XERR_ENABLED
    XERR_DDR &= ~_BV(XERR_PIN);   // XERR as input
    XERR_PORT |= _BV(XERR_PIN);   // enable pull-up resistor
#endif
    BLANK_PORT |= _BV(BLANK_PIN); // leave blank high (until the timers start)
 afc:	2a 9a       	sbi	0x05, 2	; 5

    tlc_shift8_init();
 afe:	69 83       	std	Y+1, r22	; 0x01
 b00:	7a 83       	std	Y+2, r23	; 0x02
 b02:	0e 94 2f 05 	call	0xa5e	; 0xa5e <_Z15tlc_shift8_initv>

    setAll(initialValue);
 b06:	69 81       	ldd	r22, Y+1	; 0x01
 b08:	7a 81       	ldd	r23, Y+2	; 0x02
 b0a:	c8 01       	movw	r24, r16
 b0c:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN7Tlc59406setAllEj>
    update();
 b10:	c8 01       	movw	r24, r16
 b12:	0e 94 3d 05 	call	0xa7a	; 0xa7a <_ZN7Tlc59406updateEv>
    disable_XLAT_pulses();
 b16:	e0 e8       	ldi	r30, 0x80	; 128
 b18:	f0 e0       	ldi	r31, 0x00	; 0
 b1a:	80 e2       	ldi	r24, 0x20	; 32
 b1c:	80 83       	st	Z, r24
    clear_XLAT_interrupt();
 b1e:	10 92 6f 00 	sts	0x006F, r1
    tlc_needXLAT = 0;
 b22:	10 92 1f 02 	sts	0x021F, r1
    pulse_pin(XLAT_PORT, XLAT_PIN);
 b26:	29 9a       	sbi	0x05, 1	; 5
 b28:	29 98       	cbi	0x05, 1	; 5


    /* Timer Setup */

    /* Timer 1 - BLANK / XLAT */
    TCCR1A = _BV(COM1B1);  // non inverting, output on OC1B, BLANK
 b2a:	80 83       	st	Z, r24
    TCCR1B = _BV(WGM13);   // Phase/freq correct PWM, ICR1 top
 b2c:	e1 e8       	ldi	r30, 0x81	; 129
 b2e:	f0 e0       	ldi	r31, 0x00	; 0
 b30:	80 e1       	ldi	r24, 0x10	; 16
 b32:	80 83       	st	Z, r24
    OCR1A = 1;             // duty factor on OC1A, XLAT is inside BLANK
 b34:	81 e0       	ldi	r24, 0x01	; 1
 b36:	90 e0       	ldi	r25, 0x00	; 0
 b38:	90 93 89 00 	sts	0x0089, r25
 b3c:	80 93 88 00 	sts	0x0088, r24
    OCR1B = 2;             // duty factor on BLANK (larger than OCR1A (XLAT))
 b40:	82 e0       	ldi	r24, 0x02	; 2
 b42:	90 e0       	ldi	r25, 0x00	; 0
 b44:	90 93 8b 00 	sts	0x008B, r25
 b48:	80 93 8a 00 	sts	0x008A, r24
    ICR1 = TLC_PWM_PERIOD; // see tlc_config.h
 b4c:	80 e0       	ldi	r24, 0x00	; 0
 b4e:	90 e2       	ldi	r25, 0x20	; 32
 b50:	90 93 87 00 	sts	0x0087, r25
 b54:	80 93 86 00 	sts	0x0086, r24
           | _BV(WGM33);      // Fast pwm with ICR3 top
#else
    TCCR2A = _BV(COM2B1)      // set on BOTTOM, clear on OCR2A (non-inverting),
                              // output on OC2B
           | _BV(WGM21)       // Fast pwm with OCR2A top
           | _BV(WGM20);      // Fast pwm with OCR2A top
 b58:	83 e2       	ldi	r24, 0x23	; 35
 b5a:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = _BV(WGM22);      // Fast pwm with OCR2A top
 b5e:	a1 eb       	ldi	r26, 0xB1	; 177
 b60:	b0 e0       	ldi	r27, 0x00	; 0
 b62:	88 e0       	ldi	r24, 0x08	; 8
 b64:	8c 93       	st	X, r24
    OCR2B = 0;                // duty factor (as short a pulse as possible)
 b66:	10 92 b4 00 	sts	0x00B4, r1
    OCR2A = TLC_GSCLK_PERIOD; // see tlc_config.h
 b6a:	83 e0       	ldi	r24, 0x03	; 3
 b6c:	80 93 b3 00 	sts	0x00B3, r24
    TCCR2B |= _BV(CS20);      // no prescale, (start pwm output)
 b70:	8c 91       	ld	r24, X
 b72:	81 60       	ori	r24, 0x01	; 1
 b74:	8c 93       	st	X, r24
#endif
    TCCR1B |= _BV(CS10);      // no prescale, (start pwm output)
 b76:	80 81       	ld	r24, Z
 b78:	81 60       	ori	r24, 0x01	; 1
 b7a:	80 83       	st	Z, r24
    update();
 b7c:	c8 01       	movw	r24, r16
}
 b7e:	0f 90       	pop	r0
 b80:	0f 90       	pop	r0
 b82:	df 91       	pop	r29
 b84:	cf 91       	pop	r28
 b86:	1f 91       	pop	r17
 b88:	0f 91       	pop	r16
    OCR2B = 0;                // duty factor (as short a pulse as possible)
    OCR2A = TLC_GSCLK_PERIOD; // see tlc_config.h
    TCCR2B |= _BV(CS20);      // no prescale, (start pwm output)
#endif
    TCCR1B |= _BV(CS10);      // no prescale, (start pwm output)
    update();
 b8a:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <_ZN7Tlc59406updateEv>

00000b8e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 b8e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 b90:	91 8d       	ldd	r25, Z+25	; 0x19
 b92:	22 8d       	ldd	r18, Z+26	; 0x1a
 b94:	89 2f       	mov	r24, r25
 b96:	90 e0       	ldi	r25, 0x00	; 0
 b98:	80 5c       	subi	r24, 0xC0	; 192
 b9a:	9f 4f       	sbci	r25, 0xFF	; 255
 b9c:	82 1b       	sub	r24, r18
 b9e:	91 09       	sbc	r25, r1
}
 ba0:	8f 73       	andi	r24, 0x3F	; 63
 ba2:	99 27       	eor	r25, r25
 ba4:	08 95       	ret

00000ba6 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 ba6:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 ba8:	91 8d       	ldd	r25, Z+25	; 0x19
 baa:	82 8d       	ldd	r24, Z+26	; 0x1a
 bac:	98 17       	cp	r25, r24
 bae:	31 f0       	breq	.+12     	; 0xbbc <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 bb0:	82 8d       	ldd	r24, Z+26	; 0x1a
 bb2:	e8 0f       	add	r30, r24
 bb4:	f1 1d       	adc	r31, r1
 bb6:	85 8d       	ldd	r24, Z+29	; 0x1d
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 bbc:	8f ef       	ldi	r24, 0xFF	; 255
 bbe:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 bc0:	08 95       	ret

00000bc2 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 bc2:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 bc4:	91 8d       	ldd	r25, Z+25	; 0x19
 bc6:	82 8d       	ldd	r24, Z+26	; 0x1a
 bc8:	98 17       	cp	r25, r24
 bca:	61 f0       	breq	.+24     	; 0xbe4 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 bcc:	82 8d       	ldd	r24, Z+26	; 0x1a
 bce:	df 01       	movw	r26, r30
 bd0:	a8 0f       	add	r26, r24
 bd2:	b1 1d       	adc	r27, r1
 bd4:	5d 96       	adiw	r26, 0x1d	; 29
 bd6:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 bd8:	92 8d       	ldd	r25, Z+26	; 0x1a
 bda:	9f 5f       	subi	r25, 0xFF	; 255
 bdc:	9f 73       	andi	r25, 0x3F	; 63
 bde:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 be0:	90 e0       	ldi	r25, 0x00	; 0
 be2:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 be4:	8f ef       	ldi	r24, 0xFF	; 255
 be6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 be8:	08 95       	ret

00000bea <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 bea:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 bec:	84 8d       	ldd	r24, Z+28	; 0x1c
 bee:	df 01       	movw	r26, r30
 bf0:	a8 0f       	add	r26, r24
 bf2:	b1 1d       	adc	r27, r1
 bf4:	a3 5a       	subi	r26, 0xA3	; 163
 bf6:	bf 4f       	sbci	r27, 0xFF	; 255
 bf8:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 bfa:	84 8d       	ldd	r24, Z+28	; 0x1c
 bfc:	90 e0       	ldi	r25, 0x00	; 0
 bfe:	01 96       	adiw	r24, 0x01	; 1
 c00:	8f 73       	andi	r24, 0x3F	; 63
 c02:	99 27       	eor	r25, r25
 c04:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 c06:	a6 89       	ldd	r26, Z+22	; 0x16
 c08:	b7 89       	ldd	r27, Z+23	; 0x17
 c0a:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 c0c:	a0 89       	ldd	r26, Z+16	; 0x10
 c0e:	b1 89       	ldd	r27, Z+17	; 0x11
 c10:	8c 91       	ld	r24, X
 c12:	80 64       	ori	r24, 0x40	; 64
 c14:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 c16:	93 8d       	ldd	r25, Z+27	; 0x1b
 c18:	84 8d       	ldd	r24, Z+28	; 0x1c
 c1a:	98 13       	cpse	r25, r24
 c1c:	06 c0       	rjmp	.+12     	; 0xc2a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 c1e:	02 88       	ldd	r0, Z+18	; 0x12
 c20:	f3 89       	ldd	r31, Z+19	; 0x13
 c22:	e0 2d       	mov	r30, r0
 c24:	80 81       	ld	r24, Z
 c26:	8f 7d       	andi	r24, 0xDF	; 223
 c28:	80 83       	st	Z, r24
 c2a:	08 95       	ret

00000c2c <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 c2c:	cf 93       	push	r28
 c2e:	df 93       	push	r29
 c30:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 c32:	88 8d       	ldd	r24, Y+24	; 0x18
 c34:	88 23       	and	r24, r24
 c36:	c9 f0       	breq	.+50     	; 0xc6a <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 c38:	ea 89       	ldd	r30, Y+18	; 0x12
 c3a:	fb 89       	ldd	r31, Y+19	; 0x13
 c3c:	80 81       	ld	r24, Z
 c3e:	85 fd       	sbrc	r24, 5
 c40:	05 c0       	rjmp	.+10     	; 0xc4c <_ZN14HardwareSerial5flushEv+0x20>
 c42:	a8 89       	ldd	r26, Y+16	; 0x10
 c44:	b9 89       	ldd	r27, Y+17	; 0x11
 c46:	8c 91       	ld	r24, X
 c48:	86 fd       	sbrc	r24, 6
 c4a:	0f c0       	rjmp	.+30     	; 0xc6a <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 c4c:	0f b6       	in	r0, 0x3f	; 63
 c4e:	07 fc       	sbrc	r0, 7
 c50:	f5 cf       	rjmp	.-22     	; 0xc3c <_ZN14HardwareSerial5flushEv+0x10>
 c52:	80 81       	ld	r24, Z
 c54:	85 ff       	sbrs	r24, 5
 c56:	f2 cf       	rjmp	.-28     	; 0xc3c <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 c58:	a8 89       	ldd	r26, Y+16	; 0x10
 c5a:	b9 89       	ldd	r27, Y+17	; 0x11
 c5c:	8c 91       	ld	r24, X
 c5e:	85 ff       	sbrs	r24, 5
 c60:	ed cf       	rjmp	.-38     	; 0xc3c <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 c62:	ce 01       	movw	r24, r28
 c64:	0e 94 f5 05 	call	0xbea	; 0xbea <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 c68:	e7 cf       	rjmp	.-50     	; 0xc38 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 c6a:	df 91       	pop	r29
 c6c:	cf 91       	pop	r28
 c6e:	08 95       	ret

00000c70 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 c70:	ef 92       	push	r14
 c72:	ff 92       	push	r15
 c74:	0f 93       	push	r16
 c76:	1f 93       	push	r17
 c78:	cf 93       	push	r28
 c7a:	df 93       	push	r29
 c7c:	ec 01       	movw	r28, r24
  _written = true;
 c7e:	81 e0       	ldi	r24, 0x01	; 1
 c80:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 c82:	9b 8d       	ldd	r25, Y+27	; 0x1b
 c84:	8c 8d       	ldd	r24, Y+28	; 0x1c
 c86:	98 13       	cpse	r25, r24
 c88:	05 c0       	rjmp	.+10     	; 0xc94 <_ZN14HardwareSerial5writeEh+0x24>
 c8a:	e8 89       	ldd	r30, Y+16	; 0x10
 c8c:	f9 89       	ldd	r31, Y+17	; 0x11
 c8e:	80 81       	ld	r24, Z
 c90:	85 fd       	sbrc	r24, 5
 c92:	24 c0       	rjmp	.+72     	; 0xcdc <_ZN14HardwareSerial5writeEh+0x6c>
 c94:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 c96:	0b 8d       	ldd	r16, Y+27	; 0x1b
 c98:	10 e0       	ldi	r17, 0x00	; 0
 c9a:	0f 5f       	subi	r16, 0xFF	; 255
 c9c:	1f 4f       	sbci	r17, 0xFF	; 255
 c9e:	0f 73       	andi	r16, 0x3F	; 63
 ca0:	11 27       	eor	r17, r17
 ca2:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 ca4:	8c 8d       	ldd	r24, Y+28	; 0x1c
 ca6:	e8 12       	cpse	r14, r24
 ca8:	0c c0       	rjmp	.+24     	; 0xcc2 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 caa:	0f b6       	in	r0, 0x3f	; 63
 cac:	07 fc       	sbrc	r0, 7
 cae:	fa cf       	rjmp	.-12     	; 0xca4 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 cb0:	e8 89       	ldd	r30, Y+16	; 0x10
 cb2:	f9 89       	ldd	r31, Y+17	; 0x11
 cb4:	80 81       	ld	r24, Z
 cb6:	85 ff       	sbrs	r24, 5
 cb8:	f5 cf       	rjmp	.-22     	; 0xca4 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 cba:	ce 01       	movw	r24, r28
 cbc:	0e 94 f5 05 	call	0xbea	; 0xbea <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 cc0:	f1 cf       	rjmp	.-30     	; 0xca4 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 cc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
 cc4:	fe 01       	movw	r30, r28
 cc6:	e8 0f       	add	r30, r24
 cc8:	f1 1d       	adc	r31, r1
 cca:	e3 5a       	subi	r30, 0xA3	; 163
 ccc:	ff 4f       	sbci	r31, 0xFF	; 255
 cce:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 cd0:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 cd2:	ea 89       	ldd	r30, Y+18	; 0x12
 cd4:	fb 89       	ldd	r31, Y+19	; 0x13
 cd6:	80 81       	ld	r24, Z
 cd8:	80 62       	ori	r24, 0x20	; 32
 cda:	07 c0       	rjmp	.+14     	; 0xcea <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 cdc:	ee 89       	ldd	r30, Y+22	; 0x16
 cde:	ff 89       	ldd	r31, Y+23	; 0x17
 ce0:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 ce2:	e8 89       	ldd	r30, Y+16	; 0x10
 ce4:	f9 89       	ldd	r31, Y+17	; 0x11
 ce6:	80 81       	ld	r24, Z
 ce8:	80 64       	ori	r24, 0x40	; 64
 cea:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 cec:	81 e0       	ldi	r24, 0x01	; 1
 cee:	90 e0       	ldi	r25, 0x00	; 0
 cf0:	df 91       	pop	r29
 cf2:	cf 91       	pop	r28
 cf4:	1f 91       	pop	r17
 cf6:	0f 91       	pop	r16
 cf8:	ff 90       	pop	r15
 cfa:	ef 90       	pop	r14
 cfc:	08 95       	ret

00000cfe <__udivmodsi4>:
 cfe:	a1 e2       	ldi	r26, 0x21	; 33
 d00:	1a 2e       	mov	r1, r26
 d02:	aa 1b       	sub	r26, r26
 d04:	bb 1b       	sub	r27, r27
 d06:	fd 01       	movw	r30, r26
 d08:	0d c0       	rjmp	.+26     	; 0xd24 <__udivmodsi4_ep>

00000d0a <__udivmodsi4_loop>:
 d0a:	aa 1f       	adc	r26, r26
 d0c:	bb 1f       	adc	r27, r27
 d0e:	ee 1f       	adc	r30, r30
 d10:	ff 1f       	adc	r31, r31
 d12:	a2 17       	cp	r26, r18
 d14:	b3 07       	cpc	r27, r19
 d16:	e4 07       	cpc	r30, r20
 d18:	f5 07       	cpc	r31, r21
 d1a:	20 f0       	brcs	.+8      	; 0xd24 <__udivmodsi4_ep>
 d1c:	a2 1b       	sub	r26, r18
 d1e:	b3 0b       	sbc	r27, r19
 d20:	e4 0b       	sbc	r30, r20
 d22:	f5 0b       	sbc	r31, r21

00000d24 <__udivmodsi4_ep>:
 d24:	66 1f       	adc	r22, r22
 d26:	77 1f       	adc	r23, r23
 d28:	88 1f       	adc	r24, r24
 d2a:	99 1f       	adc	r25, r25
 d2c:	1a 94       	dec	r1
 d2e:	69 f7       	brne	.-38     	; 0xd0a <__udivmodsi4_loop>
 d30:	60 95       	com	r22
 d32:	70 95       	com	r23
 d34:	80 95       	com	r24
 d36:	90 95       	com	r25
 d38:	9b 01       	movw	r18, r22
 d3a:	ac 01       	movw	r20, r24
 d3c:	bd 01       	movw	r22, r26
 d3e:	cf 01       	movw	r24, r30
 d40:	08 95       	ret

00000d42 <__tablejump2__>:
 d42:	ee 0f       	add	r30, r30
 d44:	ff 1f       	adc	r31, r31
 d46:	05 90       	lpm	r0, Z+
 d48:	f4 91       	lpm	r31, Z
 d4a:	e0 2d       	mov	r30, r0
 d4c:	09 94       	ijmp

00000d4e <_exit>:
 d4e:	f8 94       	cli

00000d50 <__stop_program>:
 d50:	ff cf       	rjmp	.-2      	; 0xd50 <__stop_program>
