
CPE329_FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  00000e4c  00000ee0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d5  00800162  00800162  00000f42  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f42  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  00000fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007021  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000155d  00000000  00000000  000082f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001200  00000000  00000000  00009852  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a24  00000000  00000000  0000aa54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001bfe  00000000  00000000  0000b478  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003203  00000000  00000000  0000d076  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000390  00000000  00000000  00010279  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__vector_3>
  10:	0c 94 20 01 	jmp	0x240	; 0x240 <__vector_4>
  14:	0c 94 80 01 	jmp	0x300	; 0x300 <__vector_5>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  34:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__vector_13>
  38:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_14>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  40:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__vector_16>
  44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  48:	0c 94 21 04 	jmp	0x842	; 0x842 <__vector_18>
  4c:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__vector_19>
  50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <__ctors_start>:
  68:	df 02       	muls	r29, r31
  6a:	79 04       	cpc	r7, r9

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d8 e0       	ldi	r29, 0x08	; 8
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	ec e4       	ldi	r30, 0x4C	; 76
  80:	fe e0       	ldi	r31, 0x0E	; 14
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	a2 36       	cpi	r26, 0x62	; 98
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	22 e0       	ldi	r18, 0x02	; 2
  90:	a2 e6       	ldi	r26, 0x62	; 98
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a7 33       	cpi	r26, 0x37	; 55
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	c6 e3       	ldi	r28, 0x36	; 54
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	04 c0       	rjmp	.+8      	; 0xae <__do_global_ctors+0x10>
  a6:	21 97       	sbiw	r28, 0x01	; 1
  a8:	fe 01       	movw	r30, r28
  aa:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__tablejump2__>
  ae:	c4 33       	cpi	r28, 0x34	; 52
  b0:	d1 07       	cpc	r29, r17
  b2:	c9 f7       	brne	.-14     	; 0xa6 <__do_global_ctors+0x8>
  b4:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  b8:	0c 94 24 07 	jmp	0xe48	; 0xe48 <_exit>

000000bc <__bad_interrupt>:
  bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	81 ee       	ldi	r24, 0xE1	; 225
  c4:	94 e0       	ldi	r25, 0x04	; 4
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x6>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x10>
  d0:	00 00       	nop
   
   
   
	_delay_ms(100);			// startup delay
	
	init();					// initializations for Arduino.h
  d2:	0e 94 b8 05 	call	0xb70	; 0xb70 <init>
	Tlc.init();				// initialize the TLC chip
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	8a e1       	ldi	r24, 0x1A	; 26
  dc:	92 e0       	ldi	r25, 0x02	; 2
  de:	0e 94 a8 06 	call	0xd50	; 0xd50 <_ZN7Tlc59404initEj>
	initGPIO();				// initialize GPIO and pull-ups
  e2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z8initGPIOv>
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	81 ee       	ldi	r24, 0xE1	; 225
  ea:	94 e0       	ldi	r25, 0x04	; 4
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x2c>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x36>
  f6:	00 00       	nop
	_delay_ms(100);			// GPIO stability delay
	initTimers();			// initialize timer0 (CTC, T~100us)
  f8:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z10initTimersv>
	initPCINT();			// initialize pin change interrupts (2:0)
  fc:	0e 94 f5 02 	call	0x5ea	; 0x5ea <_Z9initPCINTv>
   
	// Temporary idea: Determine the bottom/back LED, send it to rgbUtil so that
	//  it knows which led to cycle to next
	setBottomLED(0);
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_Z12setBottomLEDi>
	setAmbientColor(0, 0, 0 );
 108:	40 e0       	ldi	r20, 0x00	; 0
 10a:	50 e0       	ldi	r21, 0x00	; 0
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_Z15setAmbientColoriii>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 118:	26 e0       	ldi	r18, 0x06	; 6
 11a:	40 e8       	ldi	r20, 0x80	; 128
 11c:	55 e2       	ldi	r21, 0x25	; 37
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	84 e7       	ldi	r24, 0x74	; 116
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN14HardwareSerial5beginEmh>
      if(speed > 0)
	    speed--;
		_delay_ms(500);
		*/
	}
	return 0;
 12a:	ff cf       	rjmp	.-2      	; 0x12a <main+0x6a>

0000012c <__vector_14>:

////////////////////////////////ISR////////////////////////////////////////////

// ISR that holds the time between hall effect readings
// timer0 set to overflow every 100us / 0.1ms
ISR(TIMER0_COMPA_vect){
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	af 93       	push	r26
 13c:	bf 93       	push	r27
	dt_us = dt_us + 100;
 13e:	80 91 63 01 	lds	r24, 0x0163
 142:	90 91 64 01 	lds	r25, 0x0164
 146:	a0 91 65 01 	lds	r26, 0x0165
 14a:	b0 91 66 01 	lds	r27, 0x0166
 14e:	8c 59       	subi	r24, 0x9C	; 156
 150:	9f 4f       	sbci	r25, 0xFF	; 255
 152:	af 4f       	sbci	r26, 0xFF	; 255
 154:	bf 4f       	sbci	r27, 0xFF	; 255
 156:	80 93 63 01 	sts	0x0163, r24
 15a:	90 93 64 01 	sts	0x0164, r25
 15e:	a0 93 65 01 	sts	0x0165, r26
 162:	b0 93 66 01 	sts	0x0166, r27
	
	PORTD ^= (1<<DEBUGLED);
 166:	9b b1       	in	r25, 0x0b	; 11
 168:	80 e1       	ldi	r24, 0x10	; 16
 16a:	89 27       	eor	r24, r25
 16c:	8b b9       	out	0x0b, r24	; 11
}
 16e:	bf 91       	pop	r27
 170:	af 91       	pop	r26
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <__vector_3>:

// ISR for halleffect1 at pin D8
// enters ISR when set from high (from pull-up) to low
ISR(PCINT0_vect){
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
 18a:	2f 93       	push	r18
 18c:	3f 93       	push	r19
 18e:	4f 93       	push	r20
 190:	5f 93       	push	r21
 192:	6f 93       	push	r22
 194:	7f 93       	push	r23
 196:	8f 93       	push	r24
 198:	9f 93       	push	r25
 19a:	af 93       	push	r26
 19c:	bf 93       	push	r27
 19e:	ef 93       	push	r30
 1a0:	ff 93       	push	r31
	if(foobar){
 1a2:	80 91 62 01 	lds	r24, 0x0162
 1a6:	88 23       	and	r24, r24
 1a8:	b9 f1       	breq	.+110    	; 0x218 <__vector_3+0x98>
		//cli();						// disable interrupts
		dt_us = dt_us + TCNT0;	// add remaining TCNT time to dt_us
 1aa:	86 b5       	in	r24, 0x26	; 38
 1ac:	40 91 63 01 	lds	r20, 0x0163
 1b0:	50 91 64 01 	lds	r21, 0x0164
 1b4:	60 91 65 01 	lds	r22, 0x0165
 1b8:	70 91 66 01 	lds	r23, 0x0166
 1bc:	48 0f       	add	r20, r24
 1be:	51 1d       	adc	r21, r1
 1c0:	61 1d       	adc	r22, r1
 1c2:	71 1d       	adc	r23, r1
 1c4:	40 93 63 01 	sts	0x0163, r20
 1c8:	50 93 64 01 	sts	0x0164, r21
 1cc:	60 93 65 01 	sts	0x0165, r22
 1d0:	70 93 66 01 	sts	0x0166, r23
		nextLED(0, dt_us);			// send dt_us to rgbUtil
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	0e 94 c8 02 	call	0x590	; 0x590 <_Z7nextLEDhm>
	
		Serial.println("time reading in ms is:");
 1da:	69 e2       	ldi	r22, 0x29	; 41
 1dc:	71 e0       	ldi	r23, 0x01	; 1
 1de:	84 e7       	ldi	r24, 0x74	; 116
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <_ZN5Print7printlnEPKc>
		Serial.println((dt_us));
 1e6:	40 91 63 01 	lds	r20, 0x0163
 1ea:	50 91 64 01 	lds	r21, 0x0164
 1ee:	60 91 65 01 	lds	r22, 0x0165
 1f2:	70 91 66 01 	lds	r23, 0x0166
 1f6:	2a e0       	ldi	r18, 0x0A	; 10
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	84 e7       	ldi	r24, 0x74	; 116
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	0e 94 5c 05 	call	0xab8	; 0xab8 <_ZN5Print7printlnEmi>
	
		dt_us = 0;					// reset dt_us
 202:	10 92 63 01 	sts	0x0163, r1
 206:	10 92 64 01 	sts	0x0164, r1
 20a:	10 92 65 01 	sts	0x0165, r1
 20e:	10 92 66 01 	sts	0x0166, r1
		foobar = 0;
 212:	10 92 62 01 	sts	0x0162, r1
 216:	03 c0       	rjmp	.+6      	; 0x21e <__vector_3+0x9e>
		//sei();						// enable interrupts
	}
	else foobar = 1;
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	80 93 62 01 	sts	0x0162, r24
}
 21e:	ff 91       	pop	r31
 220:	ef 91       	pop	r30
 222:	bf 91       	pop	r27
 224:	af 91       	pop	r26
 226:	9f 91       	pop	r25
 228:	8f 91       	pop	r24
 22a:	7f 91       	pop	r23
 22c:	6f 91       	pop	r22
 22e:	5f 91       	pop	r21
 230:	4f 91       	pop	r20
 232:	3f 91       	pop	r19
 234:	2f 91       	pop	r18
 236:	0f 90       	pop	r0
 238:	0f be       	out	0x3f, r0	; 63
 23a:	0f 90       	pop	r0
 23c:	1f 90       	pop	r1
 23e:	18 95       	reti

00000240 <__vector_4>:

// ISR for halleffect1 at pin D7
// enters ISR when set from high (from pull-up) to low
ISR(PCINT1_vect){
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
 24a:	2f 93       	push	r18
 24c:	3f 93       	push	r19
 24e:	4f 93       	push	r20
 250:	5f 93       	push	r21
 252:	6f 93       	push	r22
 254:	7f 93       	push	r23
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	af 93       	push	r26
 25c:	bf 93       	push	r27
 25e:	ef 93       	push	r30
 260:	ff 93       	push	r31
	if(foobar){
 262:	80 91 62 01 	lds	r24, 0x0162
 266:	88 23       	and	r24, r24
 268:	b9 f1       	breq	.+110    	; 0x2d8 <__vector_4+0x98>
		//cli();						// disable interrupts 
		dt_us = dt_us + TCNT0;		// add remaining TCNT time to dt_us	
 26a:	86 b5       	in	r24, 0x26	; 38
 26c:	40 91 63 01 	lds	r20, 0x0163
 270:	50 91 64 01 	lds	r21, 0x0164
 274:	60 91 65 01 	lds	r22, 0x0165
 278:	70 91 66 01 	lds	r23, 0x0166
 27c:	48 0f       	add	r20, r24
 27e:	51 1d       	adc	r21, r1
 280:	61 1d       	adc	r22, r1
 282:	71 1d       	adc	r23, r1
 284:	40 93 63 01 	sts	0x0163, r20
 288:	50 93 64 01 	sts	0x0164, r21
 28c:	60 93 65 01 	sts	0x0165, r22
 290:	70 93 66 01 	sts	0x0166, r23
		nextLED(1, dt_us);			// send dt_us to rgbUtil	
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	0e 94 c8 02 	call	0x590	; 0x590 <_Z7nextLEDhm>
	
		Serial.println("time reading in ms is:");
 29a:	69 e2       	ldi	r22, 0x29	; 41
 29c:	71 e0       	ldi	r23, 0x01	; 1
 29e:	84 e7       	ldi	r24, 0x74	; 116
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <_ZN5Print7printlnEPKc>
		Serial.println((dt_us));
 2a6:	40 91 63 01 	lds	r20, 0x0163
 2aa:	50 91 64 01 	lds	r21, 0x0164
 2ae:	60 91 65 01 	lds	r22, 0x0165
 2b2:	70 91 66 01 	lds	r23, 0x0166
 2b6:	2a e0       	ldi	r18, 0x0A	; 10
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	84 e7       	ldi	r24, 0x74	; 116
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	0e 94 5c 05 	call	0xab8	; 0xab8 <_ZN5Print7printlnEmi>
	
		dt_us = 0;					// reset dt_us	
 2c2:	10 92 63 01 	sts	0x0163, r1
 2c6:	10 92 64 01 	sts	0x0164, r1
 2ca:	10 92 65 01 	sts	0x0165, r1
 2ce:	10 92 66 01 	sts	0x0166, r1
		foobar = 0;
 2d2:	10 92 62 01 	sts	0x0162, r1
 2d6:	03 c0       	rjmp	.+6      	; 0x2de <__vector_4+0x9e>
		//sei();						// enable interrupts 
	}
	else
		foobar = 1;
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	80 93 62 01 	sts	0x0162, r24
}
 2de:	ff 91       	pop	r31
 2e0:	ef 91       	pop	r30
 2e2:	bf 91       	pop	r27
 2e4:	af 91       	pop	r26
 2e6:	9f 91       	pop	r25
 2e8:	8f 91       	pop	r24
 2ea:	7f 91       	pop	r23
 2ec:	6f 91       	pop	r22
 2ee:	5f 91       	pop	r21
 2f0:	4f 91       	pop	r20
 2f2:	3f 91       	pop	r19
 2f4:	2f 91       	pop	r18
 2f6:	0f 90       	pop	r0
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	0f 90       	pop	r0
 2fc:	1f 90       	pop	r1
 2fe:	18 95       	reti

00000300 <__vector_5>:

// ISR for halleffect1 at pin A0
// enters ISR when set from high (from pull-up) to low
ISR(PCINT2_vect){
 300:	1f 92       	push	r1
 302:	0f 92       	push	r0
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	0f 92       	push	r0
 308:	11 24       	eor	r1, r1
 30a:	2f 93       	push	r18
 30c:	3f 93       	push	r19
 30e:	4f 93       	push	r20
 310:	5f 93       	push	r21
 312:	6f 93       	push	r22
 314:	7f 93       	push	r23
 316:	8f 93       	push	r24
 318:	9f 93       	push	r25
 31a:	af 93       	push	r26
 31c:	bf 93       	push	r27
 31e:	ef 93       	push	r30
 320:	ff 93       	push	r31
	//cli();	
	if(foobar){					// disable interrupts
 322:	80 91 62 01 	lds	r24, 0x0162
 326:	88 23       	and	r24, r24
 328:	d9 f1       	breq	.+118    	; 0x3a0 <__vector_5+0xa0>
		PORTD ^= (1<<DEBUGLED);		// turn debug LED on
 32a:	9b b1       	in	r25, 0x0b	; 11
 32c:	80 e1       	ldi	r24, 0x10	; 16
 32e:	89 27       	eor	r24, r25
 330:	8b b9       	out	0x0b, r24	; 11
		dt_us = dt_us + TCNT0;		// add remaining TCNT time to dt_us
 332:	86 b5       	in	r24, 0x26	; 38
 334:	40 91 63 01 	lds	r20, 0x0163
 338:	50 91 64 01 	lds	r21, 0x0164
 33c:	60 91 65 01 	lds	r22, 0x0165
 340:	70 91 66 01 	lds	r23, 0x0166
 344:	48 0f       	add	r20, r24
 346:	51 1d       	adc	r21, r1
 348:	61 1d       	adc	r22, r1
 34a:	71 1d       	adc	r23, r1
 34c:	40 93 63 01 	sts	0x0163, r20
 350:	50 93 64 01 	sts	0x0164, r21
 354:	60 93 65 01 	sts	0x0165, r22
 358:	70 93 66 01 	sts	0x0166, r23
		nextLED(2, dt_us);			// send dt_us to rgbUtil
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	0e 94 c8 02 	call	0x590	; 0x590 <_Z7nextLEDhm>
	
		Serial.println("time reading in ms is:");
 362:	69 e2       	ldi	r22, 0x29	; 41
 364:	71 e0       	ldi	r23, 0x01	; 1
 366:	84 e7       	ldi	r24, 0x74	; 116
 368:	91 e0       	ldi	r25, 0x01	; 1
 36a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <_ZN5Print7printlnEPKc>
		Serial.println((dt_us));
 36e:	40 91 63 01 	lds	r20, 0x0163
 372:	50 91 64 01 	lds	r21, 0x0164
 376:	60 91 65 01 	lds	r22, 0x0165
 37a:	70 91 66 01 	lds	r23, 0x0166
 37e:	2a e0       	ldi	r18, 0x0A	; 10
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	84 e7       	ldi	r24, 0x74	; 116
 384:	91 e0       	ldi	r25, 0x01	; 1
 386:	0e 94 5c 05 	call	0xab8	; 0xab8 <_ZN5Print7printlnEmi>
	
		dt_us = 0;					// reset dt_us
 38a:	10 92 63 01 	sts	0x0163, r1
 38e:	10 92 64 01 	sts	0x0164, r1
 392:	10 92 65 01 	sts	0x0165, r1
 396:	10 92 66 01 	sts	0x0166, r1
		foobar = 0;
 39a:	10 92 62 01 	sts	0x0162, r1
 39e:	03 c0       	rjmp	.+6      	; 0x3a6 <__vector_5+0xa6>
	}
	else
		foobar = 1;
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	80 93 62 01 	sts	0x0162, r24
	//sei();						// enable interrupts 
}
 3a6:	ff 91       	pop	r31
 3a8:	ef 91       	pop	r30
 3aa:	bf 91       	pop	r27
 3ac:	af 91       	pop	r26
 3ae:	9f 91       	pop	r25
 3b0:	8f 91       	pop	r24
 3b2:	7f 91       	pop	r23
 3b4:	6f 91       	pop	r22
 3b6:	5f 91       	pop	r21
 3b8:	4f 91       	pop	r20
 3ba:	3f 91       	pop	r19
 3bc:	2f 91       	pop	r18
 3be:	0f 90       	pop	r0
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	0f 90       	pop	r0
 3c4:	1f 90       	pop	r1
 3c6:	18 95       	reti

000003c8 <_Z12setBottomLEDi>:
   Tlc.update();     // send GS data to TLC5940
}

/* Something else determines which LED is on the bottom in main */
void setBottomLED(int LED) {
   bottomLED = LED;
 3c8:	80 93 28 01 	sts	0x0128, r24
 3cc:	08 95       	ret

000003ce <_Z15setAmbientColoriii>:
}

void setAmbientColor(int r, int g, int b) {
   ambientColor.r = r;
 3ce:	e9 e6       	ldi	r30, 0x69	; 105
 3d0:	f1 e0       	ldi	r31, 0x01	; 1
 3d2:	91 83       	std	Z+1, r25	; 0x01
 3d4:	80 83       	st	Z, r24
   ambientColor.g = g;
 3d6:	73 83       	std	Z+3, r23	; 0x03
 3d8:	62 83       	std	Z+2, r22	; 0x02
   ambientColor.b = b;
 3da:	55 83       	std	Z+5, r21	; 0x05
 3dc:	44 83       	std	Z+4, r20	; 0x04
 3de:	08 95       	ret

000003e0 <_Z18setBrakeBrightnessm>:
   }
  
   Tlc.update();
}

void setBrakeBrightness(uint32_t deltaT) {
 3e0:	cf 92       	push	r12
 3e2:	df 92       	push	r13
 3e4:	ef 92       	push	r14
 3e6:	ff 92       	push	r15
 3e8:	6b 01       	movw	r12, r22
 3ea:	7c 01       	movw	r14, r24
   */
   
   static uint8_t faster = 0; // To avoid lots of minute adjustments
   static uint8_t slower = 0;
   
   if (lastDeltaT < deltaT) {
 3ec:	80 91 70 01 	lds	r24, 0x0170
 3f0:	90 91 71 01 	lds	r25, 0x0171
 3f4:	a0 91 72 01 	lds	r26, 0x0172
 3f8:	b0 91 73 01 	lds	r27, 0x0173
 3fc:	8c 15       	cp	r24, r12
 3fe:	9d 05       	cpc	r25, r13
 400:	ae 05       	cpc	r26, r14
 402:	bf 05       	cpc	r27, r15
 404:	b0 f4       	brcc	.+44     	; 0x432 <_Z18setBrakeBrightnessm+0x52>
	  slower++;
 406:	80 91 68 01 	lds	r24, 0x0168
 40a:	8f 5f       	subi	r24, 0xFF	; 255
 40c:	80 93 68 01 	sts	0x0168, r24
	  ambientColor.b += TOP_GS/6;
 410:	80 91 6d 01 	lds	r24, 0x016D
 414:	90 91 6e 01 	lds	r25, 0x016E
 418:	80 53       	subi	r24, 0x30	; 48
 41a:	9f 4f       	sbci	r25, 0xFF	; 255
 41c:	90 93 6e 01 	sts	0x016E, r25
 420:	80 93 6d 01 	sts	0x016D, r24
      faster = 0;
 424:	10 92 67 01 	sts	0x0167, r1
      ambientColor.g =0;
 428:	10 92 6c 01 	sts	0x016C, r1
 42c:	10 92 6b 01 	sts	0x016B, r1
 430:	15 c0       	rjmp	.+42     	; 0x45c <_Z18setBrakeBrightnessm+0x7c>
   }
   else {
      faster++;
 432:	80 91 67 01 	lds	r24, 0x0167
 436:	8f 5f       	subi	r24, 0xFF	; 255
 438:	80 93 67 01 	sts	0x0167, r24
      ambientColor.g += TOP_GS/6;
 43c:	80 91 6b 01 	lds	r24, 0x016B
 440:	90 91 6c 01 	lds	r25, 0x016C
 444:	80 53       	subi	r24, 0x30	; 48
 446:	9f 4f       	sbci	r25, 0xFF	; 255
 448:	90 93 6c 01 	sts	0x016C, r25
 44c:	80 93 6b 01 	sts	0x016B, r24
      slower = 0;
 450:	10 92 68 01 	sts	0x0168, r1
      ambientColor.b =0;
 454:	10 92 6e 01 	sts	0x016E, r1
 458:	10 92 6d 01 	sts	0x016D, r1
   }
   Tlc.update();
 45c:	8a e1       	ldi	r24, 0x1A	; 26
 45e:	92 e0       	ldi	r25, 0x02	; 2
 460:	0e 94 72 06 	call	0xce4	; 0xce4 <_ZN7Tlc59406updateEv>
   
   if (faster >= NUM_SAMPS) {	// Decreased for testing, normally 10
 464:	80 91 67 01 	lds	r24, 0x0167
 468:	85 30       	cpi	r24, 0x05	; 5
 46a:	48 f0       	brcs	.+18     	; 0x47e <_Z18setBrakeBrightnessm+0x9e>
      faster = 0;
 46c:	10 92 67 01 	sts	0x0167, r1
      if (brightnesslevel > 0)
 470:	80 91 26 01 	lds	r24, 0x0126
 474:	88 23       	and	r24, r24
 476:	19 f0       	breq	.+6      	; 0x47e <_Z18setBrakeBrightnessm+0x9e>
         brightnesslevel--;
 478:	81 50       	subi	r24, 0x01	; 1
 47a:	80 93 26 01 	sts	0x0126, r24
   }
   
   if (slower >= NUM_SAMPS) {	// Decreased for testing, normally 10
 47e:	80 91 68 01 	lds	r24, 0x0168
 482:	85 30       	cpi	r24, 0x05	; 5
 484:	48 f0       	brcs	.+18     	; 0x498 <_Z18setBrakeBrightnessm+0xb8>
      slower = 0;
 486:	10 92 68 01 	sts	0x0168, r1
      if (brightnesslevel < MAX_BRIGHTNESS) {
 48a:	80 91 26 01 	lds	r24, 0x0126
 48e:	8f 30       	cpi	r24, 0x0F	; 15
 490:	18 f4       	brcc	.+6      	; 0x498 <_Z18setBrakeBrightnessm+0xb8>
         brightnesslevel++;
 492:	8f 5f       	subi	r24, 0xFF	; 255
 494:	80 93 26 01 	sts	0x0126, r24
      }
   }
   
   lastDeltaT = deltaT;
 498:	c0 92 70 01 	sts	0x0170, r12
 49c:	d0 92 71 01 	sts	0x0171, r13
 4a0:	e0 92 72 01 	sts	0x0172, r14
 4a4:	f0 92 73 01 	sts	0x0173, r15
}
 4a8:	ff 90       	pop	r15
 4aa:	ef 90       	pop	r14
 4ac:	df 90       	pop	r13
 4ae:	cf 90       	pop	r12
 4b0:	08 95       	ret

000004b2 <_Z6setLEDi5color>:

void setLED(int ledNum, color color) {
 4b2:	0f 93       	push	r16
 4b4:	1f 93       	push	r17
 4b6:	cf 93       	push	r28
 4b8:	df 93       	push	r29
 4ba:	00 d0       	rcall	.+0      	; 0x4bc <_Z6setLEDi5color+0xa>
 4bc:	00 d0       	rcall	.+0      	; 0x4be <_Z6setLEDi5color+0xc>
 4be:	00 d0       	rcall	.+0      	; 0x4c0 <_Z6setLEDi5color+0xe>
 4c0:	cd b7       	in	r28, 0x3d	; 61
 4c2:	de b7       	in	r29, 0x3e	; 62
 4c4:	29 83       	std	Y+1, r18	; 0x01
 4c6:	3a 83       	std	Y+2, r19	; 0x02
 4c8:	4b 83       	std	Y+3, r20	; 0x03
 4ca:	5c 83       	std	Y+4, r21	; 0x04
 4cc:	6d 83       	std	Y+5, r22	; 0x05
 4ce:	7e 83       	std	Y+6, r23	; 0x06
   int offset = -1;
   ledNum *= numColorChannels;
 4d0:	8c 01       	movw	r16, r24
 4d2:	00 0f       	add	r16, r16
 4d4:	11 1f       	adc	r17, r17
 4d6:	08 0f       	add	r16, r24
 4d8:	19 1f       	adc	r17, r25
   
   if (R_ENABLE)
      Tlc.set(ledNum + ++offset, color.r);
 4da:	49 81       	ldd	r20, Y+1	; 0x01
 4dc:	5a 81       	ldd	r21, Y+2	; 0x02
 4de:	60 2f       	mov	r22, r16
 4e0:	8a e1       	ldi	r24, 0x1A	; 26
 4e2:	92 e0       	ldi	r25, 0x02	; 2
 4e4:	0e 94 28 06 	call	0xc50	; 0xc50 <_ZN7Tlc59403setEhj>
   if (G_ENABLE)
      Tlc.set(ledNum + ++offset, color.g);
 4e8:	4b 81       	ldd	r20, Y+3	; 0x03
 4ea:	5c 81       	ldd	r21, Y+4	; 0x04
 4ec:	61 e0       	ldi	r22, 0x01	; 1
 4ee:	60 0f       	add	r22, r16
 4f0:	8a e1       	ldi	r24, 0x1A	; 26
 4f2:	92 e0       	ldi	r25, 0x02	; 2
 4f4:	0e 94 28 06 	call	0xc50	; 0xc50 <_ZN7Tlc59403setEhj>
   if (B_ENABLE)
      Tlc.set(ledNum + ++offset, color.b);
 4f8:	4d 81       	ldd	r20, Y+5	; 0x05
 4fa:	5e 81       	ldd	r21, Y+6	; 0x06
 4fc:	62 e0       	ldi	r22, 0x02	; 2
 4fe:	60 0f       	add	r22, r16
 500:	8a e1       	ldi	r24, 0x1A	; 26
 502:	92 e0       	ldi	r25, 0x02	; 2
}
 504:	26 96       	adiw	r28, 0x06	; 6
 506:	0f b6       	in	r0, 0x3f	; 63
 508:	f8 94       	cli
 50a:	de bf       	out	0x3e, r29	; 62
 50c:	0f be       	out	0x3f, r0	; 63
 50e:	cd bf       	out	0x3d, r28	; 61
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	1f 91       	pop	r17
 516:	0f 91       	pop	r16
   if (R_ENABLE)
      Tlc.set(ledNum + ++offset, color.r);
   if (G_ENABLE)
      Tlc.set(ledNum + ++offset, color.g);
   if (B_ENABLE)
      Tlc.set(ledNum + ++offset, color.b);
 518:	0c 94 28 06 	jmp	0xc50	; 0xc50 <_ZN7Tlc59403setEhj>

0000051c <_Z7nextLEDh>:
   rearLight.r = brightnessSteps[brightnesslevel];
   
   nextLED(sensorNum);
}

void nextLED(uint8_t sensorNum) {
 51c:	cf 93       	push	r28
 51e:	df 93       	push	r29
//   else if (prevSensor(sensorNum, prevSensorNum))
//      if ((--currentLED) < 0)
//         currentLED = numLeds - 1;
//   prevSensorNum = sensorNum;
   
   if((currentLED = sensorNum) < 0)
 520:	80 93 27 01 	sts	0x0127, r24
   
   
   if (currentLED < 0)
      currentLED = bottomLED; // Definitely subject to change, just a placeholder
   
   Tlc.clear();
 524:	8a e1       	ldi	r24, 0x1A	; 26
 526:	92 e0       	ldi	r25, 0x02	; 2
 528:	0e 94 60 06 	call	0xcc0	; 0xcc0 <_ZN7Tlc59405clearEv>
   
   for (ndx = 0; ndx < numLeds; ndx++) {
 52c:	c0 e0       	ldi	r28, 0x00	; 0
 52e:	d0 e0       	ldi	r29, 0x00	; 0
 530:	80 91 6f 01 	lds	r24, 0x016F
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	c8 17       	cp	r28, r24
 538:	d9 07       	cpc	r29, r25
 53a:	24 f5       	brge	.+72     	; 0x584 <_Z7nextLEDh+0x68>
      if (ndx == currentLED)
 53c:	80 91 27 01 	lds	r24, 0x0127
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	c8 17       	cp	r28, r24
 544:	d9 07       	cpc	r29, r25
 546:	69 f4       	brne	.+26     	; 0x562 <_Z7nextLEDh+0x46>
         setLED(ndx, rearLight);
 548:	20 91 00 01 	lds	r18, 0x0100
 54c:	30 91 01 01 	lds	r19, 0x0101
 550:	40 91 02 01 	lds	r20, 0x0102
 554:	50 91 03 01 	lds	r21, 0x0103
 558:	60 91 04 01 	lds	r22, 0x0104
 55c:	70 91 05 01 	lds	r23, 0x0105
 560:	0c c0       	rjmp	.+24     	; 0x57a <_Z7nextLEDh+0x5e>
      else
         setLED(ndx, ambientColor);
 562:	20 91 69 01 	lds	r18, 0x0169
 566:	30 91 6a 01 	lds	r19, 0x016A
 56a:	40 91 6b 01 	lds	r20, 0x016B
 56e:	50 91 6c 01 	lds	r21, 0x016C
 572:	60 91 6d 01 	lds	r22, 0x016D
 576:	70 91 6e 01 	lds	r23, 0x016E
 57a:	ce 01       	movw	r24, r28
 57c:	0e 94 59 02 	call	0x4b2	; 0x4b2 <_Z6setLEDi5color>
   if (currentLED < 0)
      currentLED = bottomLED; // Definitely subject to change, just a placeholder
   
   Tlc.clear();
   
   for (ndx = 0; ndx < numLeds; ndx++) {
 580:	21 96       	adiw	r28, 0x01	; 1
 582:	d6 cf       	rjmp	.-84     	; 0x530 <_Z7nextLEDh+0x14>
         setLED(ndx, rearLight);
      else
         setLED(ndx, ambientColor);
   }
   
   Tlc.update();
 584:	8a e1       	ldi	r24, 0x1A	; 26
 586:	92 e0       	ldi	r25, 0x02	; 2
}
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
         setLED(ndx, rearLight);
      else
         setLED(ndx, ambientColor);
   }
   
   Tlc.update();
 58c:	0c 94 72 06 	jmp	0xce4	; 0xce4 <_ZN7Tlc59406updateEv>

00000590 <_Z7nextLEDhm>:
   ambientColor.g = g;
   ambientColor.b = b;
}

/* Overloading nextLED to take in speed and set the brightness based on it */
void nextLED(uint8_t sensorNum, uint32_t deltaT) {
 590:	cf 93       	push	r28
 592:	c8 2f       	mov	r28, r24
   setBrakeBrightness(deltaT);
 594:	cb 01       	movw	r24, r22
 596:	ba 01       	movw	r22, r20
 598:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_Z18setBrakeBrightnessm>
   
   rearLight.r = brightnessSteps[brightnesslevel];
 59c:	e0 91 26 01 	lds	r30, 0x0126
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	ee 0f       	add	r30, r30
 5a4:	ff 1f       	adc	r31, r31
 5a6:	ea 5f       	subi	r30, 0xFA	; 250
 5a8:	fe 4f       	sbci	r31, 0xFE	; 254
 5aa:	80 81       	ld	r24, Z
 5ac:	91 81       	ldd	r25, Z+1	; 0x01
 5ae:	90 93 01 01 	sts	0x0101, r25
 5b2:	80 93 00 01 	sts	0x0100, r24
   
   nextLED(sensorNum);
 5b6:	8c 2f       	mov	r24, r28
}
 5b8:	cf 91       	pop	r28
void nextLED(uint8_t sensorNum, uint32_t deltaT) {
   setBrakeBrightness(deltaT);
   
   rearLight.r = brightnessSteps[brightnesslevel];
   
   nextLED(sensorNum);
 5ba:	0c 94 8e 02 	jmp	0x51c	; 0x51c <_Z7nextLEDh>

000005be <_GLOBAL__sub_I_bottomLED>:
   TOP_GS / 16, TOP_GS / 16, TOP_GS / 16, TOP_GS / 16,
   TOP_GS / 16, TOP_GS / 16, TOP_GS / 16, TOP_GS / 16,
   TOP_GS / 16, TOP_GS / 16, TOP_GS / 16, TOP_GS / 16, TOP_GS};

static uint8_t numColorChannels = R_ENABLE + G_ENABLE + B_ENABLE;
static uint8_t numLeds = NUM_LED_CHANNELS / numColorChannels;
 5be:	83 e0       	ldi	r24, 0x03	; 3
 5c0:	80 93 6f 01 	sts	0x016F, r24
 5c4:	08 95       	ret

000005c6 <_Z8initGPIOv>:
#include "tmr_int_util.h"

// sets up the inputs, outputs and internal pull-ups 
void initGPIO(){
	// all hall effect sensors are inputs
	DDRB &= ~(1<<HALLEFFECT1);
 5c6:	20 98       	cbi	0x04, 0	; 4
	DDRD &= ~(1<<HALLEFFECT2);
 5c8:	57 98       	cbi	0x0a, 7	; 10
	DDRC &= ~(1<<HALLEFFECT3);
 5ca:	38 98       	cbi	0x07, 0	; 7
	
	// Debug LED is an output
	PORTD |= (1<<DEBUGLED);
 5cc:	5c 9a       	sbi	0x0b, 4	; 11
	PORTD &= ~(1<<DEBUGLED);		// initially off
 5ce:	5c 98       	cbi	0x0b, 4	; 11
	
	// turn on internal pull-up for hall effects
	PORTB |= (1<<HALLEFFECT1);
 5d0:	28 9a       	sbi	0x05, 0	; 5
	PORTD |= (1<<HALLEFFECT2);
 5d2:	5f 9a       	sbi	0x0b, 7	; 11
	PORTC |= (1<<HALLEFFECT3);
 5d4:	40 9a       	sbi	0x08, 0	; 8
 5d6:	08 95       	ret

000005d8 <_Z10initTimersv>:
// sets up the timers
void initTimers(){
	// timer1 and timer2 are used in SparkFun library
	
	// timer0 (8bit) 0->255
	TCCR0A = 0x02;		// set timer to CTC mode
 5d8:	82 e0       	ldi	r24, 0x02	; 2
 5da:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x02;		// set pre-scaler to 8
 5dc:	85 bd       	out	0x25, r24	; 37
	OCR0A = OCR0A_OVR;	// overflow value 
 5de:	98 ec       	ldi	r25, 0xC8	; 200
 5e0:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;		// timer mask interrupt on OCR0A overflow
 5e2:	80 93 6e 00 	sts	0x006E, r24
	TIFR0 = 0x02;		// set overflow to OCR0A value
 5e6:	85 bb       	out	0x15, r24	; 21
 5e8:	08 95       	ret

000005ea <_Z9initPCINTv>:
}

// sets up all three PCINT vectors for each hall effect sensor
void initPCINT(){
	cli();		// clear interrupts
 5ea:	f8 94       	cli
	
	// enable PCINT (2:0)
	PCICR = 0b00000111;
 5ec:	87 e0       	ldi	r24, 0x07	; 7
 5ee:	80 93 68 00 	sts	0x0068, r24
	
	// PCINT0 -> D8 (halleffect sensor 1)
	PCMSK0 = (1<<HALLEFFECT1);
 5f2:	91 e0       	ldi	r25, 0x01	; 1
 5f4:	90 93 6b 00 	sts	0x006B, r25
	// PCINT1 -> A0 (halleffect sensor 3)
	PCMSK1 = (1<<HALLEFFECT3);
 5f8:	90 93 6c 00 	sts	0x006C, r25
	// PCINT2 -> D7 (halleffect sensor 2)
	PCMSK2 = (1<<HALLEFFECT2);
 5fc:	90 e8       	ldi	r25, 0x80	; 128
 5fe:	90 93 6d 00 	sts	0x006D, r25
	
	// set the PCINT flag register for all 3 PCINTs
	PCIFR = 0b00000111;
 602:	8b bb       	out	0x1b, r24	; 27
	
	sei();		// set interrupts 
 604:	78 94       	sei
 606:	08 95       	ret

00000608 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 608:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 60a:	91 8d       	ldd	r25, Z+25	; 0x19
 60c:	22 8d       	ldd	r18, Z+26	; 0x1a
 60e:	89 2f       	mov	r24, r25
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	80 5c       	subi	r24, 0xC0	; 192
 614:	9f 4f       	sbci	r25, 0xFF	; 255
 616:	82 1b       	sub	r24, r18
 618:	91 09       	sbc	r25, r1
}
 61a:	8f 73       	andi	r24, 0x3F	; 63
 61c:	99 27       	eor	r25, r25
 61e:	08 95       	ret

00000620 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 620:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 622:	91 8d       	ldd	r25, Z+25	; 0x19
 624:	82 8d       	ldd	r24, Z+26	; 0x1a
 626:	98 17       	cp	r25, r24
 628:	31 f0       	breq	.+12     	; 0x636 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 62a:	82 8d       	ldd	r24, Z+26	; 0x1a
 62c:	e8 0f       	add	r30, r24
 62e:	f1 1d       	adc	r31, r1
 630:	85 8d       	ldd	r24, Z+29	; 0x1d
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 636:	8f ef       	ldi	r24, 0xFF	; 255
 638:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 63a:	08 95       	ret

0000063c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 63c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 63e:	91 8d       	ldd	r25, Z+25	; 0x19
 640:	82 8d       	ldd	r24, Z+26	; 0x1a
 642:	98 17       	cp	r25, r24
 644:	61 f0       	breq	.+24     	; 0x65e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 646:	82 8d       	ldd	r24, Z+26	; 0x1a
 648:	df 01       	movw	r26, r30
 64a:	a8 0f       	add	r26, r24
 64c:	b1 1d       	adc	r27, r1
 64e:	5d 96       	adiw	r26, 0x1d	; 29
 650:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 652:	92 8d       	ldd	r25, Z+26	; 0x1a
 654:	9f 5f       	subi	r25, 0xFF	; 255
 656:	9f 73       	andi	r25, 0x3F	; 63
 658:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 65e:	8f ef       	ldi	r24, 0xFF	; 255
 660:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 662:	08 95       	ret

00000664 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 664:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 666:	84 8d       	ldd	r24, Z+28	; 0x1c
 668:	df 01       	movw	r26, r30
 66a:	a8 0f       	add	r26, r24
 66c:	b1 1d       	adc	r27, r1
 66e:	a3 5a       	subi	r26, 0xA3	; 163
 670:	bf 4f       	sbci	r27, 0xFF	; 255
 672:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 674:	84 8d       	ldd	r24, Z+28	; 0x1c
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	01 96       	adiw	r24, 0x01	; 1
 67a:	8f 73       	andi	r24, 0x3F	; 63
 67c:	99 27       	eor	r25, r25
 67e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 680:	a6 89       	ldd	r26, Z+22	; 0x16
 682:	b7 89       	ldd	r27, Z+23	; 0x17
 684:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 686:	a0 89       	ldd	r26, Z+16	; 0x10
 688:	b1 89       	ldd	r27, Z+17	; 0x11
 68a:	8c 91       	ld	r24, X
 68c:	80 64       	ori	r24, 0x40	; 64
 68e:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 690:	93 8d       	ldd	r25, Z+27	; 0x1b
 692:	84 8d       	ldd	r24, Z+28	; 0x1c
 694:	98 13       	cpse	r25, r24
 696:	06 c0       	rjmp	.+12     	; 0x6a4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 698:	02 88       	ldd	r0, Z+18	; 0x12
 69a:	f3 89       	ldd	r31, Z+19	; 0x13
 69c:	e0 2d       	mov	r30, r0
 69e:	80 81       	ld	r24, Z
 6a0:	8f 7d       	andi	r24, 0xDF	; 223
 6a2:	80 83       	st	Z, r24
 6a4:	08 95       	ret

000006a6 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 6a6:	cf 93       	push	r28
 6a8:	df 93       	push	r29
 6aa:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 6ac:	88 8d       	ldd	r24, Y+24	; 0x18
 6ae:	88 23       	and	r24, r24
 6b0:	c9 f0       	breq	.+50     	; 0x6e4 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 6b2:	ea 89       	ldd	r30, Y+18	; 0x12
 6b4:	fb 89       	ldd	r31, Y+19	; 0x13
 6b6:	80 81       	ld	r24, Z
 6b8:	85 fd       	sbrc	r24, 5
 6ba:	05 c0       	rjmp	.+10     	; 0x6c6 <_ZN14HardwareSerial5flushEv+0x20>
 6bc:	a8 89       	ldd	r26, Y+16	; 0x10
 6be:	b9 89       	ldd	r27, Y+17	; 0x11
 6c0:	8c 91       	ld	r24, X
 6c2:	86 fd       	sbrc	r24, 6
 6c4:	0f c0       	rjmp	.+30     	; 0x6e4 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 6c6:	0f b6       	in	r0, 0x3f	; 63
 6c8:	07 fc       	sbrc	r0, 7
 6ca:	f5 cf       	rjmp	.-22     	; 0x6b6 <_ZN14HardwareSerial5flushEv+0x10>
 6cc:	80 81       	ld	r24, Z
 6ce:	85 ff       	sbrs	r24, 5
 6d0:	f2 cf       	rjmp	.-28     	; 0x6b6 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 6d2:	a8 89       	ldd	r26, Y+16	; 0x10
 6d4:	b9 89       	ldd	r27, Y+17	; 0x11
 6d6:	8c 91       	ld	r24, X
 6d8:	85 ff       	sbrs	r24, 5
 6da:	ed cf       	rjmp	.-38     	; 0x6b6 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 6dc:	ce 01       	movw	r24, r28
 6de:	0e 94 32 03 	call	0x664	; 0x664 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 6e2:	e7 cf       	rjmp	.-50     	; 0x6b2 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 6e4:	df 91       	pop	r29
 6e6:	cf 91       	pop	r28
 6e8:	08 95       	ret

000006ea <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 6ea:	ef 92       	push	r14
 6ec:	ff 92       	push	r15
 6ee:	0f 93       	push	r16
 6f0:	1f 93       	push	r17
 6f2:	cf 93       	push	r28
 6f4:	df 93       	push	r29
 6f6:	ec 01       	movw	r28, r24
  _written = true;
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 6fc:	9b 8d       	ldd	r25, Y+27	; 0x1b
 6fe:	8c 8d       	ldd	r24, Y+28	; 0x1c
 700:	98 13       	cpse	r25, r24
 702:	05 c0       	rjmp	.+10     	; 0x70e <_ZN14HardwareSerial5writeEh+0x24>
 704:	e8 89       	ldd	r30, Y+16	; 0x10
 706:	f9 89       	ldd	r31, Y+17	; 0x11
 708:	80 81       	ld	r24, Z
 70a:	85 fd       	sbrc	r24, 5
 70c:	24 c0       	rjmp	.+72     	; 0x756 <_ZN14HardwareSerial5writeEh+0x6c>
 70e:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 710:	0b 8d       	ldd	r16, Y+27	; 0x1b
 712:	10 e0       	ldi	r17, 0x00	; 0
 714:	0f 5f       	subi	r16, 0xFF	; 255
 716:	1f 4f       	sbci	r17, 0xFF	; 255
 718:	0f 73       	andi	r16, 0x3F	; 63
 71a:	11 27       	eor	r17, r17
 71c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 71e:	8c 8d       	ldd	r24, Y+28	; 0x1c
 720:	e8 12       	cpse	r14, r24
 722:	0c c0       	rjmp	.+24     	; 0x73c <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 724:	0f b6       	in	r0, 0x3f	; 63
 726:	07 fc       	sbrc	r0, 7
 728:	fa cf       	rjmp	.-12     	; 0x71e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 72a:	e8 89       	ldd	r30, Y+16	; 0x10
 72c:	f9 89       	ldd	r31, Y+17	; 0x11
 72e:	80 81       	ld	r24, Z
 730:	85 ff       	sbrs	r24, 5
 732:	f5 cf       	rjmp	.-22     	; 0x71e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 734:	ce 01       	movw	r24, r28
 736:	0e 94 32 03 	call	0x664	; 0x664 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 73a:	f1 cf       	rjmp	.-30     	; 0x71e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 73c:	8b 8d       	ldd	r24, Y+27	; 0x1b
 73e:	fe 01       	movw	r30, r28
 740:	e8 0f       	add	r30, r24
 742:	f1 1d       	adc	r31, r1
 744:	e3 5a       	subi	r30, 0xA3	; 163
 746:	ff 4f       	sbci	r31, 0xFF	; 255
 748:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 74a:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 74c:	ea 89       	ldd	r30, Y+18	; 0x12
 74e:	fb 89       	ldd	r31, Y+19	; 0x13
 750:	80 81       	ld	r24, Z
 752:	80 62       	ori	r24, 0x20	; 32
 754:	07 c0       	rjmp	.+14     	; 0x764 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 756:	ee 89       	ldd	r30, Y+22	; 0x16
 758:	ff 89       	ldd	r31, Y+23	; 0x17
 75a:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 75c:	e8 89       	ldd	r30, Y+16	; 0x10
 75e:	f9 89       	ldd	r31, Y+17	; 0x11
 760:	80 81       	ld	r24, Z
 762:	80 64       	ori	r24, 0x40	; 64
 764:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	df 91       	pop	r29
 76c:	cf 91       	pop	r28
 76e:	1f 91       	pop	r17
 770:	0f 91       	pop	r16
 772:	ff 90       	pop	r15
 774:	ef 90       	pop	r14
 776:	08 95       	ret

00000778 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 778:	cf 92       	push	r12
 77a:	df 92       	push	r13
 77c:	ef 92       	push	r14
 77e:	ff 92       	push	r15
 780:	1f 93       	push	r17
 782:	cf 93       	push	r28
 784:	df 93       	push	r29
 786:	ec 01       	movw	r28, r24
 788:	6a 01       	movw	r12, r20
 78a:	7b 01       	movw	r14, r22
 78c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 78e:	e8 89       	ldd	r30, Y+16	; 0x10
 790:	f9 89       	ldd	r31, Y+17	; 0x11
 792:	82 e0       	ldi	r24, 0x02	; 2
 794:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 796:	41 15       	cp	r20, r1
 798:	51 4e       	sbci	r21, 0xE1	; 225
 79a:	61 05       	cpc	r22, r1
 79c:	71 05       	cpc	r23, r1
 79e:	b1 f0       	breq	.+44     	; 0x7cc <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 7a0:	60 e0       	ldi	r22, 0x00	; 0
 7a2:	79 e0       	ldi	r23, 0x09	; 9
 7a4:	8d e3       	ldi	r24, 0x3D	; 61
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	a7 01       	movw	r20, r14
 7aa:	96 01       	movw	r18, r12
 7ac:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__udivmodsi4>
 7b0:	da 01       	movw	r26, r20
 7b2:	c9 01       	movw	r24, r18
 7b4:	01 97       	sbiw	r24, 0x01	; 1
 7b6:	a1 09       	sbc	r26, r1
 7b8:	b1 09       	sbc	r27, r1
 7ba:	b6 95       	lsr	r27
 7bc:	a7 95       	ror	r26
 7be:	97 95       	ror	r25
 7c0:	87 95       	ror	r24
 7c2:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 7c4:	41 15       	cp	r20, r1
 7c6:	80 e1       	ldi	r24, 0x10	; 16
 7c8:	58 07       	cpc	r21, r24
 7ca:	a8 f0       	brcs	.+42     	; 0x7f6 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 7cc:	e8 89       	ldd	r30, Y+16	; 0x10
 7ce:	f9 89       	ldd	r31, Y+17	; 0x11
 7d0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 7d2:	60 e8       	ldi	r22, 0x80	; 128
 7d4:	74 e8       	ldi	r23, 0x84	; 132
 7d6:	8e e1       	ldi	r24, 0x1E	; 30
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	a7 01       	movw	r20, r14
 7dc:	96 01       	movw	r18, r12
 7de:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__udivmodsi4>
 7e2:	ba 01       	movw	r22, r20
 7e4:	a9 01       	movw	r20, r18
 7e6:	41 50       	subi	r20, 0x01	; 1
 7e8:	51 09       	sbc	r21, r1
 7ea:	61 09       	sbc	r22, r1
 7ec:	71 09       	sbc	r23, r1
 7ee:	76 95       	lsr	r23
 7f0:	67 95       	ror	r22
 7f2:	57 95       	ror	r21
 7f4:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 7f6:	ec 85       	ldd	r30, Y+12	; 0x0c
 7f8:	fd 85       	ldd	r31, Y+13	; 0x0d
 7fa:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
 7fc:	ee 85       	ldd	r30, Y+14	; 0x0e
 7fe:	ff 85       	ldd	r31, Y+15	; 0x0f
 800:	40 83       	st	Z, r20

  _written = false;
 802:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 804:	ec 89       	ldd	r30, Y+20	; 0x14
 806:	fd 89       	ldd	r31, Y+21	; 0x15
 808:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 80a:	ea 89       	ldd	r30, Y+18	; 0x12
 80c:	fb 89       	ldd	r31, Y+19	; 0x13
 80e:	80 81       	ld	r24, Z
 810:	80 61       	ori	r24, 0x10	; 16
 812:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 814:	ea 89       	ldd	r30, Y+18	; 0x12
 816:	fb 89       	ldd	r31, Y+19	; 0x13
 818:	80 81       	ld	r24, Z
 81a:	88 60       	ori	r24, 0x08	; 8
 81c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 81e:	ea 89       	ldd	r30, Y+18	; 0x12
 820:	fb 89       	ldd	r31, Y+19	; 0x13
 822:	80 81       	ld	r24, Z
 824:	80 68       	ori	r24, 0x80	; 128
 826:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 828:	ea 89       	ldd	r30, Y+18	; 0x12
 82a:	fb 89       	ldd	r31, Y+19	; 0x13
 82c:	80 81       	ld	r24, Z
 82e:	8f 7d       	andi	r24, 0xDF	; 223
 830:	80 83       	st	Z, r24
}
 832:	df 91       	pop	r29
 834:	cf 91       	pop	r28
 836:	1f 91       	pop	r17
 838:	ff 90       	pop	r15
 83a:	ef 90       	pop	r14
 83c:	df 90       	pop	r13
 83e:	cf 90       	pop	r12
 840:	08 95       	ret

00000842 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 842:	1f 92       	push	r1
 844:	0f 92       	push	r0
 846:	0f b6       	in	r0, 0x3f	; 63
 848:	0f 92       	push	r0
 84a:	11 24       	eor	r1, r1
 84c:	2f 93       	push	r18
 84e:	8f 93       	push	r24
 850:	9f 93       	push	r25
 852:	ef 93       	push	r30
 854:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 856:	e0 91 84 01 	lds	r30, 0x0184
 85a:	f0 91 85 01 	lds	r31, 0x0185
 85e:	80 81       	ld	r24, Z
 860:	e0 91 8a 01 	lds	r30, 0x018A
 864:	f0 91 8b 01 	lds	r31, 0x018B
 868:	82 fd       	sbrc	r24, 2
 86a:	12 c0       	rjmp	.+36     	; 0x890 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 86c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 86e:	80 91 8d 01 	lds	r24, 0x018D
 872:	8f 5f       	subi	r24, 0xFF	; 255
 874:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 876:	20 91 8e 01 	lds	r18, 0x018E
 87a:	82 17       	cp	r24, r18
 87c:	51 f0       	breq	.+20     	; 0x892 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 87e:	e0 91 8d 01 	lds	r30, 0x018D
 882:	f0 e0       	ldi	r31, 0x00	; 0
 884:	ec 58       	subi	r30, 0x8C	; 140
 886:	fe 4f       	sbci	r31, 0xFE	; 254
 888:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 88a:	80 93 8d 01 	sts	0x018D, r24
 88e:	01 c0       	rjmp	.+2      	; 0x892 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 890:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 892:	ff 91       	pop	r31
 894:	ef 91       	pop	r30
 896:	9f 91       	pop	r25
 898:	8f 91       	pop	r24
 89a:	2f 91       	pop	r18
 89c:	0f 90       	pop	r0
 89e:	0f be       	out	0x3f, r0	; 63
 8a0:	0f 90       	pop	r0
 8a2:	1f 90       	pop	r1
 8a4:	18 95       	reti

000008a6 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 8a6:	1f 92       	push	r1
 8a8:	0f 92       	push	r0
 8aa:	0f b6       	in	r0, 0x3f	; 63
 8ac:	0f 92       	push	r0
 8ae:	11 24       	eor	r1, r1
 8b0:	2f 93       	push	r18
 8b2:	3f 93       	push	r19
 8b4:	4f 93       	push	r20
 8b6:	5f 93       	push	r21
 8b8:	6f 93       	push	r22
 8ba:	7f 93       	push	r23
 8bc:	8f 93       	push	r24
 8be:	9f 93       	push	r25
 8c0:	af 93       	push	r26
 8c2:	bf 93       	push	r27
 8c4:	ef 93       	push	r30
 8c6:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 8c8:	84 e7       	ldi	r24, 0x74	; 116
 8ca:	91 e0       	ldi	r25, 0x01	; 1
 8cc:	0e 94 32 03 	call	0x664	; 0x664 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 8d0:	ff 91       	pop	r31
 8d2:	ef 91       	pop	r30
 8d4:	bf 91       	pop	r27
 8d6:	af 91       	pop	r26
 8d8:	9f 91       	pop	r25
 8da:	8f 91       	pop	r24
 8dc:	7f 91       	pop	r23
 8de:	6f 91       	pop	r22
 8e0:	5f 91       	pop	r21
 8e2:	4f 91       	pop	r20
 8e4:	3f 91       	pop	r19
 8e6:	2f 91       	pop	r18
 8e8:	0f 90       	pop	r0
 8ea:	0f be       	out	0x3f, r0	; 63
 8ec:	0f 90       	pop	r0
 8ee:	1f 90       	pop	r1
 8f0:	18 95       	reti

000008f2 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 8f2:	e4 e7       	ldi	r30, 0x74	; 116
 8f4:	f1 e0       	ldi	r31, 0x01	; 1
 8f6:	13 82       	std	Z+3, r1	; 0x03
 8f8:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8fa:	88 ee       	ldi	r24, 0xE8	; 232
 8fc:	93 e0       	ldi	r25, 0x03	; 3
 8fe:	a0 e0       	ldi	r26, 0x00	; 0
 900:	b0 e0       	ldi	r27, 0x00	; 0
 902:	84 83       	std	Z+4, r24	; 0x04
 904:	95 83       	std	Z+5, r25	; 0x05
 906:	a6 83       	std	Z+6, r26	; 0x06
 908:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 90a:	84 e4       	ldi	r24, 0x44	; 68
 90c:	91 e0       	ldi	r25, 0x01	; 1
 90e:	91 83       	std	Z+1, r25	; 0x01
 910:	80 83       	st	Z, r24
 912:	85 ec       	ldi	r24, 0xC5	; 197
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	95 87       	std	Z+13, r25	; 0x0d
 918:	84 87       	std	Z+12, r24	; 0x0c
 91a:	84 ec       	ldi	r24, 0xC4	; 196
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	97 87       	std	Z+15, r25	; 0x0f
 920:	86 87       	std	Z+14, r24	; 0x0e
 922:	80 ec       	ldi	r24, 0xC0	; 192
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	91 8b       	std	Z+17, r25	; 0x11
 928:	80 8b       	std	Z+16, r24	; 0x10
 92a:	81 ec       	ldi	r24, 0xC1	; 193
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	93 8b       	std	Z+19, r25	; 0x13
 930:	82 8b       	std	Z+18, r24	; 0x12
 932:	82 ec       	ldi	r24, 0xC2	; 194
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	95 8b       	std	Z+21, r25	; 0x15
 938:	84 8b       	std	Z+20, r24	; 0x14
 93a:	86 ec       	ldi	r24, 0xC6	; 198
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	97 8b       	std	Z+23, r25	; 0x17
 940:	86 8b       	std	Z+22, r24	; 0x16
 942:	11 8e       	std	Z+25, r1	; 0x19
 944:	12 8e       	std	Z+26, r1	; 0x1a
 946:	13 8e       	std	Z+27, r1	; 0x1b
 948:	14 8e       	std	Z+28, r1	; 0x1c
 94a:	08 95       	ret

0000094c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 94c:	cf 92       	push	r12
 94e:	df 92       	push	r13
 950:	ef 92       	push	r14
 952:	ff 92       	push	r15
 954:	0f 93       	push	r16
 956:	1f 93       	push	r17
 958:	cf 93       	push	r28
 95a:	df 93       	push	r29
 95c:	6c 01       	movw	r12, r24
 95e:	eb 01       	movw	r28, r22
 960:	7b 01       	movw	r14, r22
 962:	e4 0e       	add	r14, r20
 964:	f5 1e       	adc	r15, r21
  size_t n = 0;
 966:	00 e0       	ldi	r16, 0x00	; 0
 968:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
 96a:	ce 15       	cp	r28, r14
 96c:	df 05       	cpc	r29, r15
 96e:	61 f0       	breq	.+24     	; 0x988 <_ZN5Print5writeEPKhj+0x3c>
    n += write(*buffer++);
 970:	69 91       	ld	r22, Y+
 972:	d6 01       	movw	r26, r12
 974:	ed 91       	ld	r30, X+
 976:	fc 91       	ld	r31, X
 978:	01 90       	ld	r0, Z+
 97a:	f0 81       	ld	r31, Z
 97c:	e0 2d       	mov	r30, r0
 97e:	c6 01       	movw	r24, r12
 980:	09 95       	icall
 982:	08 0f       	add	r16, r24
 984:	19 1f       	adc	r17, r25
 986:	f1 cf       	rjmp	.-30     	; 0x96a <_ZN5Print5writeEPKhj+0x1e>
  }
  return n;
}
 988:	c8 01       	movw	r24, r16
 98a:	df 91       	pop	r29
 98c:	cf 91       	pop	r28
 98e:	1f 91       	pop	r17
 990:	0f 91       	pop	r16
 992:	ff 90       	pop	r15
 994:	ef 90       	pop	r14
 996:	df 90       	pop	r13
 998:	cf 90       	pop	r12
 99a:	08 95       	ret

0000099c <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 99c:	61 15       	cp	r22, r1
 99e:	71 05       	cpc	r23, r1
 9a0:	79 f0       	breq	.+30     	; 0x9c0 <_ZN5Print5writeEPKc+0x24>
      return write((const uint8_t *)str, strlen(str));
 9a2:	fb 01       	movw	r30, r22
 9a4:	01 90       	ld	r0, Z+
 9a6:	00 20       	and	r0, r0
 9a8:	e9 f7       	brne	.-6      	; 0x9a4 <_ZN5Print5writeEPKc+0x8>
 9aa:	31 97       	sbiw	r30, 0x01	; 1
 9ac:	af 01       	movw	r20, r30
 9ae:	46 1b       	sub	r20, r22
 9b0:	57 0b       	sbc	r21, r23
 9b2:	dc 01       	movw	r26, r24
 9b4:	ed 91       	ld	r30, X+
 9b6:	fc 91       	ld	r31, X
 9b8:	02 80       	ldd	r0, Z+2	; 0x02
 9ba:	f3 81       	ldd	r31, Z+3	; 0x03
 9bc:	e0 2d       	mov	r30, r0
 9be:	09 94       	ijmp
    }
 9c0:	80 e0       	ldi	r24, 0x00	; 0
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	08 95       	ret

000009c6 <_ZN5Print7printlnEv>:
  return x.printTo(*this);
}

size_t Print::println(void)
{
  return write("\r\n");
 9c6:	60 e5       	ldi	r22, 0x50	; 80
 9c8:	71 e0       	ldi	r23, 0x01	; 1
 9ca:	0c 94 ce 04 	jmp	0x99c	; 0x99c <_ZN5Print5writeEPKc>

000009ce <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
 9ce:	0f 93       	push	r16
 9d0:	1f 93       	push	r17
 9d2:	cf 93       	push	r28
 9d4:	df 93       	push	r29
 9d6:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
 9d8:	0e 94 ce 04 	call	0x99c	; 0x99c <_ZN5Print5writeEPKc>
 9dc:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 9de:	ce 01       	movw	r24, r28
 9e0:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN5Print7printlnEv>
  return n;
}
 9e4:	80 0f       	add	r24, r16
 9e6:	91 1f       	adc	r25, r17
 9e8:	df 91       	pop	r29
 9ea:	cf 91       	pop	r28
 9ec:	1f 91       	pop	r17
 9ee:	0f 91       	pop	r16
 9f0:	08 95       	ret

000009f2 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 9f2:	8f 92       	push	r8
 9f4:	9f 92       	push	r9
 9f6:	af 92       	push	r10
 9f8:	bf 92       	push	r11
 9fa:	cf 92       	push	r12
 9fc:	df 92       	push	r13
 9fe:	ef 92       	push	r14
 a00:	ff 92       	push	r15
 a02:	0f 93       	push	r16
 a04:	1f 93       	push	r17
 a06:	cf 93       	push	r28
 a08:	df 93       	push	r29
 a0a:	cd b7       	in	r28, 0x3d	; 61
 a0c:	de b7       	in	r29, 0x3e	; 62
 a0e:	a1 97       	sbiw	r28, 0x21	; 33
 a10:	0f b6       	in	r0, 0x3f	; 63
 a12:	f8 94       	cli
 a14:	de bf       	out	0x3e, r29	; 62
 a16:	0f be       	out	0x3f, r0	; 63
 a18:	cd bf       	out	0x3d, r28	; 61
 a1a:	6c 01       	movw	r12, r24
 a1c:	14 2f       	mov	r17, r20
 a1e:	e5 2f       	mov	r30, r21
 a20:	cb 01       	movw	r24, r22
 a22:	02 2f       	mov	r16, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 a24:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 a26:	22 30       	cpi	r18, 0x02	; 2
 a28:	08 f4       	brcc	.+2      	; 0xa2c <_ZN5Print11printNumberEmh+0x3a>
 a2a:	0a e0       	ldi	r16, 0x0A	; 10
 a2c:	7e 01       	movw	r14, r28
 a2e:	21 e2       	ldi	r18, 0x21	; 33
 a30:	e2 0e       	add	r14, r18
 a32:	f1 1c       	adc	r15, r1

  do {
    unsigned long m = n;
    n /= base;
 a34:	80 2e       	mov	r8, r16
 a36:	91 2c       	mov	r9, r1
 a38:	a1 2c       	mov	r10, r1
 a3a:	b1 2c       	mov	r11, r1
 a3c:	61 2f       	mov	r22, r17
 a3e:	7e 2f       	mov	r23, r30
 a40:	a5 01       	movw	r20, r10
 a42:	94 01       	movw	r18, r8
 a44:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__udivmodsi4>
    char c = m - base * n;
 a48:	02 9f       	mul	r16, r18
 a4a:	10 19       	sub	r17, r0
 a4c:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 a4e:	81 e0       	ldi	r24, 0x01	; 1
 a50:	e8 1a       	sub	r14, r24
 a52:	f1 08       	sbc	r15, r1
 a54:	1a 30       	cpi	r17, 0x0A	; 10
 a56:	10 f4       	brcc	.+4      	; 0xa5c <_ZN5Print11printNumberEmh+0x6a>
 a58:	10 5d       	subi	r17, 0xD0	; 208
 a5a:	01 c0       	rjmp	.+2      	; 0xa5e <_ZN5Print11printNumberEmh+0x6c>
 a5c:	19 5c       	subi	r17, 0xC9	; 201
 a5e:	f7 01       	movw	r30, r14
 a60:	10 83       	st	Z, r17
 a62:	12 2f       	mov	r17, r18
 a64:	e3 2f       	mov	r30, r19
 a66:	ca 01       	movw	r24, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 a68:	23 2b       	or	r18, r19
 a6a:	24 2b       	or	r18, r20
 a6c:	25 2b       	or	r18, r21
 a6e:	31 f7       	brne	.-52     	; 0xa3c <_ZN5Print11printNumberEmh+0x4a>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 a70:	b7 01       	movw	r22, r14
 a72:	c6 01       	movw	r24, r12
 a74:	0e 94 ce 04 	call	0x99c	; 0x99c <_ZN5Print5writeEPKc>
}
 a78:	a1 96       	adiw	r28, 0x21	; 33
 a7a:	0f b6       	in	r0, 0x3f	; 63
 a7c:	f8 94       	cli
 a7e:	de bf       	out	0x3e, r29	; 62
 a80:	0f be       	out	0x3f, r0	; 63
 a82:	cd bf       	out	0x3d, r28	; 61
 a84:	df 91       	pop	r29
 a86:	cf 91       	pop	r28
 a88:	1f 91       	pop	r17
 a8a:	0f 91       	pop	r16
 a8c:	ff 90       	pop	r15
 a8e:	ef 90       	pop	r14
 a90:	df 90       	pop	r13
 a92:	cf 90       	pop	r12
 a94:	bf 90       	pop	r11
 a96:	af 90       	pop	r10
 a98:	9f 90       	pop	r9
 a9a:	8f 90       	pop	r8
 a9c:	08 95       	ret

00000a9e <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 a9e:	21 15       	cp	r18, r1
 aa0:	31 05       	cpc	r19, r1
 aa2:	41 f4       	brne	.+16     	; 0xab4 <_ZN5Print5printEmi+0x16>
 aa4:	dc 01       	movw	r26, r24
 aa6:	ed 91       	ld	r30, X+
 aa8:	fc 91       	ld	r31, X
 aaa:	01 90       	ld	r0, Z+
 aac:	f0 81       	ld	r31, Z
 aae:	e0 2d       	mov	r30, r0
 ab0:	64 2f       	mov	r22, r20
 ab2:	09 94       	ijmp
  else return printNumber(n, base);
 ab4:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <_ZN5Print11printNumberEmh>

00000ab8 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
 ab8:	0f 93       	push	r16
 aba:	1f 93       	push	r17
 abc:	cf 93       	push	r28
 abe:	df 93       	push	r29
 ac0:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
 ac2:	0e 94 4f 05 	call	0xa9e	; 0xa9e <_ZN5Print5printEmi>
 ac6:	8c 01       	movw	r16, r24
  n += println();
 ac8:	ce 01       	movw	r24, r28
 aca:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN5Print7printlnEv>
  return n;
}
 ace:	80 0f       	add	r24, r16
 ad0:	91 1f       	adc	r25, r17
 ad2:	df 91       	pop	r29
 ad4:	cf 91       	pop	r28
 ad6:	1f 91       	pop	r17
 ad8:	0f 91       	pop	r16
 ada:	08 95       	ret

00000adc <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 adc:	1f 92       	push	r1
 ade:	0f 92       	push	r0
 ae0:	0f b6       	in	r0, 0x3f	; 63
 ae2:	0f 92       	push	r0
 ae4:	11 24       	eor	r1, r1
 ae6:	2f 93       	push	r18
 ae8:	3f 93       	push	r19
 aea:	8f 93       	push	r24
 aec:	9f 93       	push	r25
 aee:	af 93       	push	r26
 af0:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 af2:	80 91 12 02 	lds	r24, 0x0212
 af6:	90 91 13 02 	lds	r25, 0x0213
 afa:	a0 91 14 02 	lds	r26, 0x0214
 afe:	b0 91 15 02 	lds	r27, 0x0215
	unsigned char f = timer0_fract;
 b02:	30 91 11 02 	lds	r19, 0x0211

	m += MILLIS_INC;
	f += FRACT_INC;
 b06:	23 e0       	ldi	r18, 0x03	; 3
 b08:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 b0a:	2d 37       	cpi	r18, 0x7D	; 125
 b0c:	20 f4       	brcc	.+8      	; 0xb16 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 b0e:	01 96       	adiw	r24, 0x01	; 1
 b10:	a1 1d       	adc	r26, r1
 b12:	b1 1d       	adc	r27, r1
 b14:	05 c0       	rjmp	.+10     	; 0xb20 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 b16:	26 e8       	ldi	r18, 0x86	; 134
 b18:	23 0f       	add	r18, r19
		m += 1;
 b1a:	02 96       	adiw	r24, 0x02	; 2
 b1c:	a1 1d       	adc	r26, r1
 b1e:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 b20:	20 93 11 02 	sts	0x0211, r18
	timer0_millis = m;
 b24:	80 93 12 02 	sts	0x0212, r24
 b28:	90 93 13 02 	sts	0x0213, r25
 b2c:	a0 93 14 02 	sts	0x0214, r26
 b30:	b0 93 15 02 	sts	0x0215, r27
	timer0_overflow_count++;
 b34:	80 91 16 02 	lds	r24, 0x0216
 b38:	90 91 17 02 	lds	r25, 0x0217
 b3c:	a0 91 18 02 	lds	r26, 0x0218
 b40:	b0 91 19 02 	lds	r27, 0x0219
 b44:	01 96       	adiw	r24, 0x01	; 1
 b46:	a1 1d       	adc	r26, r1
 b48:	b1 1d       	adc	r27, r1
 b4a:	80 93 16 02 	sts	0x0216, r24
 b4e:	90 93 17 02 	sts	0x0217, r25
 b52:	a0 93 18 02 	sts	0x0218, r26
 b56:	b0 93 19 02 	sts	0x0219, r27
}
 b5a:	bf 91       	pop	r27
 b5c:	af 91       	pop	r26
 b5e:	9f 91       	pop	r25
 b60:	8f 91       	pop	r24
 b62:	3f 91       	pop	r19
 b64:	2f 91       	pop	r18
 b66:	0f 90       	pop	r0
 b68:	0f be       	out	0x3f, r0	; 63
 b6a:	0f 90       	pop	r0
 b6c:	1f 90       	pop	r1
 b6e:	18 95       	reti

00000b70 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 b70:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 b72:	84 b5       	in	r24, 0x24	; 36
 b74:	82 60       	ori	r24, 0x02	; 2
 b76:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 b78:	84 b5       	in	r24, 0x24	; 36
 b7a:	81 60       	ori	r24, 0x01	; 1
 b7c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 b7e:	85 b5       	in	r24, 0x25	; 37
 b80:	82 60       	ori	r24, 0x02	; 2
 b82:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 b84:	85 b5       	in	r24, 0x25	; 37
 b86:	81 60       	ori	r24, 0x01	; 1
 b88:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 b8a:	ee e6       	ldi	r30, 0x6E	; 110
 b8c:	f0 e0       	ldi	r31, 0x00	; 0
 b8e:	80 81       	ld	r24, Z
 b90:	81 60       	ori	r24, 0x01	; 1
 b92:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 b94:	e1 e8       	ldi	r30, 0x81	; 129
 b96:	f0 e0       	ldi	r31, 0x00	; 0
 b98:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 b9a:	80 81       	ld	r24, Z
 b9c:	82 60       	ori	r24, 0x02	; 2
 b9e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 ba0:	80 81       	ld	r24, Z
 ba2:	81 60       	ori	r24, 0x01	; 1
 ba4:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 ba6:	e0 e8       	ldi	r30, 0x80	; 128
 ba8:	f0 e0       	ldi	r31, 0x00	; 0
 baa:	80 81       	ld	r24, Z
 bac:	81 60       	ori	r24, 0x01	; 1
 bae:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 bb0:	e1 eb       	ldi	r30, 0xB1	; 177
 bb2:	f0 e0       	ldi	r31, 0x00	; 0
 bb4:	80 81       	ld	r24, Z
 bb6:	84 60       	ori	r24, 0x04	; 4
 bb8:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 bba:	e0 eb       	ldi	r30, 0xB0	; 176
 bbc:	f0 e0       	ldi	r31, 0x00	; 0
 bbe:	80 81       	ld	r24, Z
 bc0:	81 60       	ori	r24, 0x01	; 1
 bc2:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 bc4:	ea e7       	ldi	r30, 0x7A	; 122
 bc6:	f0 e0       	ldi	r31, 0x00	; 0
 bc8:	80 81       	ld	r24, Z
 bca:	84 60       	ori	r24, 0x04	; 4
 bcc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 bce:	80 81       	ld	r24, Z
 bd0:	82 60       	ori	r24, 0x02	; 2
 bd2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 bd4:	80 81       	ld	r24, Z
 bd6:	81 60       	ori	r24, 0x01	; 1
 bd8:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 bda:	80 81       	ld	r24, Z
 bdc:	80 68       	ori	r24, 0x80	; 128
 bde:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 be0:	10 92 c1 00 	sts	0x00C1, r1
 be4:	08 95       	ret

00000be6 <__vector_13>:
/** Don't add an extra SCLK pulse after switching from dot-correction mode. */
static uint8_t firstGSInput;

/** Interrupt called after an XLAT pulse to prevent more XLAT pulses. */
ISR(TIMER1_OVF_vect)
{
 be6:	1f 92       	push	r1
 be8:	0f 92       	push	r0
 bea:	0f b6       	in	r0, 0x3f	; 63
 bec:	0f 92       	push	r0
 bee:	11 24       	eor	r1, r1
 bf0:	2f 93       	push	r18
 bf2:	3f 93       	push	r19
 bf4:	4f 93       	push	r20
 bf6:	5f 93       	push	r21
 bf8:	6f 93       	push	r22
 bfa:	7f 93       	push	r23
 bfc:	8f 93       	push	r24
 bfe:	9f 93       	push	r25
 c00:	af 93       	push	r26
 c02:	bf 93       	push	r27
 c04:	ef 93       	push	r30
 c06:	ff 93       	push	r31
    disable_XLAT_pulses();
 c08:	80 e2       	ldi	r24, 0x20	; 32
 c0a:	80 93 80 00 	sts	0x0080, r24
    clear_XLAT_interrupt();
 c0e:	10 92 6f 00 	sts	0x006F, r1
    tlc_needXLAT = 0;
 c12:	10 92 36 02 	sts	0x0236, r1
    if (tlc_onUpdateFinished) {
 c16:	80 91 34 02 	lds	r24, 0x0234
 c1a:	90 91 35 02 	lds	r25, 0x0235
 c1e:	89 2b       	or	r24, r25
 c20:	31 f0       	breq	.+12     	; 0xc2e <__vector_13+0x48>
        sei();
 c22:	78 94       	sei
        tlc_onUpdateFinished();
 c24:	e0 91 34 02 	lds	r30, 0x0234
 c28:	f0 91 35 02 	lds	r31, 0x0235
 c2c:	09 95       	icall
    }
}
 c2e:	ff 91       	pop	r31
 c30:	ef 91       	pop	r30
 c32:	bf 91       	pop	r27
 c34:	af 91       	pop	r26
 c36:	9f 91       	pop	r25
 c38:	8f 91       	pop	r24
 c3a:	7f 91       	pop	r23
 c3c:	6f 91       	pop	r22
 c3e:	5f 91       	pop	r21
 c40:	4f 91       	pop	r20
 c42:	3f 91       	pop	r19
 c44:	2f 91       	pop	r18
 c46:	0f 90       	pop	r0
 c48:	0f be       	out	0x3f, r0	; 63
 c4a:	0f 90       	pop	r0
 c4c:	1f 90       	pop	r1
 c4e:	18 95       	reti

00000c50 <_ZN7Tlc59403setEhj>:
           channel 0, OUT0 of the next TLC is channel 16, etc.
    \param value (0-4095).  The grayscale value, 4095 is maximum.
    \see get */
void Tlc5940::set(TLC_CHANNEL_TYPE channel, uint16_t value)
{
    TLC_CHANNEL_TYPE index8 = (NUM_TLCS * 16 - 1) - channel;
 c50:	8f e0       	ldi	r24, 0x0F	; 15
 c52:	86 1b       	sub	r24, r22
    uint8_t *index12p = tlc_GSData + ((((uint16_t)index8) * 3) >> 1);
 c54:	93 e0       	ldi	r25, 0x03	; 3
 c56:	89 9f       	mul	r24, r25
 c58:	f0 01       	movw	r30, r0
 c5a:	11 24       	eor	r1, r1
 c5c:	f6 95       	lsr	r31
 c5e:	e7 95       	ror	r30
 c60:	e4 5e       	subi	r30, 0xE4	; 228
 c62:	fd 4f       	sbci	r31, 0xFD	; 253
    if (index8 & 1) { // starts in the middle
 c64:	80 ff       	sbrs	r24, 0
 c66:	05 c0       	rjmp	.+10     	; 0xc72 <_ZN7Tlc59403setEhj+0x22>
                      // first 4 bits intact | 4 top bits of value
        *index12p = (*index12p & 0xF0) | (value >> 8);
 c68:	80 81       	ld	r24, Z
 c6a:	80 7f       	andi	r24, 0xF0	; 240
 c6c:	85 2b       	or	r24, r21
 c6e:	80 83       	st	Z, r24
 c70:	0c c0       	rjmp	.+24     	; 0xc8a <_ZN7Tlc59403setEhj+0x3a>
                      // 8 lower bits of value
        *(++index12p) = value & 0xFF;
    } else { // starts clean
                      // 8 upper bits of value
        *(index12p++) = value >> 4;
 c72:	ca 01       	movw	r24, r20
 c74:	24 e0       	ldi	r18, 0x04	; 4
 c76:	96 95       	lsr	r25
 c78:	87 95       	ror	r24
 c7a:	2a 95       	dec	r18
 c7c:	e1 f7       	brne	.-8      	; 0xc76 <_ZN7Tlc59403setEhj+0x26>
 c7e:	80 83       	st	Z, r24
                      // 4 lower bits of value | last 4 bits intact
        *index12p = ((uint8_t)(value << 4)) | (*index12p & 0xF);
 c80:	81 81       	ldd	r24, Z+1	; 0x01
 c82:	8f 70       	andi	r24, 0x0F	; 15
 c84:	42 95       	swap	r20
 c86:	40 7f       	andi	r20, 0xF0	; 240
 c88:	48 2b       	or	r20, r24
 c8a:	41 83       	std	Z+1, r20	; 0x01
 c8c:	08 95       	ret

00000c8e <_ZN7Tlc59406setAllEj>:

/** Sets all channels to value.
    \param value grayscale value (0 - 4095) */
void Tlc5940::setAll(uint16_t value)
{
    uint8_t firstByte = value >> 4;
 c8e:	cb 01       	movw	r24, r22
 c90:	24 e0       	ldi	r18, 0x04	; 4
 c92:	96 95       	lsr	r25
 c94:	87 95       	ror	r24
 c96:	2a 95       	dec	r18
 c98:	e1 f7       	brne	.-8      	; 0xc92 <_ZN7Tlc59406setAllEj+0x4>
 c9a:	98 2f       	mov	r25, r24
    uint8_t secondByte = (value << 4) | (value >> 8);
 c9c:	26 2f       	mov	r18, r22
 c9e:	86 2f       	mov	r24, r22
 ca0:	82 95       	swap	r24
 ca2:	80 7f       	andi	r24, 0xF0	; 240
 ca4:	87 2b       	or	r24, r23
    uint8_t *p = tlc_GSData;
 ca6:	ec e1       	ldi	r30, 0x1C	; 28
 ca8:	f2 e0       	ldi	r31, 0x02	; 2
    while (p < tlc_GSData + NUM_TLCS * 24) {
        *p++ = firstByte;
 caa:	90 83       	st	Z, r25
        *p++ = secondByte;
 cac:	81 83       	std	Z+1, r24	; 0x01
 cae:	33 96       	adiw	r30, 0x03	; 3
 cb0:	df 01       	movw	r26, r30
 cb2:	11 97       	sbiw	r26, 0x01	; 1
        *p++ = (uint8_t)value;
 cb4:	2c 93       	st	X, r18
void Tlc5940::setAll(uint16_t value)
{
    uint8_t firstByte = value >> 4;
    uint8_t secondByte = (value << 4) | (value >> 8);
    uint8_t *p = tlc_GSData;
    while (p < tlc_GSData + NUM_TLCS * 24) {
 cb6:	32 e0       	ldi	r19, 0x02	; 2
 cb8:	e4 33       	cpi	r30, 0x34	; 52
 cba:	f3 07       	cpc	r31, r19
 cbc:	b0 f3       	brcs	.-20     	; 0xcaa <_ZN7Tlc59406setAllEj+0x1c>
        *p++ = firstByte;
        *p++ = secondByte;
        *p++ = (uint8_t)value;
    }
}
 cbe:	08 95       	ret

00000cc0 <_ZN7Tlc59405clearEv>:
/** Clears the grayscale data array, #tlc_GSData, but does not shift in any
    data.  This call should be followed by update() if you are turning off
    all the outputs. */
void Tlc5940::clear(void)
{
    setAll(0);
 cc0:	60 e0       	ldi	r22, 0x00	; 0
 cc2:	70 e0       	ldi	r23, 0x00	; 0
 cc4:	0c 94 47 06 	jmp	0xc8e	; 0xc8e <_ZN7Tlc59406setAllEj>

00000cc8 <_Z15tlc_shift8_initv>:
#elif DATA_TRANSFER_MODE == TLC_SPI

/** Initializes the SPI module to double speed (f_osc / 2) */
void tlc_shift8_init(void)
{
    SIN_DDR    |= _BV(SIN_PIN);    // SPI MOSI as output
 cc8:	23 9a       	sbi	0x04, 3	; 4
    SCLK_DDR   |= _BV(SCLK_PIN);   // SPI SCK as output
 cca:	25 9a       	sbi	0x04, 5	; 4
    TLC_SS_DDR |= _BV(TLC_SS_PIN); // SPI SS as output
 ccc:	22 9a       	sbi	0x04, 2	; 4

    SCLK_PORT &= ~_BV(SCLK_PIN);
 cce:	2d 98       	cbi	0x05, 5	; 5

    SPSR = _BV(SPI2X); // double speed (f_osc / 2)
 cd0:	81 e0       	ldi	r24, 0x01	; 1
 cd2:	8d bd       	out	0x2d, r24	; 45
    SPCR = _BV(SPE)    // enable SPI
         | _BV(MSTR);  // master mode
 cd4:	80 e5       	ldi	r24, 0x50	; 80
 cd6:	8c bd       	out	0x2c, r24	; 44
 cd8:	08 95       	ret

00000cda <_Z10tlc_shift8h>:
}

/** Shifts out a byte, MSB first */
void tlc_shift8(uint8_t byte)
{
    SPDR = byte; // starts transmission
 cda:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & _BV(SPIF)))
 cdc:	0d b4       	in	r0, 0x2d	; 45
 cde:	07 fe       	sbrs	r0, 7
 ce0:	fd cf       	rjmp	.-6      	; 0xcdc <_Z10tlc_shift8h+0x2>
        ; // wait for transmission complete
}
 ce2:	08 95       	ret

00000ce4 <_ZN7Tlc59406updateEv>:
    or
    \code while(tlc_needXLAT); \endcode
    \returns 1 if there is data waiting to be latched, 0 if data was
             successfully shifted in */
uint8_t Tlc5940::update(void)
{
 ce4:	1f 93       	push	r17
 ce6:	cf 93       	push	r28
 ce8:	df 93       	push	r29
    if (tlc_needXLAT) {
 cea:	10 91 36 02 	lds	r17, 0x0236
 cee:	11 11       	cpse	r17, r1
 cf0:	29 c0       	rjmp	.+82     	; 0xd44 <_ZN7Tlc59406updateEv+0x60>
        return 1;
    }
    disable_XLAT_pulses();
 cf2:	80 e2       	ldi	r24, 0x20	; 32
 cf4:	80 93 80 00 	sts	0x0080, r24
    if (firstGSInput) {
 cf8:	80 91 1b 02 	lds	r24, 0x021B
 cfc:	88 23       	and	r24, r24
 cfe:	29 f0       	breq	.+10     	; 0xd0a <_ZN7Tlc59406updateEv+0x26>
        // adds an extra SCLK pulse unless we've just set dot-correction data
        firstGSInput = 0;
 d00:	10 92 1b 02 	sts	0x021B, r1
    or
    \code while(tlc_needXLAT); \endcode
    \returns 1 if there is data waiting to be latched, 0 if data was
             successfully shifted in */
uint8_t Tlc5940::update(void)
{
 d04:	cc e1       	ldi	r28, 0x1C	; 28
 d06:	d2 e0       	ldi	r29, 0x02	; 2
 d08:	03 c0       	rjmp	.+6      	; 0xd10 <_ZN7Tlc59406updateEv+0x2c>
    disable_XLAT_pulses();
    if (firstGSInput) {
        // adds an extra SCLK pulse unless we've just set dot-correction data
        firstGSInput = 0;
    } else {
        pulse_pin(SCLK_PORT, SCLK_PIN);
 d0a:	2d 9a       	sbi	0x05, 5	; 5
 d0c:	2d 98       	cbi	0x05, 5	; 5
 d0e:	fa cf       	rjmp	.-12     	; 0xd04 <_ZN7Tlc59406updateEv+0x20>
    }
    uint8_t *p = tlc_GSData;
    while (p < tlc_GSData + NUM_TLCS * 24) {
        tlc_shift8(*p++);
 d10:	88 81       	ld	r24, Y
 d12:	0e 94 6d 06 	call	0xcda	; 0xcda <_Z10tlc_shift8h>
        tlc_shift8(*p++);
 d16:	89 81       	ldd	r24, Y+1	; 0x01
 d18:	0e 94 6d 06 	call	0xcda	; 0xcda <_Z10tlc_shift8h>
 d1c:	23 96       	adiw	r28, 0x03	; 3
 d1e:	fe 01       	movw	r30, r28
 d20:	31 97       	sbiw	r30, 0x01	; 1
        tlc_shift8(*p++);
 d22:	80 81       	ld	r24, Z
 d24:	0e 94 6d 06 	call	0xcda	; 0xcda <_Z10tlc_shift8h>
        firstGSInput = 0;
    } else {
        pulse_pin(SCLK_PORT, SCLK_PIN);
    }
    uint8_t *p = tlc_GSData;
    while (p < tlc_GSData + NUM_TLCS * 24) {
 d28:	82 e0       	ldi	r24, 0x02	; 2
 d2a:	c4 33       	cpi	r28, 0x34	; 52
 d2c:	d8 07       	cpc	r29, r24
 d2e:	80 f3       	brcs	.-32     	; 0xd10 <_ZN7Tlc59406updateEv+0x2c>
        tlc_shift8(*p++);
        tlc_shift8(*p++);
        tlc_shift8(*p++);
    }
    tlc_needXLAT = 1;
 d30:	81 e0       	ldi	r24, 0x01	; 1
 d32:	80 93 36 02 	sts	0x0236, r24
    enable_XLAT_pulses();
 d36:	90 ea       	ldi	r25, 0xA0	; 160
 d38:	90 93 80 00 	sts	0x0080, r25
    set_XLAT_interrupt();
 d3c:	b0 9a       	sbi	0x16, 0	; 22
 d3e:	80 93 6f 00 	sts	0x006F, r24
 d42:	01 c0       	rjmp	.+2      	; 0xd46 <_ZN7Tlc59406updateEv+0x62>
    \returns 1 if there is data waiting to be latched, 0 if data was
             successfully shifted in */
uint8_t Tlc5940::update(void)
{
    if (tlc_needXLAT) {
        return 1;
 d44:	11 e0       	ldi	r17, 0x01	; 1
    }
    tlc_needXLAT = 1;
    enable_XLAT_pulses();
    set_XLAT_interrupt();
    return 0;
}
 d46:	81 2f       	mov	r24, r17
 d48:	df 91       	pop	r29
 d4a:	cf 91       	pop	r28
 d4c:	1f 91       	pop	r17
 d4e:	08 95       	ret

00000d50 <_ZN7Tlc59404initEj>:
/** Pin i/o and Timer setup.  The grayscale register will be reset to all
    zeros, or whatever initialValue is set to and the Timers will start.
    \param initialValue = 0, optional parameter specifing the inital startup
           value */
void Tlc5940::init(uint16_t initialValue)
{
 d50:	0f 93       	push	r16
 d52:	1f 93       	push	r17
 d54:	cf 93       	push	r28
 d56:	df 93       	push	r29
 d58:	00 d0       	rcall	.+0      	; 0xd5a <_ZN7Tlc59404initEj+0xa>
 d5a:	cd b7       	in	r28, 0x3d	; 61
 d5c:	de b7       	in	r29, 0x3e	; 62
 d5e:	8c 01       	movw	r16, r24
    /* Pin Setup */
    XLAT_DDR |= _BV(XLAT_PIN);
 d60:	21 9a       	sbi	0x04, 1	; 4
    BLANK_DDR |= _BV(BLANK_PIN);
 d62:	22 9a       	sbi	0x04, 2	; 4
    GSCLK_DDR |= _BV(GSCLK_PIN);
 d64:	53 9a       	sbi	0x0a, 3	; 10
#endif
#if XERR_ENABLED
    XERR_DDR &= ~_BV(XERR_PIN);   // XERR as input
    XERR_PORT |= _BV(XERR_PIN);   // enable pull-up resistor
#endif
    BLANK_PORT |= _BV(BLANK_PIN); // leave blank high (until the timers start)
 d66:	2a 9a       	sbi	0x05, 2	; 5

    tlc_shift8_init();
 d68:	69 83       	std	Y+1, r22	; 0x01
 d6a:	7a 83       	std	Y+2, r23	; 0x02
 d6c:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_Z15tlc_shift8_initv>

    setAll(initialValue);
 d70:	69 81       	ldd	r22, Y+1	; 0x01
 d72:	7a 81       	ldd	r23, Y+2	; 0x02
 d74:	c8 01       	movw	r24, r16
 d76:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN7Tlc59406setAllEj>
    update();
 d7a:	c8 01       	movw	r24, r16
 d7c:	0e 94 72 06 	call	0xce4	; 0xce4 <_ZN7Tlc59406updateEv>
    disable_XLAT_pulses();
 d80:	e0 e8       	ldi	r30, 0x80	; 128
 d82:	f0 e0       	ldi	r31, 0x00	; 0
 d84:	80 e2       	ldi	r24, 0x20	; 32
 d86:	80 83       	st	Z, r24
    clear_XLAT_interrupt();
 d88:	10 92 6f 00 	sts	0x006F, r1
    tlc_needXLAT = 0;
 d8c:	10 92 36 02 	sts	0x0236, r1
    pulse_pin(XLAT_PORT, XLAT_PIN);
 d90:	29 9a       	sbi	0x05, 1	; 5
 d92:	29 98       	cbi	0x05, 1	; 5


    /* Timer Setup */

    /* Timer 1 - BLANK / XLAT */
    TCCR1A = _BV(COM1B1);  // non inverting, output on OC1B, BLANK
 d94:	80 83       	st	Z, r24
    TCCR1B = _BV(WGM13);   // Phase/freq correct PWM, ICR1 top
 d96:	e1 e8       	ldi	r30, 0x81	; 129
 d98:	f0 e0       	ldi	r31, 0x00	; 0
 d9a:	80 e1       	ldi	r24, 0x10	; 16
 d9c:	80 83       	st	Z, r24
    OCR1A = 1;             // duty factor on OC1A, XLAT is inside BLANK
 d9e:	81 e0       	ldi	r24, 0x01	; 1
 da0:	90 e0       	ldi	r25, 0x00	; 0
 da2:	90 93 89 00 	sts	0x0089, r25
 da6:	80 93 88 00 	sts	0x0088, r24
    OCR1B = 2;             // duty factor on BLANK (larger than OCR1A (XLAT))
 daa:	82 e0       	ldi	r24, 0x02	; 2
 dac:	90 e0       	ldi	r25, 0x00	; 0
 dae:	90 93 8b 00 	sts	0x008B, r25
 db2:	80 93 8a 00 	sts	0x008A, r24
    ICR1 = TLC_PWM_PERIOD; // see tlc_config.h
 db6:	80 e0       	ldi	r24, 0x00	; 0
 db8:	90 e2       	ldi	r25, 0x20	; 32
 dba:	90 93 87 00 	sts	0x0087, r25
 dbe:	80 93 86 00 	sts	0x0086, r24
           | _BV(WGM33);      // Fast pwm with ICR3 top
#else
    TCCR2A = _BV(COM2B1)      // set on BOTTOM, clear on OCR2A (non-inverting),
                              // output on OC2B
           | _BV(WGM21)       // Fast pwm with OCR2A top
           | _BV(WGM20);      // Fast pwm with OCR2A top
 dc2:	83 e2       	ldi	r24, 0x23	; 35
 dc4:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = _BV(WGM22);      // Fast pwm with OCR2A top
 dc8:	a1 eb       	ldi	r26, 0xB1	; 177
 dca:	b0 e0       	ldi	r27, 0x00	; 0
 dcc:	88 e0       	ldi	r24, 0x08	; 8
 dce:	8c 93       	st	X, r24
    OCR2B = 0;                // duty factor (as short a pulse as possible)
 dd0:	10 92 b4 00 	sts	0x00B4, r1
    OCR2A = TLC_GSCLK_PERIOD; // see tlc_config.h
 dd4:	83 e0       	ldi	r24, 0x03	; 3
 dd6:	80 93 b3 00 	sts	0x00B3, r24
    TCCR2B |= _BV(CS20);      // no prescale, (start pwm output)
 dda:	8c 91       	ld	r24, X
 ddc:	81 60       	ori	r24, 0x01	; 1
 dde:	8c 93       	st	X, r24
#endif
    TCCR1B |= _BV(CS10);      // no prescale, (start pwm output)
 de0:	80 81       	ld	r24, Z
 de2:	81 60       	ori	r24, 0x01	; 1
 de4:	80 83       	st	Z, r24
    update();
 de6:	c8 01       	movw	r24, r16
}
 de8:	0f 90       	pop	r0
 dea:	0f 90       	pop	r0
 dec:	df 91       	pop	r29
 dee:	cf 91       	pop	r28
 df0:	1f 91       	pop	r17
 df2:	0f 91       	pop	r16
    OCR2B = 0;                // duty factor (as short a pulse as possible)
    OCR2A = TLC_GSCLK_PERIOD; // see tlc_config.h
    TCCR2B |= _BV(CS20);      // no prescale, (start pwm output)
#endif
    TCCR1B |= _BV(CS10);      // no prescale, (start pwm output)
    update();
 df4:	0c 94 72 06 	jmp	0xce4	; 0xce4 <_ZN7Tlc59406updateEv>

00000df8 <__udivmodsi4>:
 df8:	a1 e2       	ldi	r26, 0x21	; 33
 dfa:	1a 2e       	mov	r1, r26
 dfc:	aa 1b       	sub	r26, r26
 dfe:	bb 1b       	sub	r27, r27
 e00:	fd 01       	movw	r30, r26
 e02:	0d c0       	rjmp	.+26     	; 0xe1e <__udivmodsi4_ep>

00000e04 <__udivmodsi4_loop>:
 e04:	aa 1f       	adc	r26, r26
 e06:	bb 1f       	adc	r27, r27
 e08:	ee 1f       	adc	r30, r30
 e0a:	ff 1f       	adc	r31, r31
 e0c:	a2 17       	cp	r26, r18
 e0e:	b3 07       	cpc	r27, r19
 e10:	e4 07       	cpc	r30, r20
 e12:	f5 07       	cpc	r31, r21
 e14:	20 f0       	brcs	.+8      	; 0xe1e <__udivmodsi4_ep>
 e16:	a2 1b       	sub	r26, r18
 e18:	b3 0b       	sbc	r27, r19
 e1a:	e4 0b       	sbc	r30, r20
 e1c:	f5 0b       	sbc	r31, r21

00000e1e <__udivmodsi4_ep>:
 e1e:	66 1f       	adc	r22, r22
 e20:	77 1f       	adc	r23, r23
 e22:	88 1f       	adc	r24, r24
 e24:	99 1f       	adc	r25, r25
 e26:	1a 94       	dec	r1
 e28:	69 f7       	brne	.-38     	; 0xe04 <__udivmodsi4_loop>
 e2a:	60 95       	com	r22
 e2c:	70 95       	com	r23
 e2e:	80 95       	com	r24
 e30:	90 95       	com	r25
 e32:	9b 01       	movw	r18, r22
 e34:	ac 01       	movw	r20, r24
 e36:	bd 01       	movw	r22, r26
 e38:	cf 01       	movw	r24, r30
 e3a:	08 95       	ret

00000e3c <__tablejump2__>:
 e3c:	ee 0f       	add	r30, r30
 e3e:	ff 1f       	adc	r31, r31
 e40:	05 90       	lpm	r0, Z+
 e42:	f4 91       	lpm	r31, Z
 e44:	e0 2d       	mov	r30, r0
 e46:	09 94       	ijmp

00000e48 <_exit>:
 e48:	f8 94       	cli

00000e4a <__stop_program>:
 e4a:	ff cf       	rjmp	.-2      	; 0xe4a <__stop_program>
