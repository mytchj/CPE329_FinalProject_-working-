
CPE329_FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  000009ba  00000a4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c5  00800122  00800122  00000a70  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000aa0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00000ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006569  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001202  00000000  00000000  000072a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eb9  00000000  00000000  000084a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000758  00000000  00000000  0000935c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001957  00000000  00000000  00009ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002abc  00000000  00000000  0000b40b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  0000dec7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 c9 03 	jmp	0x792	; 0x792 <__vector_13>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 44 03 	jmp	0x688	; 0x688 <__vector_16>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 c0 01 	jmp	0x380	; 0x380 <__vector_18>
  4c:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__vector_19>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	18 02       	muls	r17, r24

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	ea eb       	ldi	r30, 0xBA	; 186
  7e:	f9 e0       	ldi	r31, 0x09	; 9
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a2 32       	cpi	r26, 0x22	; 34
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	a2 e2       	ldi	r26, 0x22	; 34
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a7 3e       	cpi	r26, 0xE7	; 231
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:

int GS = 0;   // LED greyscale 
int chan = 0; // LED channel

int main(void){
  init();         // initializations for Arduino.h
  be:	0e 94 8e 03 	call	0x71c	; 0x71c <init>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
  c2:	26 e0       	ldi	r18, 0x06	; 6
  c4:	40 e8       	ldi	r20, 0x80	; 128
  c6:	55 e2       	ldi	r21, 0x25	; 37
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	84 e2       	ldi	r24, 0x24	; 36
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_ZN14HardwareSerial5beginEmh>
  Serial.begin(9600);   // set baud rate for serial com
  Tlc.init();       // initialize the TLC chip
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	8a ec       	ldi	r24, 0xCA	; 202
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	0e 94 5f 04 	call	0x8be	; 0x8be <_ZN7Tlc59404initEj>
  
  // stuck here forever
  while(1){
    Serial.println(GS);   // print GS data to Serial window (BAUD =9600)
  e0:	60 91 22 01 	lds	r22, 0x0122
  e4:	70 91 23 01 	lds	r23, 0x0123
  e8:	4a e0       	ldi	r20, 0x0A	; 10
  ea:	50 e0       	ldi	r21, 0x00	; 0
  ec:	84 e2       	ldi	r24, 0x24	; 36
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	0e 94 2d 03 	call	0x65a	; 0x65a <_ZN5Print7printlnEii>
    Tlc.clear();      // clear TLC data
  f4:	8a ec       	ldi	r24, 0xCA	; 202
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	0e 94 17 04 	call	0x82e	; 0x82e <_ZN7Tlc59405clearEv>
    Tlc.setAll(GS);     // set all TLC channel (15:0) to GS value
  fc:	60 91 22 01 	lds	r22, 0x0122
 100:	70 91 23 01 	lds	r23, 0x0123
 104:	8a ec       	ldi	r24, 0xCA	; 202
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	0e 94 fe 03 	call	0x7fc	; 0x7fc <_ZN7Tlc59406setAllEj>
    Tlc.update();     // send GS data to TLC5940
 10c:	8a ec       	ldi	r24, 0xCA	; 202
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	0e 94 29 04 	call	0x852	; 0x852 <_ZN7Tlc59406updateEv>
    GS++;         // increment GS
 114:	80 91 22 01 	lds	r24, 0x0122
 118:	90 91 23 01 	lds	r25, 0x0123
 11c:	01 96       	adiw	r24, 0x01	; 1
    
    // if GS is larger than TOP_GS, reset GS value
    if(GS > TOP_GS)
 11e:	83 3e       	cpi	r24, 0xE3	; 227
 120:	24 e0       	ldi	r18, 0x04	; 4
 122:	92 07       	cpc	r25, r18
 124:	2c f4       	brge	.+10     	; 0x130 <main+0x72>
  while(1){
    Serial.println(GS);   // print GS data to Serial window (BAUD =9600)
    Tlc.clear();      // clear TLC data
    Tlc.setAll(GS);     // set all TLC channel (15:0) to GS value
    Tlc.update();     // send GS data to TLC5940
    GS++;         // increment GS
 126:	90 93 23 01 	sts	0x0123, r25
 12a:	80 93 22 01 	sts	0x0122, r24
 12e:	04 c0       	rjmp	.+8      	; 0x138 <main+0x7a>
    
    // if GS is larger than TOP_GS, reset GS value
    if(GS > TOP_GS)
      GS = 0;
 130:	10 92 23 01 	sts	0x0123, r1
 134:	10 92 22 01 	sts	0x0122, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	8f e1       	ldi	r24, 0x1F	; 31
 13a:	9e e4       	ldi	r25, 0x4E	; 78
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <main+0x7e>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x84>
 142:	00 00       	nop
 144:	cd cf       	rjmp	.-102    	; 0xe0 <main+0x22>

00000146 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 146:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 148:	91 8d       	ldd	r25, Z+25	; 0x19
 14a:	22 8d       	ldd	r18, Z+26	; 0x1a
 14c:	89 2f       	mov	r24, r25
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	80 5c       	subi	r24, 0xC0	; 192
 152:	9f 4f       	sbci	r25, 0xFF	; 255
 154:	82 1b       	sub	r24, r18
 156:	91 09       	sbc	r25, r1
}
 158:	8f 73       	andi	r24, 0x3F	; 63
 15a:	99 27       	eor	r25, r25
 15c:	08 95       	ret

0000015e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 15e:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 160:	91 8d       	ldd	r25, Z+25	; 0x19
 162:	82 8d       	ldd	r24, Z+26	; 0x1a
 164:	98 17       	cp	r25, r24
 166:	31 f0       	breq	.+12     	; 0x174 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 168:	82 8d       	ldd	r24, Z+26	; 0x1a
 16a:	e8 0f       	add	r30, r24
 16c:	f1 1d       	adc	r31, r1
 16e:	85 8d       	ldd	r24, Z+29	; 0x1d
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 178:	08 95       	ret

0000017a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 17a:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 17c:	91 8d       	ldd	r25, Z+25	; 0x19
 17e:	82 8d       	ldd	r24, Z+26	; 0x1a
 180:	98 17       	cp	r25, r24
 182:	61 f0       	breq	.+24     	; 0x19c <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 184:	82 8d       	ldd	r24, Z+26	; 0x1a
 186:	df 01       	movw	r26, r30
 188:	a8 0f       	add	r26, r24
 18a:	b1 1d       	adc	r27, r1
 18c:	5d 96       	adiw	r26, 0x1d	; 29
 18e:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 190:	92 8d       	ldd	r25, Z+26	; 0x1a
 192:	9f 5f       	subi	r25, 0xFF	; 255
 194:	9f 73       	andi	r25, 0x3F	; 63
 196:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 1a0:	08 95       	ret

000001a2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 1a2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 1a4:	84 8d       	ldd	r24, Z+28	; 0x1c
 1a6:	df 01       	movw	r26, r30
 1a8:	a8 0f       	add	r26, r24
 1aa:	b1 1d       	adc	r27, r1
 1ac:	a3 5a       	subi	r26, 0xA3	; 163
 1ae:	bf 4f       	sbci	r27, 0xFF	; 255
 1b0:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 1b2:	84 8d       	ldd	r24, Z+28	; 0x1c
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	8f 73       	andi	r24, 0x3F	; 63
 1ba:	99 27       	eor	r25, r25
 1bc:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 1be:	a6 89       	ldd	r26, Z+22	; 0x16
 1c0:	b7 89       	ldd	r27, Z+23	; 0x17
 1c2:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 1c4:	a0 89       	ldd	r26, Z+16	; 0x10
 1c6:	b1 89       	ldd	r27, Z+17	; 0x11
 1c8:	8c 91       	ld	r24, X
 1ca:	80 64       	ori	r24, 0x40	; 64
 1cc:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 1ce:	93 8d       	ldd	r25, Z+27	; 0x1b
 1d0:	84 8d       	ldd	r24, Z+28	; 0x1c
 1d2:	98 13       	cpse	r25, r24
 1d4:	06 c0       	rjmp	.+12     	; 0x1e2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 1d6:	02 88       	ldd	r0, Z+18	; 0x12
 1d8:	f3 89       	ldd	r31, Z+19	; 0x13
 1da:	e0 2d       	mov	r30, r0
 1dc:	80 81       	ld	r24, Z
 1de:	8f 7d       	andi	r24, 0xDF	; 223
 1e0:	80 83       	st	Z, r24
 1e2:	08 95       	ret

000001e4 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 1ea:	88 8d       	ldd	r24, Y+24	; 0x18
 1ec:	88 23       	and	r24, r24
 1ee:	c9 f0       	breq	.+50     	; 0x222 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 1f0:	ea 89       	ldd	r30, Y+18	; 0x12
 1f2:	fb 89       	ldd	r31, Y+19	; 0x13
 1f4:	80 81       	ld	r24, Z
 1f6:	85 fd       	sbrc	r24, 5
 1f8:	05 c0       	rjmp	.+10     	; 0x204 <_ZN14HardwareSerial5flushEv+0x20>
 1fa:	a8 89       	ldd	r26, Y+16	; 0x10
 1fc:	b9 89       	ldd	r27, Y+17	; 0x11
 1fe:	8c 91       	ld	r24, X
 200:	86 fd       	sbrc	r24, 6
 202:	0f c0       	rjmp	.+30     	; 0x222 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	07 fc       	sbrc	r0, 7
 208:	f5 cf       	rjmp	.-22     	; 0x1f4 <_ZN14HardwareSerial5flushEv+0x10>
 20a:	80 81       	ld	r24, Z
 20c:	85 ff       	sbrs	r24, 5
 20e:	f2 cf       	rjmp	.-28     	; 0x1f4 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 210:	a8 89       	ldd	r26, Y+16	; 0x10
 212:	b9 89       	ldd	r27, Y+17	; 0x11
 214:	8c 91       	ld	r24, X
 216:	85 ff       	sbrs	r24, 5
 218:	ed cf       	rjmp	.-38     	; 0x1f4 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 21a:	ce 01       	movw	r24, r28
 21c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 220:	e7 cf       	rjmp	.-50     	; 0x1f0 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	08 95       	ret

00000228 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 228:	ef 92       	push	r14
 22a:	ff 92       	push	r15
 22c:	0f 93       	push	r16
 22e:	1f 93       	push	r17
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	ec 01       	movw	r28, r24
  _written = true;
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 23a:	9b 8d       	ldd	r25, Y+27	; 0x1b
 23c:	8c 8d       	ldd	r24, Y+28	; 0x1c
 23e:	98 13       	cpse	r25, r24
 240:	05 c0       	rjmp	.+10     	; 0x24c <_ZN14HardwareSerial5writeEh+0x24>
 242:	e8 89       	ldd	r30, Y+16	; 0x10
 244:	f9 89       	ldd	r31, Y+17	; 0x11
 246:	80 81       	ld	r24, Z
 248:	85 fd       	sbrc	r24, 5
 24a:	24 c0       	rjmp	.+72     	; 0x294 <_ZN14HardwareSerial5writeEh+0x6c>
 24c:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 24e:	0b 8d       	ldd	r16, Y+27	; 0x1b
 250:	10 e0       	ldi	r17, 0x00	; 0
 252:	0f 5f       	subi	r16, 0xFF	; 255
 254:	1f 4f       	sbci	r17, 0xFF	; 255
 256:	0f 73       	andi	r16, 0x3F	; 63
 258:	11 27       	eor	r17, r17
 25a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 25c:	8c 8d       	ldd	r24, Y+28	; 0x1c
 25e:	e8 12       	cpse	r14, r24
 260:	0c c0       	rjmp	.+24     	; 0x27a <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	07 fc       	sbrc	r0, 7
 266:	fa cf       	rjmp	.-12     	; 0x25c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 268:	e8 89       	ldd	r30, Y+16	; 0x10
 26a:	f9 89       	ldd	r31, Y+17	; 0x11
 26c:	80 81       	ld	r24, Z
 26e:	85 ff       	sbrs	r24, 5
 270:	f5 cf       	rjmp	.-22     	; 0x25c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 272:	ce 01       	movw	r24, r28
 274:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 278:	f1 cf       	rjmp	.-30     	; 0x25c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 27a:	8b 8d       	ldd	r24, Y+27	; 0x1b
 27c:	fe 01       	movw	r30, r28
 27e:	e8 0f       	add	r30, r24
 280:	f1 1d       	adc	r31, r1
 282:	e3 5a       	subi	r30, 0xA3	; 163
 284:	ff 4f       	sbci	r31, 0xFF	; 255
 286:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 288:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 28a:	ea 89       	ldd	r30, Y+18	; 0x12
 28c:	fb 89       	ldd	r31, Y+19	; 0x13
 28e:	80 81       	ld	r24, Z
 290:	80 62       	ori	r24, 0x20	; 32
 292:	07 c0       	rjmp	.+14     	; 0x2a2 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 294:	ee 89       	ldd	r30, Y+22	; 0x16
 296:	ff 89       	ldd	r31, Y+23	; 0x17
 298:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 29a:	e8 89       	ldd	r30, Y+16	; 0x10
 29c:	f9 89       	ldd	r31, Y+17	; 0x11
 29e:	80 81       	ld	r24, Z
 2a0:	80 64       	ori	r24, 0x40	; 64
 2a2:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	1f 91       	pop	r17
 2ae:	0f 91       	pop	r16
 2b0:	ff 90       	pop	r15
 2b2:	ef 90       	pop	r14
 2b4:	08 95       	ret

000002b6 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 2b6:	cf 92       	push	r12
 2b8:	df 92       	push	r13
 2ba:	ef 92       	push	r14
 2bc:	ff 92       	push	r15
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	ec 01       	movw	r28, r24
 2c6:	6a 01       	movw	r12, r20
 2c8:	7b 01       	movw	r14, r22
 2ca:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 2cc:	e8 89       	ldd	r30, Y+16	; 0x10
 2ce:	f9 89       	ldd	r31, Y+17	; 0x11
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 2d4:	41 15       	cp	r20, r1
 2d6:	51 4e       	sbci	r21, 0xE1	; 225
 2d8:	61 05       	cpc	r22, r1
 2da:	71 05       	cpc	r23, r1
 2dc:	b1 f0       	breq	.+44     	; 0x30a <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	79 e0       	ldi	r23, 0x09	; 9
 2e2:	8d e3       	ldi	r24, 0x3D	; 61
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	a7 01       	movw	r20, r14
 2e8:	96 01       	movw	r18, r12
 2ea:	0e 94 b3 04 	call	0x966	; 0x966 <__udivmodsi4>
 2ee:	da 01       	movw	r26, r20
 2f0:	c9 01       	movw	r24, r18
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	a1 09       	sbc	r26, r1
 2f6:	b1 09       	sbc	r27, r1
 2f8:	b6 95       	lsr	r27
 2fa:	a7 95       	ror	r26
 2fc:	97 95       	ror	r25
 2fe:	87 95       	ror	r24
 300:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 302:	41 15       	cp	r20, r1
 304:	80 e1       	ldi	r24, 0x10	; 16
 306:	58 07       	cpc	r21, r24
 308:	a8 f0       	brcs	.+42     	; 0x334 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 30a:	e8 89       	ldd	r30, Y+16	; 0x10
 30c:	f9 89       	ldd	r31, Y+17	; 0x11
 30e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 310:	60 e8       	ldi	r22, 0x80	; 128
 312:	74 e8       	ldi	r23, 0x84	; 132
 314:	8e e1       	ldi	r24, 0x1E	; 30
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	a7 01       	movw	r20, r14
 31a:	96 01       	movw	r18, r12
 31c:	0e 94 b3 04 	call	0x966	; 0x966 <__udivmodsi4>
 320:	ba 01       	movw	r22, r20
 322:	a9 01       	movw	r20, r18
 324:	41 50       	subi	r20, 0x01	; 1
 326:	51 09       	sbc	r21, r1
 328:	61 09       	sbc	r22, r1
 32a:	71 09       	sbc	r23, r1
 32c:	76 95       	lsr	r23
 32e:	67 95       	ror	r22
 330:	57 95       	ror	r21
 332:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 334:	ec 85       	ldd	r30, Y+12	; 0x0c
 336:	fd 85       	ldd	r31, Y+13	; 0x0d
 338:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
 33a:	ee 85       	ldd	r30, Y+14	; 0x0e
 33c:	ff 85       	ldd	r31, Y+15	; 0x0f
 33e:	40 83       	st	Z, r20

  _written = false;
 340:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 342:	ec 89       	ldd	r30, Y+20	; 0x14
 344:	fd 89       	ldd	r31, Y+21	; 0x15
 346:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 348:	ea 89       	ldd	r30, Y+18	; 0x12
 34a:	fb 89       	ldd	r31, Y+19	; 0x13
 34c:	80 81       	ld	r24, Z
 34e:	80 61       	ori	r24, 0x10	; 16
 350:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 352:	ea 89       	ldd	r30, Y+18	; 0x12
 354:	fb 89       	ldd	r31, Y+19	; 0x13
 356:	80 81       	ld	r24, Z
 358:	88 60       	ori	r24, 0x08	; 8
 35a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 35c:	ea 89       	ldd	r30, Y+18	; 0x12
 35e:	fb 89       	ldd	r31, Y+19	; 0x13
 360:	80 81       	ld	r24, Z
 362:	80 68       	ori	r24, 0x80	; 128
 364:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 366:	ea 89       	ldd	r30, Y+18	; 0x12
 368:	fb 89       	ldd	r31, Y+19	; 0x13
 36a:	80 81       	ld	r24, Z
 36c:	8f 7d       	andi	r24, 0xDF	; 223
 36e:	80 83       	st	Z, r24
}
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	1f 91       	pop	r17
 376:	ff 90       	pop	r15
 378:	ef 90       	pop	r14
 37a:	df 90       	pop	r13
 37c:	cf 90       	pop	r12
 37e:	08 95       	ret

00000380 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 380:	1f 92       	push	r1
 382:	0f 92       	push	r0
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	0f 92       	push	r0
 388:	11 24       	eor	r1, r1
 38a:	2f 93       	push	r18
 38c:	8f 93       	push	r24
 38e:	9f 93       	push	r25
 390:	ef 93       	push	r30
 392:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 394:	e0 91 34 01 	lds	r30, 0x0134
 398:	f0 91 35 01 	lds	r31, 0x0135
 39c:	80 81       	ld	r24, Z
 39e:	e0 91 3a 01 	lds	r30, 0x013A
 3a2:	f0 91 3b 01 	lds	r31, 0x013B
 3a6:	82 fd       	sbrc	r24, 2
 3a8:	12 c0       	rjmp	.+36     	; 0x3ce <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 3aa:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 3ac:	80 91 3d 01 	lds	r24, 0x013D
 3b0:	8f 5f       	subi	r24, 0xFF	; 255
 3b2:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 3b4:	20 91 3e 01 	lds	r18, 0x013E
 3b8:	82 17       	cp	r24, r18
 3ba:	51 f0       	breq	.+20     	; 0x3d0 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 3bc:	e0 91 3d 01 	lds	r30, 0x013D
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	ec 5d       	subi	r30, 0xDC	; 220
 3c4:	fe 4f       	sbci	r31, 0xFE	; 254
 3c6:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 3c8:	80 93 3d 01 	sts	0x013D, r24
 3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 3ce:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 3d0:	ff 91       	pop	r31
 3d2:	ef 91       	pop	r30
 3d4:	9f 91       	pop	r25
 3d6:	8f 91       	pop	r24
 3d8:	2f 91       	pop	r18
 3da:	0f 90       	pop	r0
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	0f 90       	pop	r0
 3e0:	1f 90       	pop	r1
 3e2:	18 95       	reti

000003e4 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 3e4:	1f 92       	push	r1
 3e6:	0f 92       	push	r0
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	0f 92       	push	r0
 3ec:	11 24       	eor	r1, r1
 3ee:	2f 93       	push	r18
 3f0:	3f 93       	push	r19
 3f2:	4f 93       	push	r20
 3f4:	5f 93       	push	r21
 3f6:	6f 93       	push	r22
 3f8:	7f 93       	push	r23
 3fa:	8f 93       	push	r24
 3fc:	9f 93       	push	r25
 3fe:	af 93       	push	r26
 400:	bf 93       	push	r27
 402:	ef 93       	push	r30
 404:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 406:	84 e2       	ldi	r24, 0x24	; 36
 408:	91 e0       	ldi	r25, 0x01	; 1
 40a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 40e:	ff 91       	pop	r31
 410:	ef 91       	pop	r30
 412:	bf 91       	pop	r27
 414:	af 91       	pop	r26
 416:	9f 91       	pop	r25
 418:	8f 91       	pop	r24
 41a:	7f 91       	pop	r23
 41c:	6f 91       	pop	r22
 41e:	5f 91       	pop	r21
 420:	4f 91       	pop	r20
 422:	3f 91       	pop	r19
 424:	2f 91       	pop	r18
 426:	0f 90       	pop	r0
 428:	0f be       	out	0x3f, r0	; 63
 42a:	0f 90       	pop	r0
 42c:	1f 90       	pop	r1
 42e:	18 95       	reti

00000430 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 430:	e4 e2       	ldi	r30, 0x24	; 36
 432:	f1 e0       	ldi	r31, 0x01	; 1
 434:	13 82       	std	Z+3, r1	; 0x03
 436:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 438:	88 ee       	ldi	r24, 0xE8	; 232
 43a:	93 e0       	ldi	r25, 0x03	; 3
 43c:	a0 e0       	ldi	r26, 0x00	; 0
 43e:	b0 e0       	ldi	r27, 0x00	; 0
 440:	84 83       	std	Z+4, r24	; 0x04
 442:	95 83       	std	Z+5, r25	; 0x05
 444:	a6 83       	std	Z+6, r26	; 0x06
 446:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 448:	84 e0       	ldi	r24, 0x04	; 4
 44a:	91 e0       	ldi	r25, 0x01	; 1
 44c:	91 83       	std	Z+1, r25	; 0x01
 44e:	80 83       	st	Z, r24
 450:	85 ec       	ldi	r24, 0xC5	; 197
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	95 87       	std	Z+13, r25	; 0x0d
 456:	84 87       	std	Z+12, r24	; 0x0c
 458:	84 ec       	ldi	r24, 0xC4	; 196
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	97 87       	std	Z+15, r25	; 0x0f
 45e:	86 87       	std	Z+14, r24	; 0x0e
 460:	80 ec       	ldi	r24, 0xC0	; 192
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	91 8b       	std	Z+17, r25	; 0x11
 466:	80 8b       	std	Z+16, r24	; 0x10
 468:	81 ec       	ldi	r24, 0xC1	; 193
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	93 8b       	std	Z+19, r25	; 0x13
 46e:	82 8b       	std	Z+18, r24	; 0x12
 470:	82 ec       	ldi	r24, 0xC2	; 194
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	95 8b       	std	Z+21, r25	; 0x15
 476:	84 8b       	std	Z+20, r24	; 0x14
 478:	86 ec       	ldi	r24, 0xC6	; 198
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	97 8b       	std	Z+23, r25	; 0x17
 47e:	86 8b       	std	Z+22, r24	; 0x16
 480:	11 8e       	std	Z+25, r1	; 0x19
 482:	12 8e       	std	Z+26, r1	; 0x1a
 484:	13 8e       	std	Z+27, r1	; 0x1b
 486:	14 8e       	std	Z+28, r1	; 0x1c
 488:	08 95       	ret

0000048a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 48a:	cf 92       	push	r12
 48c:	df 92       	push	r13
 48e:	ef 92       	push	r14
 490:	ff 92       	push	r15
 492:	0f 93       	push	r16
 494:	1f 93       	push	r17
 496:	cf 93       	push	r28
 498:	df 93       	push	r29
 49a:	6c 01       	movw	r12, r24
 49c:	eb 01       	movw	r28, r22
 49e:	7b 01       	movw	r14, r22
 4a0:	e4 0e       	add	r14, r20
 4a2:	f5 1e       	adc	r15, r21
  size_t n = 0;
 4a4:	00 e0       	ldi	r16, 0x00	; 0
 4a6:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
 4a8:	ce 15       	cp	r28, r14
 4aa:	df 05       	cpc	r29, r15
 4ac:	61 f0       	breq	.+24     	; 0x4c6 <_ZN5Print5writeEPKhj+0x3c>
    n += write(*buffer++);
 4ae:	69 91       	ld	r22, Y+
 4b0:	d6 01       	movw	r26, r12
 4b2:	ed 91       	ld	r30, X+
 4b4:	fc 91       	ld	r31, X
 4b6:	01 90       	ld	r0, Z+
 4b8:	f0 81       	ld	r31, Z
 4ba:	e0 2d       	mov	r30, r0
 4bc:	c6 01       	movw	r24, r12
 4be:	09 95       	icall
 4c0:	08 0f       	add	r16, r24
 4c2:	19 1f       	adc	r17, r25
 4c4:	f1 cf       	rjmp	.-30     	; 0x4a8 <_ZN5Print5writeEPKhj+0x1e>
  }
  return n;
}
 4c6:	c8 01       	movw	r24, r16
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	1f 91       	pop	r17
 4ce:	0f 91       	pop	r16
 4d0:	ff 90       	pop	r15
 4d2:	ef 90       	pop	r14
 4d4:	df 90       	pop	r13
 4d6:	cf 90       	pop	r12
 4d8:	08 95       	ret

000004da <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 4da:	61 15       	cp	r22, r1
 4dc:	71 05       	cpc	r23, r1
 4de:	79 f0       	breq	.+30     	; 0x4fe <_ZN5Print5writeEPKc+0x24>
      return write((const uint8_t *)str, strlen(str));
 4e0:	fb 01       	movw	r30, r22
 4e2:	01 90       	ld	r0, Z+
 4e4:	00 20       	and	r0, r0
 4e6:	e9 f7       	brne	.-6      	; 0x4e2 <_ZN5Print5writeEPKc+0x8>
 4e8:	31 97       	sbiw	r30, 0x01	; 1
 4ea:	af 01       	movw	r20, r30
 4ec:	46 1b       	sub	r20, r22
 4ee:	57 0b       	sbc	r21, r23
 4f0:	dc 01       	movw	r26, r24
 4f2:	ed 91       	ld	r30, X+
 4f4:	fc 91       	ld	r31, X
 4f6:	02 80       	ldd	r0, Z+2	; 0x02
 4f8:	f3 81       	ldd	r31, Z+3	; 0x03
 4fa:	e0 2d       	mov	r30, r0
 4fc:	09 94       	ijmp
    }
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	08 95       	ret

00000504 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 504:	dc 01       	movw	r26, r24
 506:	ed 91       	ld	r30, X+
 508:	fc 91       	ld	r31, X
 50a:	01 90       	ld	r0, Z+
 50c:	f0 81       	ld	r31, Z
 50e:	e0 2d       	mov	r30, r0
 510:	09 94       	ijmp

00000512 <_ZN5Print7printlnEv>:
  return x.printTo(*this);
}

size_t Print::println(void)
{
  return write("\r\n");
 512:	60 e1       	ldi	r22, 0x10	; 16
 514:	71 e0       	ldi	r23, 0x01	; 1
 516:	0c 94 6d 02 	jmp	0x4da	; 0x4da <_ZN5Print5writeEPKc>

0000051a <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 51a:	8f 92       	push	r8
 51c:	9f 92       	push	r9
 51e:	af 92       	push	r10
 520:	bf 92       	push	r11
 522:	cf 92       	push	r12
 524:	df 92       	push	r13
 526:	ef 92       	push	r14
 528:	ff 92       	push	r15
 52a:	0f 93       	push	r16
 52c:	1f 93       	push	r17
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
 532:	cd b7       	in	r28, 0x3d	; 61
 534:	de b7       	in	r29, 0x3e	; 62
 536:	a1 97       	sbiw	r28, 0x21	; 33
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	f8 94       	cli
 53c:	de bf       	out	0x3e, r29	; 62
 53e:	0f be       	out	0x3f, r0	; 63
 540:	cd bf       	out	0x3d, r28	; 61
 542:	6c 01       	movw	r12, r24
 544:	14 2f       	mov	r17, r20
 546:	e5 2f       	mov	r30, r21
 548:	cb 01       	movw	r24, r22
 54a:	02 2f       	mov	r16, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 54c:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 54e:	22 30       	cpi	r18, 0x02	; 2
 550:	08 f4       	brcc	.+2      	; 0x554 <_ZN5Print11printNumberEmh+0x3a>
 552:	0a e0       	ldi	r16, 0x0A	; 10
 554:	7e 01       	movw	r14, r28
 556:	21 e2       	ldi	r18, 0x21	; 33
 558:	e2 0e       	add	r14, r18
 55a:	f1 1c       	adc	r15, r1

  do {
    unsigned long m = n;
    n /= base;
 55c:	80 2e       	mov	r8, r16
 55e:	91 2c       	mov	r9, r1
 560:	a1 2c       	mov	r10, r1
 562:	b1 2c       	mov	r11, r1
 564:	61 2f       	mov	r22, r17
 566:	7e 2f       	mov	r23, r30
 568:	a5 01       	movw	r20, r10
 56a:	94 01       	movw	r18, r8
 56c:	0e 94 b3 04 	call	0x966	; 0x966 <__udivmodsi4>
    char c = m - base * n;
 570:	02 9f       	mul	r16, r18
 572:	10 19       	sub	r17, r0
 574:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	e8 1a       	sub	r14, r24
 57a:	f1 08       	sbc	r15, r1
 57c:	1a 30       	cpi	r17, 0x0A	; 10
 57e:	10 f4       	brcc	.+4      	; 0x584 <_ZN5Print11printNumberEmh+0x6a>
 580:	10 5d       	subi	r17, 0xD0	; 208
 582:	01 c0       	rjmp	.+2      	; 0x586 <_ZN5Print11printNumberEmh+0x6c>
 584:	19 5c       	subi	r17, 0xC9	; 201
 586:	f7 01       	movw	r30, r14
 588:	10 83       	st	Z, r17
 58a:	12 2f       	mov	r17, r18
 58c:	e3 2f       	mov	r30, r19
 58e:	ca 01       	movw	r24, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 590:	23 2b       	or	r18, r19
 592:	24 2b       	or	r18, r20
 594:	25 2b       	or	r18, r21
 596:	31 f7       	brne	.-52     	; 0x564 <_ZN5Print11printNumberEmh+0x4a>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 598:	b7 01       	movw	r22, r14
 59a:	c6 01       	movw	r24, r12
 59c:	0e 94 6d 02 	call	0x4da	; 0x4da <_ZN5Print5writeEPKc>
}
 5a0:	a1 96       	adiw	r28, 0x21	; 33
 5a2:	0f b6       	in	r0, 0x3f	; 63
 5a4:	f8 94       	cli
 5a6:	de bf       	out	0x3e, r29	; 62
 5a8:	0f be       	out	0x3f, r0	; 63
 5aa:	cd bf       	out	0x3d, r28	; 61
 5ac:	df 91       	pop	r29
 5ae:	cf 91       	pop	r28
 5b0:	1f 91       	pop	r17
 5b2:	0f 91       	pop	r16
 5b4:	ff 90       	pop	r15
 5b6:	ef 90       	pop	r14
 5b8:	df 90       	pop	r13
 5ba:	cf 90       	pop	r12
 5bc:	bf 90       	pop	r11
 5be:	af 90       	pop	r10
 5c0:	9f 90       	pop	r9
 5c2:	8f 90       	pop	r8
 5c4:	08 95       	ret

000005c6 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 5c6:	cf 92       	push	r12
 5c8:	df 92       	push	r13
 5ca:	ef 92       	push	r14
 5cc:	ff 92       	push	r15
 5ce:	0f 93       	push	r16
 5d0:	1f 93       	push	r17
 5d2:	cf 93       	push	r28
 5d4:	df 93       	push	r29
 5d6:	ec 01       	movw	r28, r24
 5d8:	6a 01       	movw	r12, r20
 5da:	7b 01       	movw	r14, r22
  if (base == 0) {
 5dc:	21 15       	cp	r18, r1
 5de:	31 05       	cpc	r19, r1
 5e0:	79 f4       	brne	.+30     	; 0x600 <_ZN5Print5printEli+0x3a>
    return write(n);
 5e2:	e8 81       	ld	r30, Y
 5e4:	f9 81       	ldd	r31, Y+1	; 0x01
 5e6:	01 90       	ld	r0, Z+
 5e8:	f0 81       	ld	r31, Z
 5ea:	e0 2d       	mov	r30, r0
 5ec:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 5ee:	df 91       	pop	r29
 5f0:	cf 91       	pop	r28
 5f2:	1f 91       	pop	r17
 5f4:	0f 91       	pop	r16
 5f6:	ff 90       	pop	r15
 5f8:	ef 90       	pop	r14
 5fa:	df 90       	pop	r13
 5fc:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 5fe:	09 94       	ijmp
  } else if (base == 10) {
 600:	2a 30       	cpi	r18, 0x0A	; 10
 602:	31 05       	cpc	r19, r1
 604:	e9 f4       	brne	.+58     	; 0x640 <_ZN5Print5printEli+0x7a>
    if (n < 0) {
 606:	77 ff       	sbrs	r23, 7
 608:	1a c0       	rjmp	.+52     	; 0x63e <_ZN5Print5printEli+0x78>
      int t = print('-');
 60a:	6d e2       	ldi	r22, 0x2D	; 45
 60c:	0e 94 82 02 	call	0x504	; 0x504 <_ZN5Print5printEc>
 610:	8c 01       	movw	r16, r24
      n = -n;
 612:	44 27       	eor	r20, r20
 614:	55 27       	eor	r21, r21
 616:	ba 01       	movw	r22, r20
 618:	4c 19       	sub	r20, r12
 61a:	5d 09       	sbc	r21, r13
 61c:	6e 09       	sbc	r22, r14
 61e:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
 620:	2a e0       	ldi	r18, 0x0A	; 10
 622:	ce 01       	movw	r24, r28
 624:	0e 94 8d 02 	call	0x51a	; 0x51a <_ZN5Print11printNumberEmh>
 628:	80 0f       	add	r24, r16
 62a:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 62c:	df 91       	pop	r29
 62e:	cf 91       	pop	r28
 630:	1f 91       	pop	r17
 632:	0f 91       	pop	r16
 634:	ff 90       	pop	r15
 636:	ef 90       	pop	r14
 638:	df 90       	pop	r13
 63a:	cf 90       	pop	r12
 63c:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
 63e:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
 640:	b7 01       	movw	r22, r14
 642:	a6 01       	movw	r20, r12
 644:	ce 01       	movw	r24, r28
  }
}
 646:	df 91       	pop	r29
 648:	cf 91       	pop	r28
 64a:	1f 91       	pop	r17
 64c:	0f 91       	pop	r16
 64e:	ff 90       	pop	r15
 650:	ef 90       	pop	r14
 652:	df 90       	pop	r13
 654:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 656:	0c 94 8d 02 	jmp	0x51a	; 0x51a <_ZN5Print11printNumberEmh>

0000065a <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 65a:	0f 93       	push	r16
 65c:	1f 93       	push	r17
 65e:	cf 93       	push	r28
 660:	df 93       	push	r29
 662:	ec 01       	movw	r28, r24
 664:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 666:	ab 01       	movw	r20, r22
 668:	77 0f       	add	r23, r23
 66a:	66 0b       	sbc	r22, r22
 66c:	77 0b       	sbc	r23, r23
 66e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN5Print5printEli>
 672:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 674:	ce 01       	movw	r24, r28
 676:	0e 94 89 02 	call	0x512	; 0x512 <_ZN5Print7printlnEv>
  return n;
}
 67a:	80 0f       	add	r24, r16
 67c:	91 1f       	adc	r25, r17
 67e:	df 91       	pop	r29
 680:	cf 91       	pop	r28
 682:	1f 91       	pop	r17
 684:	0f 91       	pop	r16
 686:	08 95       	ret

00000688 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 688:	1f 92       	push	r1
 68a:	0f 92       	push	r0
 68c:	0f b6       	in	r0, 0x3f	; 63
 68e:	0f 92       	push	r0
 690:	11 24       	eor	r1, r1
 692:	2f 93       	push	r18
 694:	3f 93       	push	r19
 696:	8f 93       	push	r24
 698:	9f 93       	push	r25
 69a:	af 93       	push	r26
 69c:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 69e:	80 91 c2 01 	lds	r24, 0x01C2
 6a2:	90 91 c3 01 	lds	r25, 0x01C3
 6a6:	a0 91 c4 01 	lds	r26, 0x01C4
 6aa:	b0 91 c5 01 	lds	r27, 0x01C5
	unsigned char f = timer0_fract;
 6ae:	30 91 c1 01 	lds	r19, 0x01C1

	m += MILLIS_INC;
	f += FRACT_INC;
 6b2:	23 e0       	ldi	r18, 0x03	; 3
 6b4:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 6b6:	2d 37       	cpi	r18, 0x7D	; 125
 6b8:	20 f4       	brcc	.+8      	; 0x6c2 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 6ba:	01 96       	adiw	r24, 0x01	; 1
 6bc:	a1 1d       	adc	r26, r1
 6be:	b1 1d       	adc	r27, r1
 6c0:	05 c0       	rjmp	.+10     	; 0x6cc <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 6c2:	26 e8       	ldi	r18, 0x86	; 134
 6c4:	23 0f       	add	r18, r19
		m += 1;
 6c6:	02 96       	adiw	r24, 0x02	; 2
 6c8:	a1 1d       	adc	r26, r1
 6ca:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 6cc:	20 93 c1 01 	sts	0x01C1, r18
	timer0_millis = m;
 6d0:	80 93 c2 01 	sts	0x01C2, r24
 6d4:	90 93 c3 01 	sts	0x01C3, r25
 6d8:	a0 93 c4 01 	sts	0x01C4, r26
 6dc:	b0 93 c5 01 	sts	0x01C5, r27
	timer0_overflow_count++;
 6e0:	80 91 c6 01 	lds	r24, 0x01C6
 6e4:	90 91 c7 01 	lds	r25, 0x01C7
 6e8:	a0 91 c8 01 	lds	r26, 0x01C8
 6ec:	b0 91 c9 01 	lds	r27, 0x01C9
 6f0:	01 96       	adiw	r24, 0x01	; 1
 6f2:	a1 1d       	adc	r26, r1
 6f4:	b1 1d       	adc	r27, r1
 6f6:	80 93 c6 01 	sts	0x01C6, r24
 6fa:	90 93 c7 01 	sts	0x01C7, r25
 6fe:	a0 93 c8 01 	sts	0x01C8, r26
 702:	b0 93 c9 01 	sts	0x01C9, r27
}
 706:	bf 91       	pop	r27
 708:	af 91       	pop	r26
 70a:	9f 91       	pop	r25
 70c:	8f 91       	pop	r24
 70e:	3f 91       	pop	r19
 710:	2f 91       	pop	r18
 712:	0f 90       	pop	r0
 714:	0f be       	out	0x3f, r0	; 63
 716:	0f 90       	pop	r0
 718:	1f 90       	pop	r1
 71a:	18 95       	reti

0000071c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 71c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 71e:	84 b5       	in	r24, 0x24	; 36
 720:	82 60       	ori	r24, 0x02	; 2
 722:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 724:	84 b5       	in	r24, 0x24	; 36
 726:	81 60       	ori	r24, 0x01	; 1
 728:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 72a:	85 b5       	in	r24, 0x25	; 37
 72c:	82 60       	ori	r24, 0x02	; 2
 72e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 730:	85 b5       	in	r24, 0x25	; 37
 732:	81 60       	ori	r24, 0x01	; 1
 734:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 736:	ee e6       	ldi	r30, 0x6E	; 110
 738:	f0 e0       	ldi	r31, 0x00	; 0
 73a:	80 81       	ld	r24, Z
 73c:	81 60       	ori	r24, 0x01	; 1
 73e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 740:	e1 e8       	ldi	r30, 0x81	; 129
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 746:	80 81       	ld	r24, Z
 748:	82 60       	ori	r24, 0x02	; 2
 74a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 74c:	80 81       	ld	r24, Z
 74e:	81 60       	ori	r24, 0x01	; 1
 750:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 752:	e0 e8       	ldi	r30, 0x80	; 128
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	80 81       	ld	r24, Z
 758:	81 60       	ori	r24, 0x01	; 1
 75a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 75c:	e1 eb       	ldi	r30, 0xB1	; 177
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	80 81       	ld	r24, Z
 762:	84 60       	ori	r24, 0x04	; 4
 764:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 766:	e0 eb       	ldi	r30, 0xB0	; 176
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	80 81       	ld	r24, Z
 76c:	81 60       	ori	r24, 0x01	; 1
 76e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 770:	ea e7       	ldi	r30, 0x7A	; 122
 772:	f0 e0       	ldi	r31, 0x00	; 0
 774:	80 81       	ld	r24, Z
 776:	84 60       	ori	r24, 0x04	; 4
 778:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 77a:	80 81       	ld	r24, Z
 77c:	82 60       	ori	r24, 0x02	; 2
 77e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 780:	80 81       	ld	r24, Z
 782:	81 60       	ori	r24, 0x01	; 1
 784:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 786:	80 81       	ld	r24, Z
 788:	80 68       	ori	r24, 0x80	; 128
 78a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 78c:	10 92 c1 00 	sts	0x00C1, r1
 790:	08 95       	ret

00000792 <__vector_13>:
/** Don't add an extra SCLK pulse after switching from dot-correction mode. */
static uint8_t firstGSInput;

/** Interrupt called after an XLAT pulse to prevent more XLAT pulses. */
ISR(TIMER1_OVF_vect)
{
 792:	1f 92       	push	r1
 794:	0f 92       	push	r0
 796:	0f b6       	in	r0, 0x3f	; 63
 798:	0f 92       	push	r0
 79a:	11 24       	eor	r1, r1
 79c:	2f 93       	push	r18
 79e:	3f 93       	push	r19
 7a0:	4f 93       	push	r20
 7a2:	5f 93       	push	r21
 7a4:	6f 93       	push	r22
 7a6:	7f 93       	push	r23
 7a8:	8f 93       	push	r24
 7aa:	9f 93       	push	r25
 7ac:	af 93       	push	r26
 7ae:	bf 93       	push	r27
 7b0:	ef 93       	push	r30
 7b2:	ff 93       	push	r31
    disable_XLAT_pulses();
 7b4:	80 e2       	ldi	r24, 0x20	; 32
 7b6:	80 93 80 00 	sts	0x0080, r24
    clear_XLAT_interrupt();
 7ba:	10 92 6f 00 	sts	0x006F, r1
    tlc_needXLAT = 0;
 7be:	10 92 e6 01 	sts	0x01E6, r1
    if (tlc_onUpdateFinished) {
 7c2:	80 91 e4 01 	lds	r24, 0x01E4
 7c6:	90 91 e5 01 	lds	r25, 0x01E5
 7ca:	89 2b       	or	r24, r25
 7cc:	31 f0       	breq	.+12     	; 0x7da <__vector_13+0x48>
        sei();
 7ce:	78 94       	sei
        tlc_onUpdateFinished();
 7d0:	e0 91 e4 01 	lds	r30, 0x01E4
 7d4:	f0 91 e5 01 	lds	r31, 0x01E5
 7d8:	09 95       	icall
    }
}
 7da:	ff 91       	pop	r31
 7dc:	ef 91       	pop	r30
 7de:	bf 91       	pop	r27
 7e0:	af 91       	pop	r26
 7e2:	9f 91       	pop	r25
 7e4:	8f 91       	pop	r24
 7e6:	7f 91       	pop	r23
 7e8:	6f 91       	pop	r22
 7ea:	5f 91       	pop	r21
 7ec:	4f 91       	pop	r20
 7ee:	3f 91       	pop	r19
 7f0:	2f 91       	pop	r18
 7f2:	0f 90       	pop	r0
 7f4:	0f be       	out	0x3f, r0	; 63
 7f6:	0f 90       	pop	r0
 7f8:	1f 90       	pop	r1
 7fa:	18 95       	reti

000007fc <_ZN7Tlc59406setAllEj>:

/** Sets all channels to value.
    \param value grayscale value (0 - 4095) */
void Tlc5940::setAll(uint16_t value)
{
    uint8_t firstByte = value >> 4;
 7fc:	cb 01       	movw	r24, r22
 7fe:	24 e0       	ldi	r18, 0x04	; 4
 800:	96 95       	lsr	r25
 802:	87 95       	ror	r24
 804:	2a 95       	dec	r18
 806:	e1 f7       	brne	.-8      	; 0x800 <_ZN7Tlc59406setAllEj+0x4>
 808:	98 2f       	mov	r25, r24
    uint8_t secondByte = (value << 4) | (value >> 8);
 80a:	26 2f       	mov	r18, r22
 80c:	86 2f       	mov	r24, r22
 80e:	82 95       	swap	r24
 810:	80 7f       	andi	r24, 0xF0	; 240
 812:	87 2b       	or	r24, r23
    uint8_t *p = tlc_GSData;
 814:	ec ec       	ldi	r30, 0xCC	; 204
 816:	f1 e0       	ldi	r31, 0x01	; 1
    while (p < tlc_GSData + NUM_TLCS * 24) {
        *p++ = firstByte;
 818:	90 83       	st	Z, r25
        *p++ = secondByte;
 81a:	81 83       	std	Z+1, r24	; 0x01
 81c:	33 96       	adiw	r30, 0x03	; 3
 81e:	df 01       	movw	r26, r30
 820:	11 97       	sbiw	r26, 0x01	; 1
        *p++ = (uint8_t)value;
 822:	2c 93       	st	X, r18
void Tlc5940::setAll(uint16_t value)
{
    uint8_t firstByte = value >> 4;
    uint8_t secondByte = (value << 4) | (value >> 8);
    uint8_t *p = tlc_GSData;
    while (p < tlc_GSData + NUM_TLCS * 24) {
 824:	31 e0       	ldi	r19, 0x01	; 1
 826:	e4 3e       	cpi	r30, 0xE4	; 228
 828:	f3 07       	cpc	r31, r19
 82a:	b0 f3       	brcs	.-20     	; 0x818 <_ZN7Tlc59406setAllEj+0x1c>
        *p++ = firstByte;
        *p++ = secondByte;
        *p++ = (uint8_t)value;
    }
}
 82c:	08 95       	ret

0000082e <_ZN7Tlc59405clearEv>:
/** Clears the grayscale data array, #tlc_GSData, but does not shift in any
    data.  This call should be followed by update() if you are turning off
    all the outputs. */
void Tlc5940::clear(void)
{
    setAll(0);
 82e:	60 e0       	ldi	r22, 0x00	; 0
 830:	70 e0       	ldi	r23, 0x00	; 0
 832:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <_ZN7Tlc59406setAllEj>

00000836 <_Z15tlc_shift8_initv>:
#elif DATA_TRANSFER_MODE == TLC_SPI

/** Initializes the SPI module to double speed (f_osc / 2) */
void tlc_shift8_init(void)
{
    SIN_DDR    |= _BV(SIN_PIN);    // SPI MOSI as output
 836:	23 9a       	sbi	0x04, 3	; 4
    SCLK_DDR   |= _BV(SCLK_PIN);   // SPI SCK as output
 838:	25 9a       	sbi	0x04, 5	; 4
    TLC_SS_DDR |= _BV(TLC_SS_PIN); // SPI SS as output
 83a:	22 9a       	sbi	0x04, 2	; 4

    SCLK_PORT &= ~_BV(SCLK_PIN);
 83c:	2d 98       	cbi	0x05, 5	; 5

    SPSR = _BV(SPI2X); // double speed (f_osc / 2)
 83e:	81 e0       	ldi	r24, 0x01	; 1
 840:	8d bd       	out	0x2d, r24	; 45
    SPCR = _BV(SPE)    // enable SPI
         | _BV(MSTR);  // master mode
 842:	80 e5       	ldi	r24, 0x50	; 80
 844:	8c bd       	out	0x2c, r24	; 44
 846:	08 95       	ret

00000848 <_Z10tlc_shift8h>:
}

/** Shifts out a byte, MSB first */
void tlc_shift8(uint8_t byte)
{
    SPDR = byte; // starts transmission
 848:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & _BV(SPIF)))
 84a:	0d b4       	in	r0, 0x2d	; 45
 84c:	07 fe       	sbrs	r0, 7
 84e:	fd cf       	rjmp	.-6      	; 0x84a <_Z10tlc_shift8h+0x2>
        ; // wait for transmission complete
}
 850:	08 95       	ret

00000852 <_ZN7Tlc59406updateEv>:
    or
    \code while(tlc_needXLAT); \endcode
    \returns 1 if there is data waiting to be latched, 0 if data was
             successfully shifted in */
uint8_t Tlc5940::update(void)
{
 852:	1f 93       	push	r17
 854:	cf 93       	push	r28
 856:	df 93       	push	r29
    if (tlc_needXLAT) {
 858:	10 91 e6 01 	lds	r17, 0x01E6
 85c:	11 11       	cpse	r17, r1
 85e:	29 c0       	rjmp	.+82     	; 0x8b2 <_ZN7Tlc59406updateEv+0x60>
        return 1;
    }
    disable_XLAT_pulses();
 860:	80 e2       	ldi	r24, 0x20	; 32
 862:	80 93 80 00 	sts	0x0080, r24
    if (firstGSInput) {
 866:	80 91 cb 01 	lds	r24, 0x01CB
 86a:	88 23       	and	r24, r24
 86c:	29 f0       	breq	.+10     	; 0x878 <_ZN7Tlc59406updateEv+0x26>
        // adds an extra SCLK pulse unless we've just set dot-correction data
        firstGSInput = 0;
 86e:	10 92 cb 01 	sts	0x01CB, r1
    or
    \code while(tlc_needXLAT); \endcode
    \returns 1 if there is data waiting to be latched, 0 if data was
             successfully shifted in */
uint8_t Tlc5940::update(void)
{
 872:	cc ec       	ldi	r28, 0xCC	; 204
 874:	d1 e0       	ldi	r29, 0x01	; 1
 876:	03 c0       	rjmp	.+6      	; 0x87e <_ZN7Tlc59406updateEv+0x2c>
    disable_XLAT_pulses();
    if (firstGSInput) {
        // adds an extra SCLK pulse unless we've just set dot-correction data
        firstGSInput = 0;
    } else {
        pulse_pin(SCLK_PORT, SCLK_PIN);
 878:	2d 9a       	sbi	0x05, 5	; 5
 87a:	2d 98       	cbi	0x05, 5	; 5
 87c:	fa cf       	rjmp	.-12     	; 0x872 <_ZN7Tlc59406updateEv+0x20>
    }
    uint8_t *p = tlc_GSData;
    while (p < tlc_GSData + NUM_TLCS * 24) {
        tlc_shift8(*p++);
 87e:	88 81       	ld	r24, Y
 880:	0e 94 24 04 	call	0x848	; 0x848 <_Z10tlc_shift8h>
        tlc_shift8(*p++);
 884:	89 81       	ldd	r24, Y+1	; 0x01
 886:	0e 94 24 04 	call	0x848	; 0x848 <_Z10tlc_shift8h>
 88a:	23 96       	adiw	r28, 0x03	; 3
 88c:	fe 01       	movw	r30, r28
 88e:	31 97       	sbiw	r30, 0x01	; 1
        tlc_shift8(*p++);
 890:	80 81       	ld	r24, Z
 892:	0e 94 24 04 	call	0x848	; 0x848 <_Z10tlc_shift8h>
        firstGSInput = 0;
    } else {
        pulse_pin(SCLK_PORT, SCLK_PIN);
    }
    uint8_t *p = tlc_GSData;
    while (p < tlc_GSData + NUM_TLCS * 24) {
 896:	81 e0       	ldi	r24, 0x01	; 1
 898:	c4 3e       	cpi	r28, 0xE4	; 228
 89a:	d8 07       	cpc	r29, r24
 89c:	80 f3       	brcs	.-32     	; 0x87e <_ZN7Tlc59406updateEv+0x2c>
        tlc_shift8(*p++);
        tlc_shift8(*p++);
        tlc_shift8(*p++);
    }
    tlc_needXLAT = 1;
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	80 93 e6 01 	sts	0x01E6, r24
    enable_XLAT_pulses();
 8a4:	90 ea       	ldi	r25, 0xA0	; 160
 8a6:	90 93 80 00 	sts	0x0080, r25
    set_XLAT_interrupt();
 8aa:	b0 9a       	sbi	0x16, 0	; 22
 8ac:	80 93 6f 00 	sts	0x006F, r24
 8b0:	01 c0       	rjmp	.+2      	; 0x8b4 <_ZN7Tlc59406updateEv+0x62>
    \returns 1 if there is data waiting to be latched, 0 if data was
             successfully shifted in */
uint8_t Tlc5940::update(void)
{
    if (tlc_needXLAT) {
        return 1;
 8b2:	11 e0       	ldi	r17, 0x01	; 1
    }
    tlc_needXLAT = 1;
    enable_XLAT_pulses();
    set_XLAT_interrupt();
    return 0;
}
 8b4:	81 2f       	mov	r24, r17
 8b6:	df 91       	pop	r29
 8b8:	cf 91       	pop	r28
 8ba:	1f 91       	pop	r17
 8bc:	08 95       	ret

000008be <_ZN7Tlc59404initEj>:
/** Pin i/o and Timer setup.  The grayscale register will be reset to all
    zeros, or whatever initialValue is set to and the Timers will start.
    \param initialValue = 0, optional parameter specifing the inital startup
           value */
void Tlc5940::init(uint16_t initialValue)
{
 8be:	0f 93       	push	r16
 8c0:	1f 93       	push	r17
 8c2:	cf 93       	push	r28
 8c4:	df 93       	push	r29
 8c6:	00 d0       	rcall	.+0      	; 0x8c8 <_ZN7Tlc59404initEj+0xa>
 8c8:	cd b7       	in	r28, 0x3d	; 61
 8ca:	de b7       	in	r29, 0x3e	; 62
 8cc:	8c 01       	movw	r16, r24
    /* Pin Setup */
    XLAT_DDR |= _BV(XLAT_PIN);
 8ce:	21 9a       	sbi	0x04, 1	; 4
    BLANK_DDR |= _BV(BLANK_PIN);
 8d0:	22 9a       	sbi	0x04, 2	; 4
    GSCLK_DDR |= _BV(GSCLK_PIN);
 8d2:	53 9a       	sbi	0x0a, 3	; 10
#endif
#if XERR_ENABLED
    XERR_DDR &= ~_BV(XERR_PIN);   // XERR as input
    XERR_PORT |= _BV(XERR_PIN);   // enable pull-up resistor
#endif
    BLANK_PORT |= _BV(BLANK_PIN); // leave blank high (until the timers start)
 8d4:	2a 9a       	sbi	0x05, 2	; 5

    tlc_shift8_init();
 8d6:	69 83       	std	Y+1, r22	; 0x01
 8d8:	7a 83       	std	Y+2, r23	; 0x02
 8da:	0e 94 1b 04 	call	0x836	; 0x836 <_Z15tlc_shift8_initv>

    setAll(initialValue);
 8de:	69 81       	ldd	r22, Y+1	; 0x01
 8e0:	7a 81       	ldd	r23, Y+2	; 0x02
 8e2:	c8 01       	movw	r24, r16
 8e4:	0e 94 fe 03 	call	0x7fc	; 0x7fc <_ZN7Tlc59406setAllEj>
    update();
 8e8:	c8 01       	movw	r24, r16
 8ea:	0e 94 29 04 	call	0x852	; 0x852 <_ZN7Tlc59406updateEv>
    disable_XLAT_pulses();
 8ee:	e0 e8       	ldi	r30, 0x80	; 128
 8f0:	f0 e0       	ldi	r31, 0x00	; 0
 8f2:	80 e2       	ldi	r24, 0x20	; 32
 8f4:	80 83       	st	Z, r24
    clear_XLAT_interrupt();
 8f6:	10 92 6f 00 	sts	0x006F, r1
    tlc_needXLAT = 0;
 8fa:	10 92 e6 01 	sts	0x01E6, r1
    pulse_pin(XLAT_PORT, XLAT_PIN);
 8fe:	29 9a       	sbi	0x05, 1	; 5
 900:	29 98       	cbi	0x05, 1	; 5


    /* Timer Setup */

    /* Timer 1 - BLANK / XLAT */
    TCCR1A = _BV(COM1B1);  // non inverting, output on OC1B, BLANK
 902:	80 83       	st	Z, r24
    TCCR1B = _BV(WGM13);   // Phase/freq correct PWM, ICR1 top
 904:	e1 e8       	ldi	r30, 0x81	; 129
 906:	f0 e0       	ldi	r31, 0x00	; 0
 908:	80 e1       	ldi	r24, 0x10	; 16
 90a:	80 83       	st	Z, r24
    OCR1A = 1;             // duty factor on OC1A, XLAT is inside BLANK
 90c:	81 e0       	ldi	r24, 0x01	; 1
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	90 93 89 00 	sts	0x0089, r25
 914:	80 93 88 00 	sts	0x0088, r24
    OCR1B = 2;             // duty factor on BLANK (larger than OCR1A (XLAT))
 918:	82 e0       	ldi	r24, 0x02	; 2
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	90 93 8b 00 	sts	0x008B, r25
 920:	80 93 8a 00 	sts	0x008A, r24
    ICR1 = TLC_PWM_PERIOD; // see tlc_config.h
 924:	80 e0       	ldi	r24, 0x00	; 0
 926:	90 e2       	ldi	r25, 0x20	; 32
 928:	90 93 87 00 	sts	0x0087, r25
 92c:	80 93 86 00 	sts	0x0086, r24
           | _BV(WGM33);      // Fast pwm with ICR3 top
#else
    TCCR2A = _BV(COM2B1)      // set on BOTTOM, clear on OCR2A (non-inverting),
                              // output on OC2B
           | _BV(WGM21)       // Fast pwm with OCR2A top
           | _BV(WGM20);      // Fast pwm with OCR2A top
 930:	83 e2       	ldi	r24, 0x23	; 35
 932:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = _BV(WGM22);      // Fast pwm with OCR2A top
 936:	a1 eb       	ldi	r26, 0xB1	; 177
 938:	b0 e0       	ldi	r27, 0x00	; 0
 93a:	88 e0       	ldi	r24, 0x08	; 8
 93c:	8c 93       	st	X, r24
    OCR2B = 0;                // duty factor (as short a pulse as possible)
 93e:	10 92 b4 00 	sts	0x00B4, r1
    OCR2A = TLC_GSCLK_PERIOD; // see tlc_config.h
 942:	83 e0       	ldi	r24, 0x03	; 3
 944:	80 93 b3 00 	sts	0x00B3, r24
    TCCR2B |= _BV(CS20);      // no prescale, (start pwm output)
 948:	8c 91       	ld	r24, X
 94a:	81 60       	ori	r24, 0x01	; 1
 94c:	8c 93       	st	X, r24
#endif
    TCCR1B |= _BV(CS10);      // no prescale, (start pwm output)
 94e:	80 81       	ld	r24, Z
 950:	81 60       	ori	r24, 0x01	; 1
 952:	80 83       	st	Z, r24
    update();
 954:	c8 01       	movw	r24, r16
}
 956:	0f 90       	pop	r0
 958:	0f 90       	pop	r0
 95a:	df 91       	pop	r29
 95c:	cf 91       	pop	r28
 95e:	1f 91       	pop	r17
 960:	0f 91       	pop	r16
    OCR2B = 0;                // duty factor (as short a pulse as possible)
    OCR2A = TLC_GSCLK_PERIOD; // see tlc_config.h
    TCCR2B |= _BV(CS20);      // no prescale, (start pwm output)
#endif
    TCCR1B |= _BV(CS10);      // no prescale, (start pwm output)
    update();
 962:	0c 94 29 04 	jmp	0x852	; 0x852 <_ZN7Tlc59406updateEv>

00000966 <__udivmodsi4>:
 966:	a1 e2       	ldi	r26, 0x21	; 33
 968:	1a 2e       	mov	r1, r26
 96a:	aa 1b       	sub	r26, r26
 96c:	bb 1b       	sub	r27, r27
 96e:	fd 01       	movw	r30, r26
 970:	0d c0       	rjmp	.+26     	; 0x98c <__udivmodsi4_ep>

00000972 <__udivmodsi4_loop>:
 972:	aa 1f       	adc	r26, r26
 974:	bb 1f       	adc	r27, r27
 976:	ee 1f       	adc	r30, r30
 978:	ff 1f       	adc	r31, r31
 97a:	a2 17       	cp	r26, r18
 97c:	b3 07       	cpc	r27, r19
 97e:	e4 07       	cpc	r30, r20
 980:	f5 07       	cpc	r31, r21
 982:	20 f0       	brcs	.+8      	; 0x98c <__udivmodsi4_ep>
 984:	a2 1b       	sub	r26, r18
 986:	b3 0b       	sbc	r27, r19
 988:	e4 0b       	sbc	r30, r20
 98a:	f5 0b       	sbc	r31, r21

0000098c <__udivmodsi4_ep>:
 98c:	66 1f       	adc	r22, r22
 98e:	77 1f       	adc	r23, r23
 990:	88 1f       	adc	r24, r24
 992:	99 1f       	adc	r25, r25
 994:	1a 94       	dec	r1
 996:	69 f7       	brne	.-38     	; 0x972 <__udivmodsi4_loop>
 998:	60 95       	com	r22
 99a:	70 95       	com	r23
 99c:	80 95       	com	r24
 99e:	90 95       	com	r25
 9a0:	9b 01       	movw	r18, r22
 9a2:	ac 01       	movw	r20, r24
 9a4:	bd 01       	movw	r22, r26
 9a6:	cf 01       	movw	r24, r30
 9a8:	08 95       	ret

000009aa <__tablejump2__>:
 9aa:	ee 0f       	add	r30, r30
 9ac:	ff 1f       	adc	r31, r31
 9ae:	05 90       	lpm	r0, Z+
 9b0:	f4 91       	lpm	r31, Z
 9b2:	e0 2d       	mov	r30, r0
 9b4:	09 94       	ijmp

000009b6 <_exit>:
 9b6:	f8 94       	cli

000009b8 <__stop_program>:
 9b8:	ff cf       	rjmp	.-2      	; 0x9b8 <__stop_program>
