
CPE329_FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000b84  00000c18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c9  00800128  00800128  00000c40  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00000cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006b05  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001482  00000000  00000000  00007a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001136  00000000  00000000  00008edf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000818  00000000  00000000  0000a018  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a18  00000000  00000000  0000a830  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ca5  00000000  00000000  0000c248  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  0000eeed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__vector_3>
  10:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_4>
  14:	0c 94 c8 00 	jmp	0x190	; 0x190 <__vector_5>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__vector_13>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__vector_16>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__vector_18>
  4c:	0c 94 90 02 	jmp	0x520	; 0x520 <__vector_19>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	b6 02       	muls	r27, r22

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e4 e8       	ldi	r30, 0x84	; 132
  7e:	fb e0       	ldi	r31, 0x0B	; 11
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a8 32       	cpi	r26, 0x28	; 40
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	a8 e2       	ldi	r26, 0x28	; 40
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a1 3f       	cpi	r26, 0xF1	; 241
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 ba 05 	call	0xb74	; 0xb74 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	81 ee       	ldi	r24, 0xE1	; 225
  c2:	94 e0       	ldi	r25, 0x04	; 4
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x6>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x10>
  ce:	00 00       	nop
int chan = 0; // LED channel

int main(void){
	_delay_ms(100);			// startup delay
	
	init();					// initializations for Arduino.h
  d0:	0e 94 2c 04 	call	0x858	; 0x858 <init>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
  d4:	26 e0       	ldi	r18, 0x06	; 6
  d6:	40 e8       	ldi	r20, 0x80	; 128
  d8:	55 e2       	ldi	r21, 0x25	; 37
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	8e e2       	ldi	r24, 0x2E	; 46
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(9600);		// set baud rate for serial com
	Tlc.init();				// initialize the TLC chip
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	84 ed       	ldi	r24, 0xD4	; 212
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	0e 94 1c 05 	call	0xa38	; 0xa38 <_ZN7Tlc59404initEj>
   
	// Turn on full, then fade off
	while(GS >= 0){
  f2:	80 91 00 01 	lds	r24, 0x0100
  f6:	90 91 01 01 	lds	r25, 0x0101
  fa:	97 fd       	sbrc	r25, 7
  fc:	16 c0       	rjmp	.+44     	; 0x12a <main+0x6c>
		setAllLEDs(GS,0,0);
  fe:	40 e0       	ldi	r20, 0x00	; 0
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_Z10setAllLEDsiii>
		GS--;					// increment GS
 10a:	80 91 00 01 	lds	r24, 0x0100
 10e:	90 91 01 01 	lds	r25, 0x0101
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	90 93 01 01 	sts	0x0101, r25
 118:	80 93 00 01 	sts	0x0100, r24
 11c:	8f e1       	ldi	r24, 0x1F	; 31
 11e:	9e e4       	ldi	r25, 0x4E	; 78
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <main+0x62>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x68>
 126:	00 00       	nop
 128:	e4 cf       	rjmp	.-56     	; 0xf2 <main+0x34>
		_delay_ms(GS_DELAY);	// delay GS color
	}
   
	// Temporary idea: Determine the bottom/back LED, send it to rgbUtil so that
	//  it knows which led to cycle to next
	setBottomLED(0);
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <_Z12setBottomLEDi>
	//Infintely cycle an LED around the loop
	while (1) {
		nextLED();
		setAmbientColor(GS, 0, 0);
		GS++;
		GS %= TOP_GS/2;
 132:	c1 e7       	ldi	r28, 0x71	; 113
 134:	d2 e0       	ldi	r29, 0x02	; 2
	//  it knows which led to cycle to next
	setBottomLED(0);
   
	//Infintely cycle an LED around the loop
	while (1) {
		nextLED();
 136:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <_Z7nextLEDv>
		setAmbientColor(GS, 0, 0);
 13a:	40 e0       	ldi	r20, 0x00	; 0
 13c:	50 e0       	ldi	r21, 0x00	; 0
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	80 91 00 01 	lds	r24, 0x0100
 146:	90 91 01 01 	lds	r25, 0x0101
 14a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z15setAmbientColoriii>
		GS++;
 14e:	80 91 00 01 	lds	r24, 0x0100
 152:	90 91 01 01 	lds	r25, 0x0101
 156:	01 96       	adiw	r24, 0x01	; 1
		GS %= TOP_GS/2;
 158:	be 01       	movw	r22, r28
 15a:	0e 94 70 05 	call	0xae0	; 0xae0 <__divmodhi4>
 15e:	90 93 01 01 	sts	0x0101, r25
 162:	80 93 00 01 	sts	0x0100, r24
#include "tmr_int_util.h"

int GS = TOP_GS; //0   // LED greyscale
int chan = 0; // LED channel

int main(void){
 166:	e7 cf       	rjmp	.-50     	; 0x136 <main+0x78>

00000168 <__vector_3>:
}


// ISR for halleffect1 at pin D8
// enters ISR when set from high (from pull-up) to low
ISR(PCINT0_vect){
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
	
}
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <__vector_4>:

// ISR for halleffect1 at pin D7
// enters ISR when set from high (from pull-up) to low
ISR(PCINT1_vect){
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
	
}
 186:	0f 90       	pop	r0
 188:	0f be       	out	0x3f, r0	; 63
 18a:	0f 90       	pop	r0
 18c:	1f 90       	pop	r1
 18e:	18 95       	reti

00000190 <__vector_5>:

// ISR for halleffect1 at pin A0
// enters ISR when set from high (from pull-up) to low
ISR(PCINT2_vect){
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
	
}
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <_Z10setAllLEDsiii>:

int bottomLED = -1;
int currentLED = -1;
static color ambientColor = {0,0,0};

void setAllLEDs(int r, int g, int b) {
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	ec 01       	movw	r28, r24
   Serial.println(r);   // print GS data to Serial window (BAUD =9600)
 1aa:	4a e0       	ldi	r20, 0x0A	; 10
 1ac:	50 e0       	ldi	r21, 0x00	; 0
 1ae:	bc 01       	movw	r22, r24
 1b0:	8e e2       	ldi	r24, 0x2E	; 46
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 cb 03 	call	0x796	; 0x796 <_ZN5Print7printlnEii>
   Tlc.clear();      // clear TLC data
 1b8:	84 ed       	ldi	r24, 0xD4	; 212
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_ZN7Tlc59405clearEv>
   Tlc.setAll(r);     // set all TLC channel (15:0) to GS value
 1c0:	be 01       	movw	r22, r28
 1c2:	84 ed       	ldi	r24, 0xD4	; 212
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	0e 94 bb 04 	call	0x976	; 0x976 <_ZN7Tlc59406setAllEj>
   Tlc.update();     // send GS data to TLC5940
 1ca:	84 ed       	ldi	r24, 0xD4	; 212
 1cc:	91 e0       	ldi	r25, 0x01	; 1
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28

void setAllLEDs(int r, int g, int b) {
   Serial.println(r);   // print GS data to Serial window (BAUD =9600)
   Tlc.clear();      // clear TLC data
   Tlc.setAll(r);     // set all TLC channel (15:0) to GS value
   Tlc.update();     // send GS data to TLC5940
 1d2:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <_ZN7Tlc59406updateEv>

000001d6 <_Z12setBottomLEDi>:
}

/* Something else determines which LED is on the bottom in main */
void setBottomLED(int LED) {
   bottomLED = LED;
 1d6:	90 93 05 01 	sts	0x0105, r25
 1da:	80 93 04 01 	sts	0x0104, r24
 1de:	08 95       	ret

000001e0 <_Z15setAmbientColoriii>:
}

void setAmbientColor(int r, int g, int b) {
   ambientColor.r = r;
 1e0:	e8 e2       	ldi	r30, 0x28	; 40
 1e2:	f1 e0       	ldi	r31, 0x01	; 1
 1e4:	91 83       	std	Z+1, r25	; 0x01
 1e6:	80 83       	st	Z, r24
   ambientColor.g = g;
 1e8:	73 83       	std	Z+3, r23	; 0x03
 1ea:	62 83       	std	Z+2, r22	; 0x02
   ambientColor.b = b;
 1ec:	55 83       	std	Z+5, r21	; 0x05
 1ee:	44 83       	std	Z+4, r20	; 0x04
 1f0:	08 95       	ret

000001f2 <_Z7nextLEDv>:
}

void nextLED() {
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
   int ndx;
   
   if (currentLED < 0)
 1f6:	80 91 02 01 	lds	r24, 0x0102
 1fa:	90 91 03 01 	lds	r25, 0x0103
 1fe:	97 ff       	sbrs	r25, 7
 200:	08 c0       	rjmp	.+16     	; 0x212 <_Z7nextLEDv+0x20>
      currentLED = bottomLED; // Definitely subject to change, just a placeholder
 202:	80 91 04 01 	lds	r24, 0x0104
 206:	90 91 05 01 	lds	r25, 0x0105
 20a:	90 93 03 01 	sts	0x0103, r25
 20e:	80 93 02 01 	sts	0x0102, r24
   
   Serial.println(TOP_GS);
 212:	4a e0       	ldi	r20, 0x0A	; 10
 214:	50 e0       	ldi	r21, 0x00	; 0
 216:	62 ee       	ldi	r22, 0xE2	; 226
 218:	74 e0       	ldi	r23, 0x04	; 4
 21a:	8e e2       	ldi	r24, 0x2E	; 46
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	0e 94 cb 03 	call	0x796	; 0x796 <_ZN5Print7printlnEii>
   Tlc.clear();
 222:	84 ed       	ldi	r24, 0xD4	; 212
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <_ZN7Tlc59405clearEv>
//   Tlc.setAll(ambientColor);
   
   for (ndx = 0; ndx < NUM_LED_CHANNELS; ndx++) {
 22a:	c0 e0       	ldi	r28, 0x00	; 0
 22c:	d0 e0       	ldi	r29, 0x00	; 0
      if (ndx == currentLED)
 22e:	80 91 02 01 	lds	r24, 0x0102
 232:	90 91 03 01 	lds	r25, 0x0103
 236:	c8 17       	cp	r28, r24
 238:	d9 07       	cpc	r29, r25
 23a:	19 f4       	brne	.+6      	; 0x242 <_Z7nextLEDv+0x50>
         Tlc.set(ndx, TOP_GS);
 23c:	42 ee       	ldi	r20, 0xE2	; 226
 23e:	54 e0       	ldi	r21, 0x04	; 4
 240:	04 c0       	rjmp	.+8      	; 0x24a <_Z7nextLEDv+0x58>
      else
         Tlc.set(ndx, ambientColor.r);
 242:	40 91 28 01 	lds	r20, 0x0128
 246:	50 91 29 01 	lds	r21, 0x0129
 24a:	6c 2f       	mov	r22, r28
 24c:	84 ed       	ldi	r24, 0xD4	; 212
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	0e 94 9c 04 	call	0x938	; 0x938 <_ZN7Tlc59403setEhj>
   
   Serial.println(TOP_GS);
   Tlc.clear();
//   Tlc.setAll(ambientColor);
   
   for (ndx = 0; ndx < NUM_LED_CHANNELS; ndx++) {
 254:	21 96       	adiw	r28, 0x01	; 1
 256:	c0 31       	cpi	r28, 0x10	; 16
 258:	d1 05       	cpc	r29, r1
 25a:	49 f7       	brne	.-46     	; 0x22e <_Z7nextLEDv+0x3c>
         Tlc.set(ndx, TOP_GS);
      else
         Tlc.set(ndx, ambientColor.r);
   }
   
   Tlc.update();
 25c:	84 ed       	ldi	r24, 0xD4	; 212
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	0e 94 e6 04 	call	0x9cc	; 0x9cc <_ZN7Tlc59406updateEv>
   
   currentLED += DIRECTION * NUM_COLOR_CHANNELS;
 264:	80 91 02 01 	lds	r24, 0x0102
 268:	90 91 03 01 	lds	r25, 0x0103
 26c:	01 97       	sbiw	r24, 0x01	; 1
   currentLED %= NUM_LED_CHANNELS;
 26e:	be 01       	movw	r22, r28
 270:	0e 94 70 05 	call	0xae0	; 0xae0 <__divmodhi4>
 274:	90 93 03 01 	sts	0x0103, r25
 278:	80 93 02 01 	sts	0x0102, r24
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 282:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 284:	91 8d       	ldd	r25, Z+25	; 0x19
 286:	22 8d       	ldd	r18, Z+26	; 0x1a
 288:	89 2f       	mov	r24, r25
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	80 5c       	subi	r24, 0xC0	; 192
 28e:	9f 4f       	sbci	r25, 0xFF	; 255
 290:	82 1b       	sub	r24, r18
 292:	91 09       	sbc	r25, r1
}
 294:	8f 73       	andi	r24, 0x3F	; 63
 296:	99 27       	eor	r25, r25
 298:	08 95       	ret

0000029a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 29a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 29c:	91 8d       	ldd	r25, Z+25	; 0x19
 29e:	82 8d       	ldd	r24, Z+26	; 0x1a
 2a0:	98 17       	cp	r25, r24
 2a2:	31 f0       	breq	.+12     	; 0x2b0 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 2a4:	82 8d       	ldd	r24, Z+26	; 0x1a
 2a6:	e8 0f       	add	r30, r24
 2a8:	f1 1d       	adc	r31, r1
 2aa:	85 8d       	ldd	r24, Z+29	; 0x1d
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 2b0:	8f ef       	ldi	r24, 0xFF	; 255
 2b2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 2b4:	08 95       	ret

000002b6 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 2b6:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 2b8:	91 8d       	ldd	r25, Z+25	; 0x19
 2ba:	82 8d       	ldd	r24, Z+26	; 0x1a
 2bc:	98 17       	cp	r25, r24
 2be:	61 f0       	breq	.+24     	; 0x2d8 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 2c0:	82 8d       	ldd	r24, Z+26	; 0x1a
 2c2:	df 01       	movw	r26, r30
 2c4:	a8 0f       	add	r26, r24
 2c6:	b1 1d       	adc	r27, r1
 2c8:	5d 96       	adiw	r26, 0x1d	; 29
 2ca:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 2cc:	92 8d       	ldd	r25, Z+26	; 0x1a
 2ce:	9f 5f       	subi	r25, 0xFF	; 255
 2d0:	9f 73       	andi	r25, 0x3F	; 63
 2d2:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 2d8:	8f ef       	ldi	r24, 0xFF	; 255
 2da:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 2dc:	08 95       	ret

000002de <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 2de:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 2e0:	84 8d       	ldd	r24, Z+28	; 0x1c
 2e2:	df 01       	movw	r26, r30
 2e4:	a8 0f       	add	r26, r24
 2e6:	b1 1d       	adc	r27, r1
 2e8:	a3 5a       	subi	r26, 0xA3	; 163
 2ea:	bf 4f       	sbci	r27, 0xFF	; 255
 2ec:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 2ee:	84 8d       	ldd	r24, Z+28	; 0x1c
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	8f 73       	andi	r24, 0x3F	; 63
 2f6:	99 27       	eor	r25, r25
 2f8:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 2fa:	a6 89       	ldd	r26, Z+22	; 0x16
 2fc:	b7 89       	ldd	r27, Z+23	; 0x17
 2fe:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 300:	a0 89       	ldd	r26, Z+16	; 0x10
 302:	b1 89       	ldd	r27, Z+17	; 0x11
 304:	8c 91       	ld	r24, X
 306:	80 64       	ori	r24, 0x40	; 64
 308:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 30a:	93 8d       	ldd	r25, Z+27	; 0x1b
 30c:	84 8d       	ldd	r24, Z+28	; 0x1c
 30e:	98 13       	cpse	r25, r24
 310:	06 c0       	rjmp	.+12     	; 0x31e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 312:	02 88       	ldd	r0, Z+18	; 0x12
 314:	f3 89       	ldd	r31, Z+19	; 0x13
 316:	e0 2d       	mov	r30, r0
 318:	80 81       	ld	r24, Z
 31a:	8f 7d       	andi	r24, 0xDF	; 223
 31c:	80 83       	st	Z, r24
 31e:	08 95       	ret

00000320 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 326:	88 8d       	ldd	r24, Y+24	; 0x18
 328:	88 23       	and	r24, r24
 32a:	c9 f0       	breq	.+50     	; 0x35e <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 32c:	ea 89       	ldd	r30, Y+18	; 0x12
 32e:	fb 89       	ldd	r31, Y+19	; 0x13
 330:	80 81       	ld	r24, Z
 332:	85 fd       	sbrc	r24, 5
 334:	05 c0       	rjmp	.+10     	; 0x340 <_ZN14HardwareSerial5flushEv+0x20>
 336:	a8 89       	ldd	r26, Y+16	; 0x10
 338:	b9 89       	ldd	r27, Y+17	; 0x11
 33a:	8c 91       	ld	r24, X
 33c:	86 fd       	sbrc	r24, 6
 33e:	0f c0       	rjmp	.+30     	; 0x35e <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 340:	0f b6       	in	r0, 0x3f	; 63
 342:	07 fc       	sbrc	r0, 7
 344:	f5 cf       	rjmp	.-22     	; 0x330 <_ZN14HardwareSerial5flushEv+0x10>
 346:	80 81       	ld	r24, Z
 348:	85 ff       	sbrs	r24, 5
 34a:	f2 cf       	rjmp	.-28     	; 0x330 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 34c:	a8 89       	ldd	r26, Y+16	; 0x10
 34e:	b9 89       	ldd	r27, Y+17	; 0x11
 350:	8c 91       	ld	r24, X
 352:	85 ff       	sbrs	r24, 5
 354:	ed cf       	rjmp	.-38     	; 0x330 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 356:	ce 01       	movw	r24, r28
 358:	0e 94 6f 01 	call	0x2de	; 0x2de <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 35c:	e7 cf       	rjmp	.-50     	; 0x32c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	08 95       	ret

00000364 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 364:	ef 92       	push	r14
 366:	ff 92       	push	r15
 368:	0f 93       	push	r16
 36a:	1f 93       	push	r17
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	ec 01       	movw	r28, r24
  _written = true;
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 376:	9b 8d       	ldd	r25, Y+27	; 0x1b
 378:	8c 8d       	ldd	r24, Y+28	; 0x1c
 37a:	98 13       	cpse	r25, r24
 37c:	05 c0       	rjmp	.+10     	; 0x388 <_ZN14HardwareSerial5writeEh+0x24>
 37e:	e8 89       	ldd	r30, Y+16	; 0x10
 380:	f9 89       	ldd	r31, Y+17	; 0x11
 382:	80 81       	ld	r24, Z
 384:	85 fd       	sbrc	r24, 5
 386:	24 c0       	rjmp	.+72     	; 0x3d0 <_ZN14HardwareSerial5writeEh+0x6c>
 388:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 38a:	0b 8d       	ldd	r16, Y+27	; 0x1b
 38c:	10 e0       	ldi	r17, 0x00	; 0
 38e:	0f 5f       	subi	r16, 0xFF	; 255
 390:	1f 4f       	sbci	r17, 0xFF	; 255
 392:	0f 73       	andi	r16, 0x3F	; 63
 394:	11 27       	eor	r17, r17
 396:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 398:	8c 8d       	ldd	r24, Y+28	; 0x1c
 39a:	e8 12       	cpse	r14, r24
 39c:	0c c0       	rjmp	.+24     	; 0x3b6 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	07 fc       	sbrc	r0, 7
 3a2:	fa cf       	rjmp	.-12     	; 0x398 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 3a4:	e8 89       	ldd	r30, Y+16	; 0x10
 3a6:	f9 89       	ldd	r31, Y+17	; 0x11
 3a8:	80 81       	ld	r24, Z
 3aa:	85 ff       	sbrs	r24, 5
 3ac:	f5 cf       	rjmp	.-22     	; 0x398 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 3ae:	ce 01       	movw	r24, r28
 3b0:	0e 94 6f 01 	call	0x2de	; 0x2de <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 3b4:	f1 cf       	rjmp	.-30     	; 0x398 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 3b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
 3b8:	fe 01       	movw	r30, r28
 3ba:	e8 0f       	add	r30, r24
 3bc:	f1 1d       	adc	r31, r1
 3be:	e3 5a       	subi	r30, 0xA3	; 163
 3c0:	ff 4f       	sbci	r31, 0xFF	; 255
 3c2:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 3c4:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 3c6:	ea 89       	ldd	r30, Y+18	; 0x12
 3c8:	fb 89       	ldd	r31, Y+19	; 0x13
 3ca:	80 81       	ld	r24, Z
 3cc:	80 62       	ori	r24, 0x20	; 32
 3ce:	07 c0       	rjmp	.+14     	; 0x3de <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 3d0:	ee 89       	ldd	r30, Y+22	; 0x16
 3d2:	ff 89       	ldd	r31, Y+23	; 0x17
 3d4:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 3d6:	e8 89       	ldd	r30, Y+16	; 0x10
 3d8:	f9 89       	ldd	r31, Y+17	; 0x11
 3da:	80 81       	ld	r24, Z
 3dc:	80 64       	ori	r24, 0x40	; 64
 3de:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	1f 91       	pop	r17
 3ea:	0f 91       	pop	r16
 3ec:	ff 90       	pop	r15
 3ee:	ef 90       	pop	r14
 3f0:	08 95       	ret

000003f2 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 3f2:	cf 92       	push	r12
 3f4:	df 92       	push	r13
 3f6:	ef 92       	push	r14
 3f8:	ff 92       	push	r15
 3fa:	1f 93       	push	r17
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	ec 01       	movw	r28, r24
 402:	6a 01       	movw	r12, r20
 404:	7b 01       	movw	r14, r22
 406:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 408:	e8 89       	ldd	r30, Y+16	; 0x10
 40a:	f9 89       	ldd	r31, Y+17	; 0x11
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 410:	41 15       	cp	r20, r1
 412:	51 4e       	sbci	r21, 0xE1	; 225
 414:	61 05       	cpc	r22, r1
 416:	71 05       	cpc	r23, r1
 418:	b1 f0       	breq	.+44     	; 0x446 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 41a:	60 e0       	ldi	r22, 0x00	; 0
 41c:	79 e0       	ldi	r23, 0x09	; 9
 41e:	8d e3       	ldi	r24, 0x3D	; 61
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	a7 01       	movw	r20, r14
 424:	96 01       	movw	r18, r12
 426:	0e 94 84 05 	call	0xb08	; 0xb08 <__udivmodsi4>
 42a:	da 01       	movw	r26, r20
 42c:	c9 01       	movw	r24, r18
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	a1 09       	sbc	r26, r1
 432:	b1 09       	sbc	r27, r1
 434:	b6 95       	lsr	r27
 436:	a7 95       	ror	r26
 438:	97 95       	ror	r25
 43a:	87 95       	ror	r24
 43c:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 43e:	41 15       	cp	r20, r1
 440:	80 e1       	ldi	r24, 0x10	; 16
 442:	58 07       	cpc	r21, r24
 444:	a8 f0       	brcs	.+42     	; 0x470 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 446:	e8 89       	ldd	r30, Y+16	; 0x10
 448:	f9 89       	ldd	r31, Y+17	; 0x11
 44a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 44c:	60 e8       	ldi	r22, 0x80	; 128
 44e:	74 e8       	ldi	r23, 0x84	; 132
 450:	8e e1       	ldi	r24, 0x1E	; 30
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	a7 01       	movw	r20, r14
 456:	96 01       	movw	r18, r12
 458:	0e 94 84 05 	call	0xb08	; 0xb08 <__udivmodsi4>
 45c:	ba 01       	movw	r22, r20
 45e:	a9 01       	movw	r20, r18
 460:	41 50       	subi	r20, 0x01	; 1
 462:	51 09       	sbc	r21, r1
 464:	61 09       	sbc	r22, r1
 466:	71 09       	sbc	r23, r1
 468:	76 95       	lsr	r23
 46a:	67 95       	ror	r22
 46c:	57 95       	ror	r21
 46e:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 470:	ec 85       	ldd	r30, Y+12	; 0x0c
 472:	fd 85       	ldd	r31, Y+13	; 0x0d
 474:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
 476:	ee 85       	ldd	r30, Y+14	; 0x0e
 478:	ff 85       	ldd	r31, Y+15	; 0x0f
 47a:	40 83       	st	Z, r20

  _written = false;
 47c:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 47e:	ec 89       	ldd	r30, Y+20	; 0x14
 480:	fd 89       	ldd	r31, Y+21	; 0x15
 482:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 484:	ea 89       	ldd	r30, Y+18	; 0x12
 486:	fb 89       	ldd	r31, Y+19	; 0x13
 488:	80 81       	ld	r24, Z
 48a:	80 61       	ori	r24, 0x10	; 16
 48c:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 48e:	ea 89       	ldd	r30, Y+18	; 0x12
 490:	fb 89       	ldd	r31, Y+19	; 0x13
 492:	80 81       	ld	r24, Z
 494:	88 60       	ori	r24, 0x08	; 8
 496:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 498:	ea 89       	ldd	r30, Y+18	; 0x12
 49a:	fb 89       	ldd	r31, Y+19	; 0x13
 49c:	80 81       	ld	r24, Z
 49e:	80 68       	ori	r24, 0x80	; 128
 4a0:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 4a2:	ea 89       	ldd	r30, Y+18	; 0x12
 4a4:	fb 89       	ldd	r31, Y+19	; 0x13
 4a6:	80 81       	ld	r24, Z
 4a8:	8f 7d       	andi	r24, 0xDF	; 223
 4aa:	80 83       	st	Z, r24
}
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	1f 91       	pop	r17
 4b2:	ff 90       	pop	r15
 4b4:	ef 90       	pop	r14
 4b6:	df 90       	pop	r13
 4b8:	cf 90       	pop	r12
 4ba:	08 95       	ret

000004bc <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 4bc:	1f 92       	push	r1
 4be:	0f 92       	push	r0
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	0f 92       	push	r0
 4c4:	11 24       	eor	r1, r1
 4c6:	2f 93       	push	r18
 4c8:	8f 93       	push	r24
 4ca:	9f 93       	push	r25
 4cc:	ef 93       	push	r30
 4ce:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 4d0:	e0 91 3e 01 	lds	r30, 0x013E
 4d4:	f0 91 3f 01 	lds	r31, 0x013F
 4d8:	80 81       	ld	r24, Z
 4da:	e0 91 44 01 	lds	r30, 0x0144
 4de:	f0 91 45 01 	lds	r31, 0x0145
 4e2:	82 fd       	sbrc	r24, 2
 4e4:	12 c0       	rjmp	.+36     	; 0x50a <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 4e6:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 4e8:	80 91 47 01 	lds	r24, 0x0147
 4ec:	8f 5f       	subi	r24, 0xFF	; 255
 4ee:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 4f0:	20 91 48 01 	lds	r18, 0x0148
 4f4:	82 17       	cp	r24, r18
 4f6:	51 f0       	breq	.+20     	; 0x50c <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 4f8:	e0 91 47 01 	lds	r30, 0x0147
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	e2 5d       	subi	r30, 0xD2	; 210
 500:	fe 4f       	sbci	r31, 0xFE	; 254
 502:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 504:	80 93 47 01 	sts	0x0147, r24
 508:	01 c0       	rjmp	.+2      	; 0x50c <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 50a:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 50c:	ff 91       	pop	r31
 50e:	ef 91       	pop	r30
 510:	9f 91       	pop	r25
 512:	8f 91       	pop	r24
 514:	2f 91       	pop	r18
 516:	0f 90       	pop	r0
 518:	0f be       	out	0x3f, r0	; 63
 51a:	0f 90       	pop	r0
 51c:	1f 90       	pop	r1
 51e:	18 95       	reti

00000520 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 520:	1f 92       	push	r1
 522:	0f 92       	push	r0
 524:	0f b6       	in	r0, 0x3f	; 63
 526:	0f 92       	push	r0
 528:	11 24       	eor	r1, r1
 52a:	2f 93       	push	r18
 52c:	3f 93       	push	r19
 52e:	4f 93       	push	r20
 530:	5f 93       	push	r21
 532:	6f 93       	push	r22
 534:	7f 93       	push	r23
 536:	8f 93       	push	r24
 538:	9f 93       	push	r25
 53a:	af 93       	push	r26
 53c:	bf 93       	push	r27
 53e:	ef 93       	push	r30
 540:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 542:	8e e2       	ldi	r24, 0x2E	; 46
 544:	91 e0       	ldi	r25, 0x01	; 1
 546:	0e 94 6f 01 	call	0x2de	; 0x2de <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 54a:	ff 91       	pop	r31
 54c:	ef 91       	pop	r30
 54e:	bf 91       	pop	r27
 550:	af 91       	pop	r26
 552:	9f 91       	pop	r25
 554:	8f 91       	pop	r24
 556:	7f 91       	pop	r23
 558:	6f 91       	pop	r22
 55a:	5f 91       	pop	r21
 55c:	4f 91       	pop	r20
 55e:	3f 91       	pop	r19
 560:	2f 91       	pop	r18
 562:	0f 90       	pop	r0
 564:	0f be       	out	0x3f, r0	; 63
 566:	0f 90       	pop	r0
 568:	1f 90       	pop	r1
 56a:	18 95       	reti

0000056c <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 56c:	ee e2       	ldi	r30, 0x2E	; 46
 56e:	f1 e0       	ldi	r31, 0x01	; 1
 570:	13 82       	std	Z+3, r1	; 0x03
 572:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 574:	88 ee       	ldi	r24, 0xE8	; 232
 576:	93 e0       	ldi	r25, 0x03	; 3
 578:	a0 e0       	ldi	r26, 0x00	; 0
 57a:	b0 e0       	ldi	r27, 0x00	; 0
 57c:	84 83       	std	Z+4, r24	; 0x04
 57e:	95 83       	std	Z+5, r25	; 0x05
 580:	a6 83       	std	Z+6, r26	; 0x06
 582:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 584:	8a e0       	ldi	r24, 0x0A	; 10
 586:	91 e0       	ldi	r25, 0x01	; 1
 588:	91 83       	std	Z+1, r25	; 0x01
 58a:	80 83       	st	Z, r24
 58c:	85 ec       	ldi	r24, 0xC5	; 197
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	95 87       	std	Z+13, r25	; 0x0d
 592:	84 87       	std	Z+12, r24	; 0x0c
 594:	84 ec       	ldi	r24, 0xC4	; 196
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	97 87       	std	Z+15, r25	; 0x0f
 59a:	86 87       	std	Z+14, r24	; 0x0e
 59c:	80 ec       	ldi	r24, 0xC0	; 192
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	91 8b       	std	Z+17, r25	; 0x11
 5a2:	80 8b       	std	Z+16, r24	; 0x10
 5a4:	81 ec       	ldi	r24, 0xC1	; 193
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	93 8b       	std	Z+19, r25	; 0x13
 5aa:	82 8b       	std	Z+18, r24	; 0x12
 5ac:	82 ec       	ldi	r24, 0xC2	; 194
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	95 8b       	std	Z+21, r25	; 0x15
 5b2:	84 8b       	std	Z+20, r24	; 0x14
 5b4:	86 ec       	ldi	r24, 0xC6	; 198
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	97 8b       	std	Z+23, r25	; 0x17
 5ba:	86 8b       	std	Z+22, r24	; 0x16
 5bc:	11 8e       	std	Z+25, r1	; 0x19
 5be:	12 8e       	std	Z+26, r1	; 0x1a
 5c0:	13 8e       	std	Z+27, r1	; 0x1b
 5c2:	14 8e       	std	Z+28, r1	; 0x1c
 5c4:	08 95       	ret

000005c6 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 5c6:	cf 92       	push	r12
 5c8:	df 92       	push	r13
 5ca:	ef 92       	push	r14
 5cc:	ff 92       	push	r15
 5ce:	0f 93       	push	r16
 5d0:	1f 93       	push	r17
 5d2:	cf 93       	push	r28
 5d4:	df 93       	push	r29
 5d6:	6c 01       	movw	r12, r24
 5d8:	eb 01       	movw	r28, r22
 5da:	7b 01       	movw	r14, r22
 5dc:	e4 0e       	add	r14, r20
 5de:	f5 1e       	adc	r15, r21
  size_t n = 0;
 5e0:	00 e0       	ldi	r16, 0x00	; 0
 5e2:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
 5e4:	ce 15       	cp	r28, r14
 5e6:	df 05       	cpc	r29, r15
 5e8:	61 f0       	breq	.+24     	; 0x602 <_ZN5Print5writeEPKhj+0x3c>
    n += write(*buffer++);
 5ea:	69 91       	ld	r22, Y+
 5ec:	d6 01       	movw	r26, r12
 5ee:	ed 91       	ld	r30, X+
 5f0:	fc 91       	ld	r31, X
 5f2:	01 90       	ld	r0, Z+
 5f4:	f0 81       	ld	r31, Z
 5f6:	e0 2d       	mov	r30, r0
 5f8:	c6 01       	movw	r24, r12
 5fa:	09 95       	icall
 5fc:	08 0f       	add	r16, r24
 5fe:	19 1f       	adc	r17, r25
 600:	f1 cf       	rjmp	.-30     	; 0x5e4 <_ZN5Print5writeEPKhj+0x1e>
  }
  return n;
}
 602:	c8 01       	movw	r24, r16
 604:	df 91       	pop	r29
 606:	cf 91       	pop	r28
 608:	1f 91       	pop	r17
 60a:	0f 91       	pop	r16
 60c:	ff 90       	pop	r15
 60e:	ef 90       	pop	r14
 610:	df 90       	pop	r13
 612:	cf 90       	pop	r12
 614:	08 95       	ret

00000616 <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 616:	61 15       	cp	r22, r1
 618:	71 05       	cpc	r23, r1
 61a:	79 f0       	breq	.+30     	; 0x63a <_ZN5Print5writeEPKc+0x24>
      return write((const uint8_t *)str, strlen(str));
 61c:	fb 01       	movw	r30, r22
 61e:	01 90       	ld	r0, Z+
 620:	00 20       	and	r0, r0
 622:	e9 f7       	brne	.-6      	; 0x61e <_ZN5Print5writeEPKc+0x8>
 624:	31 97       	sbiw	r30, 0x01	; 1
 626:	af 01       	movw	r20, r30
 628:	46 1b       	sub	r20, r22
 62a:	57 0b       	sbc	r21, r23
 62c:	dc 01       	movw	r26, r24
 62e:	ed 91       	ld	r30, X+
 630:	fc 91       	ld	r31, X
 632:	02 80       	ldd	r0, Z+2	; 0x02
 634:	f3 81       	ldd	r31, Z+3	; 0x03
 636:	e0 2d       	mov	r30, r0
 638:	09 94       	ijmp
    }
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	08 95       	ret

00000640 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 640:	dc 01       	movw	r26, r24
 642:	ed 91       	ld	r30, X+
 644:	fc 91       	ld	r31, X
 646:	01 90       	ld	r0, Z+
 648:	f0 81       	ld	r31, Z
 64a:	e0 2d       	mov	r30, r0
 64c:	09 94       	ijmp

0000064e <_ZN5Print7printlnEv>:
  return x.printTo(*this);
}

size_t Print::println(void)
{
  return write("\r\n");
 64e:	66 e1       	ldi	r22, 0x16	; 22
 650:	71 e0       	ldi	r23, 0x01	; 1
 652:	0c 94 0b 03 	jmp	0x616	; 0x616 <_ZN5Print5writeEPKc>

00000656 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 656:	8f 92       	push	r8
 658:	9f 92       	push	r9
 65a:	af 92       	push	r10
 65c:	bf 92       	push	r11
 65e:	cf 92       	push	r12
 660:	df 92       	push	r13
 662:	ef 92       	push	r14
 664:	ff 92       	push	r15
 666:	0f 93       	push	r16
 668:	1f 93       	push	r17
 66a:	cf 93       	push	r28
 66c:	df 93       	push	r29
 66e:	cd b7       	in	r28, 0x3d	; 61
 670:	de b7       	in	r29, 0x3e	; 62
 672:	a1 97       	sbiw	r28, 0x21	; 33
 674:	0f b6       	in	r0, 0x3f	; 63
 676:	f8 94       	cli
 678:	de bf       	out	0x3e, r29	; 62
 67a:	0f be       	out	0x3f, r0	; 63
 67c:	cd bf       	out	0x3d, r28	; 61
 67e:	6c 01       	movw	r12, r24
 680:	14 2f       	mov	r17, r20
 682:	e5 2f       	mov	r30, r21
 684:	cb 01       	movw	r24, r22
 686:	02 2f       	mov	r16, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 688:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 68a:	22 30       	cpi	r18, 0x02	; 2
 68c:	08 f4       	brcc	.+2      	; 0x690 <_ZN5Print11printNumberEmh+0x3a>
 68e:	0a e0       	ldi	r16, 0x0A	; 10
 690:	7e 01       	movw	r14, r28
 692:	21 e2       	ldi	r18, 0x21	; 33
 694:	e2 0e       	add	r14, r18
 696:	f1 1c       	adc	r15, r1

  do {
    unsigned long m = n;
    n /= base;
 698:	80 2e       	mov	r8, r16
 69a:	91 2c       	mov	r9, r1
 69c:	a1 2c       	mov	r10, r1
 69e:	b1 2c       	mov	r11, r1
 6a0:	61 2f       	mov	r22, r17
 6a2:	7e 2f       	mov	r23, r30
 6a4:	a5 01       	movw	r20, r10
 6a6:	94 01       	movw	r18, r8
 6a8:	0e 94 84 05 	call	0xb08	; 0xb08 <__udivmodsi4>
    char c = m - base * n;
 6ac:	02 9f       	mul	r16, r18
 6ae:	10 19       	sub	r17, r0
 6b0:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	e8 1a       	sub	r14, r24
 6b6:	f1 08       	sbc	r15, r1
 6b8:	1a 30       	cpi	r17, 0x0A	; 10
 6ba:	10 f4       	brcc	.+4      	; 0x6c0 <_ZN5Print11printNumberEmh+0x6a>
 6bc:	10 5d       	subi	r17, 0xD0	; 208
 6be:	01 c0       	rjmp	.+2      	; 0x6c2 <_ZN5Print11printNumberEmh+0x6c>
 6c0:	19 5c       	subi	r17, 0xC9	; 201
 6c2:	f7 01       	movw	r30, r14
 6c4:	10 83       	st	Z, r17
 6c6:	12 2f       	mov	r17, r18
 6c8:	e3 2f       	mov	r30, r19
 6ca:	ca 01       	movw	r24, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 6cc:	23 2b       	or	r18, r19
 6ce:	24 2b       	or	r18, r20
 6d0:	25 2b       	or	r18, r21
 6d2:	31 f7       	brne	.-52     	; 0x6a0 <_ZN5Print11printNumberEmh+0x4a>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 6d4:	b7 01       	movw	r22, r14
 6d6:	c6 01       	movw	r24, r12
 6d8:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN5Print5writeEPKc>
}
 6dc:	a1 96       	adiw	r28, 0x21	; 33
 6de:	0f b6       	in	r0, 0x3f	; 63
 6e0:	f8 94       	cli
 6e2:	de bf       	out	0x3e, r29	; 62
 6e4:	0f be       	out	0x3f, r0	; 63
 6e6:	cd bf       	out	0x3d, r28	; 61
 6e8:	df 91       	pop	r29
 6ea:	cf 91       	pop	r28
 6ec:	1f 91       	pop	r17
 6ee:	0f 91       	pop	r16
 6f0:	ff 90       	pop	r15
 6f2:	ef 90       	pop	r14
 6f4:	df 90       	pop	r13
 6f6:	cf 90       	pop	r12
 6f8:	bf 90       	pop	r11
 6fa:	af 90       	pop	r10
 6fc:	9f 90       	pop	r9
 6fe:	8f 90       	pop	r8
 700:	08 95       	ret

00000702 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 702:	cf 92       	push	r12
 704:	df 92       	push	r13
 706:	ef 92       	push	r14
 708:	ff 92       	push	r15
 70a:	0f 93       	push	r16
 70c:	1f 93       	push	r17
 70e:	cf 93       	push	r28
 710:	df 93       	push	r29
 712:	ec 01       	movw	r28, r24
 714:	6a 01       	movw	r12, r20
 716:	7b 01       	movw	r14, r22
  if (base == 0) {
 718:	21 15       	cp	r18, r1
 71a:	31 05       	cpc	r19, r1
 71c:	79 f4       	brne	.+30     	; 0x73c <_ZN5Print5printEli+0x3a>
    return write(n);
 71e:	e8 81       	ld	r30, Y
 720:	f9 81       	ldd	r31, Y+1	; 0x01
 722:	01 90       	ld	r0, Z+
 724:	f0 81       	ld	r31, Z
 726:	e0 2d       	mov	r30, r0
 728:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 72a:	df 91       	pop	r29
 72c:	cf 91       	pop	r28
 72e:	1f 91       	pop	r17
 730:	0f 91       	pop	r16
 732:	ff 90       	pop	r15
 734:	ef 90       	pop	r14
 736:	df 90       	pop	r13
 738:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 73a:	09 94       	ijmp
  } else if (base == 10) {
 73c:	2a 30       	cpi	r18, 0x0A	; 10
 73e:	31 05       	cpc	r19, r1
 740:	e9 f4       	brne	.+58     	; 0x77c <_ZN5Print5printEli+0x7a>
    if (n < 0) {
 742:	77 ff       	sbrs	r23, 7
 744:	1a c0       	rjmp	.+52     	; 0x77a <_ZN5Print5printEli+0x78>
      int t = print('-');
 746:	6d e2       	ldi	r22, 0x2D	; 45
 748:	0e 94 20 03 	call	0x640	; 0x640 <_ZN5Print5printEc>
 74c:	8c 01       	movw	r16, r24
      n = -n;
 74e:	44 27       	eor	r20, r20
 750:	55 27       	eor	r21, r21
 752:	ba 01       	movw	r22, r20
 754:	4c 19       	sub	r20, r12
 756:	5d 09       	sbc	r21, r13
 758:	6e 09       	sbc	r22, r14
 75a:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
 75c:	2a e0       	ldi	r18, 0x0A	; 10
 75e:	ce 01       	movw	r24, r28
 760:	0e 94 2b 03 	call	0x656	; 0x656 <_ZN5Print11printNumberEmh>
 764:	80 0f       	add	r24, r16
 766:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 768:	df 91       	pop	r29
 76a:	cf 91       	pop	r28
 76c:	1f 91       	pop	r17
 76e:	0f 91       	pop	r16
 770:	ff 90       	pop	r15
 772:	ef 90       	pop	r14
 774:	df 90       	pop	r13
 776:	cf 90       	pop	r12
 778:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
 77a:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
 77c:	b7 01       	movw	r22, r14
 77e:	a6 01       	movw	r20, r12
 780:	ce 01       	movw	r24, r28
  }
}
 782:	df 91       	pop	r29
 784:	cf 91       	pop	r28
 786:	1f 91       	pop	r17
 788:	0f 91       	pop	r16
 78a:	ff 90       	pop	r15
 78c:	ef 90       	pop	r14
 78e:	df 90       	pop	r13
 790:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 792:	0c 94 2b 03 	jmp	0x656	; 0x656 <_ZN5Print11printNumberEmh>

00000796 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 796:	0f 93       	push	r16
 798:	1f 93       	push	r17
 79a:	cf 93       	push	r28
 79c:	df 93       	push	r29
 79e:	ec 01       	movw	r28, r24
 7a0:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 7a2:	ab 01       	movw	r20, r22
 7a4:	77 0f       	add	r23, r23
 7a6:	66 0b       	sbc	r22, r22
 7a8:	77 0b       	sbc	r23, r23
 7aa:	0e 94 81 03 	call	0x702	; 0x702 <_ZN5Print5printEli>
 7ae:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 7b0:	ce 01       	movw	r24, r28
 7b2:	0e 94 27 03 	call	0x64e	; 0x64e <_ZN5Print7printlnEv>
  return n;
}
 7b6:	80 0f       	add	r24, r16
 7b8:	91 1f       	adc	r25, r17
 7ba:	df 91       	pop	r29
 7bc:	cf 91       	pop	r28
 7be:	1f 91       	pop	r17
 7c0:	0f 91       	pop	r16
 7c2:	08 95       	ret

000007c4 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 7c4:	1f 92       	push	r1
 7c6:	0f 92       	push	r0
 7c8:	0f b6       	in	r0, 0x3f	; 63
 7ca:	0f 92       	push	r0
 7cc:	11 24       	eor	r1, r1
 7ce:	2f 93       	push	r18
 7d0:	3f 93       	push	r19
 7d2:	8f 93       	push	r24
 7d4:	9f 93       	push	r25
 7d6:	af 93       	push	r26
 7d8:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 7da:	80 91 cc 01 	lds	r24, 0x01CC
 7de:	90 91 cd 01 	lds	r25, 0x01CD
 7e2:	a0 91 ce 01 	lds	r26, 0x01CE
 7e6:	b0 91 cf 01 	lds	r27, 0x01CF
	unsigned char f = timer0_fract;
 7ea:	30 91 cb 01 	lds	r19, 0x01CB

	m += MILLIS_INC;
	f += FRACT_INC;
 7ee:	23 e0       	ldi	r18, 0x03	; 3
 7f0:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 7f2:	2d 37       	cpi	r18, 0x7D	; 125
 7f4:	20 f4       	brcc	.+8      	; 0x7fe <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 7f6:	01 96       	adiw	r24, 0x01	; 1
 7f8:	a1 1d       	adc	r26, r1
 7fa:	b1 1d       	adc	r27, r1
 7fc:	05 c0       	rjmp	.+10     	; 0x808 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 7fe:	26 e8       	ldi	r18, 0x86	; 134
 800:	23 0f       	add	r18, r19
		m += 1;
 802:	02 96       	adiw	r24, 0x02	; 2
 804:	a1 1d       	adc	r26, r1
 806:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 808:	20 93 cb 01 	sts	0x01CB, r18
	timer0_millis = m;
 80c:	80 93 cc 01 	sts	0x01CC, r24
 810:	90 93 cd 01 	sts	0x01CD, r25
 814:	a0 93 ce 01 	sts	0x01CE, r26
 818:	b0 93 cf 01 	sts	0x01CF, r27
	timer0_overflow_count++;
 81c:	80 91 d0 01 	lds	r24, 0x01D0
 820:	90 91 d1 01 	lds	r25, 0x01D1
 824:	a0 91 d2 01 	lds	r26, 0x01D2
 828:	b0 91 d3 01 	lds	r27, 0x01D3
 82c:	01 96       	adiw	r24, 0x01	; 1
 82e:	a1 1d       	adc	r26, r1
 830:	b1 1d       	adc	r27, r1
 832:	80 93 d0 01 	sts	0x01D0, r24
 836:	90 93 d1 01 	sts	0x01D1, r25
 83a:	a0 93 d2 01 	sts	0x01D2, r26
 83e:	b0 93 d3 01 	sts	0x01D3, r27
}
 842:	bf 91       	pop	r27
 844:	af 91       	pop	r26
 846:	9f 91       	pop	r25
 848:	8f 91       	pop	r24
 84a:	3f 91       	pop	r19
 84c:	2f 91       	pop	r18
 84e:	0f 90       	pop	r0
 850:	0f be       	out	0x3f, r0	; 63
 852:	0f 90       	pop	r0
 854:	1f 90       	pop	r1
 856:	18 95       	reti

00000858 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 858:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 85a:	84 b5       	in	r24, 0x24	; 36
 85c:	82 60       	ori	r24, 0x02	; 2
 85e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 860:	84 b5       	in	r24, 0x24	; 36
 862:	81 60       	ori	r24, 0x01	; 1
 864:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 866:	85 b5       	in	r24, 0x25	; 37
 868:	82 60       	ori	r24, 0x02	; 2
 86a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 86c:	85 b5       	in	r24, 0x25	; 37
 86e:	81 60       	ori	r24, 0x01	; 1
 870:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 872:	ee e6       	ldi	r30, 0x6E	; 110
 874:	f0 e0       	ldi	r31, 0x00	; 0
 876:	80 81       	ld	r24, Z
 878:	81 60       	ori	r24, 0x01	; 1
 87a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 87c:	e1 e8       	ldi	r30, 0x81	; 129
 87e:	f0 e0       	ldi	r31, 0x00	; 0
 880:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 882:	80 81       	ld	r24, Z
 884:	82 60       	ori	r24, 0x02	; 2
 886:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 888:	80 81       	ld	r24, Z
 88a:	81 60       	ori	r24, 0x01	; 1
 88c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 88e:	e0 e8       	ldi	r30, 0x80	; 128
 890:	f0 e0       	ldi	r31, 0x00	; 0
 892:	80 81       	ld	r24, Z
 894:	81 60       	ori	r24, 0x01	; 1
 896:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 898:	e1 eb       	ldi	r30, 0xB1	; 177
 89a:	f0 e0       	ldi	r31, 0x00	; 0
 89c:	80 81       	ld	r24, Z
 89e:	84 60       	ori	r24, 0x04	; 4
 8a0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 8a2:	e0 eb       	ldi	r30, 0xB0	; 176
 8a4:	f0 e0       	ldi	r31, 0x00	; 0
 8a6:	80 81       	ld	r24, Z
 8a8:	81 60       	ori	r24, 0x01	; 1
 8aa:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 8ac:	ea e7       	ldi	r30, 0x7A	; 122
 8ae:	f0 e0       	ldi	r31, 0x00	; 0
 8b0:	80 81       	ld	r24, Z
 8b2:	84 60       	ori	r24, 0x04	; 4
 8b4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 8b6:	80 81       	ld	r24, Z
 8b8:	82 60       	ori	r24, 0x02	; 2
 8ba:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 8bc:	80 81       	ld	r24, Z
 8be:	81 60       	ori	r24, 0x01	; 1
 8c0:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 8c2:	80 81       	ld	r24, Z
 8c4:	80 68       	ori	r24, 0x80	; 128
 8c6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 8c8:	10 92 c1 00 	sts	0x00C1, r1
 8cc:	08 95       	ret

000008ce <__vector_13>:
/** Don't add an extra SCLK pulse after switching from dot-correction mode. */
static uint8_t firstGSInput;

/** Interrupt called after an XLAT pulse to prevent more XLAT pulses. */
ISR(TIMER1_OVF_vect)
{
 8ce:	1f 92       	push	r1
 8d0:	0f 92       	push	r0
 8d2:	0f b6       	in	r0, 0x3f	; 63
 8d4:	0f 92       	push	r0
 8d6:	11 24       	eor	r1, r1
 8d8:	2f 93       	push	r18
 8da:	3f 93       	push	r19
 8dc:	4f 93       	push	r20
 8de:	5f 93       	push	r21
 8e0:	6f 93       	push	r22
 8e2:	7f 93       	push	r23
 8e4:	8f 93       	push	r24
 8e6:	9f 93       	push	r25
 8e8:	af 93       	push	r26
 8ea:	bf 93       	push	r27
 8ec:	ef 93       	push	r30
 8ee:	ff 93       	push	r31
    disable_XLAT_pulses();
 8f0:	80 e2       	ldi	r24, 0x20	; 32
 8f2:	80 93 80 00 	sts	0x0080, r24
    clear_XLAT_interrupt();
 8f6:	10 92 6f 00 	sts	0x006F, r1
    tlc_needXLAT = 0;
 8fa:	10 92 f0 01 	sts	0x01F0, r1
    if (tlc_onUpdateFinished) {
 8fe:	80 91 ee 01 	lds	r24, 0x01EE
 902:	90 91 ef 01 	lds	r25, 0x01EF
 906:	89 2b       	or	r24, r25
 908:	31 f0       	breq	.+12     	; 0x916 <__stack+0x17>
        sei();
 90a:	78 94       	sei
        tlc_onUpdateFinished();
 90c:	e0 91 ee 01 	lds	r30, 0x01EE
 910:	f0 91 ef 01 	lds	r31, 0x01EF
 914:	09 95       	icall
    }
}
 916:	ff 91       	pop	r31
 918:	ef 91       	pop	r30
 91a:	bf 91       	pop	r27
 91c:	af 91       	pop	r26
 91e:	9f 91       	pop	r25
 920:	8f 91       	pop	r24
 922:	7f 91       	pop	r23
 924:	6f 91       	pop	r22
 926:	5f 91       	pop	r21
 928:	4f 91       	pop	r20
 92a:	3f 91       	pop	r19
 92c:	2f 91       	pop	r18
 92e:	0f 90       	pop	r0
 930:	0f be       	out	0x3f, r0	; 63
 932:	0f 90       	pop	r0
 934:	1f 90       	pop	r1
 936:	18 95       	reti

00000938 <_ZN7Tlc59403setEhj>:
           channel 0, OUT0 of the next TLC is channel 16, etc.
    \param value (0-4095).  The grayscale value, 4095 is maximum.
    \see get */
void Tlc5940::set(TLC_CHANNEL_TYPE channel, uint16_t value)
{
    TLC_CHANNEL_TYPE index8 = (NUM_TLCS * 16 - 1) - channel;
 938:	8f e0       	ldi	r24, 0x0F	; 15
 93a:	86 1b       	sub	r24, r22
    uint8_t *index12p = tlc_GSData + ((((uint16_t)index8) * 3) >> 1);
 93c:	93 e0       	ldi	r25, 0x03	; 3
 93e:	89 9f       	mul	r24, r25
 940:	f0 01       	movw	r30, r0
 942:	11 24       	eor	r1, r1
 944:	f6 95       	lsr	r31
 946:	e7 95       	ror	r30
 948:	ea 52       	subi	r30, 0x2A	; 42
 94a:	fe 4f       	sbci	r31, 0xFE	; 254
    if (index8 & 1) { // starts in the middle
 94c:	80 ff       	sbrs	r24, 0
 94e:	05 c0       	rjmp	.+10     	; 0x95a <_ZN7Tlc59403setEhj+0x22>
                      // first 4 bits intact | 4 top bits of value
        *index12p = (*index12p & 0xF0) | (value >> 8);
 950:	80 81       	ld	r24, Z
 952:	80 7f       	andi	r24, 0xF0	; 240
 954:	85 2b       	or	r24, r21
 956:	80 83       	st	Z, r24
 958:	0c c0       	rjmp	.+24     	; 0x972 <_ZN7Tlc59403setEhj+0x3a>
                      // 8 lower bits of value
        *(++index12p) = value & 0xFF;
    } else { // starts clean
                      // 8 upper bits of value
        *(index12p++) = value >> 4;
 95a:	ca 01       	movw	r24, r20
 95c:	24 e0       	ldi	r18, 0x04	; 4
 95e:	96 95       	lsr	r25
 960:	87 95       	ror	r24
 962:	2a 95       	dec	r18
 964:	e1 f7       	brne	.-8      	; 0x95e <_ZN7Tlc59403setEhj+0x26>
 966:	80 83       	st	Z, r24
                      // 4 lower bits of value | last 4 bits intact
        *index12p = ((uint8_t)(value << 4)) | (*index12p & 0xF);
 968:	81 81       	ldd	r24, Z+1	; 0x01
 96a:	8f 70       	andi	r24, 0x0F	; 15
 96c:	42 95       	swap	r20
 96e:	40 7f       	andi	r20, 0xF0	; 240
 970:	48 2b       	or	r20, r24
 972:	41 83       	std	Z+1, r20	; 0x01
 974:	08 95       	ret

00000976 <_ZN7Tlc59406setAllEj>:

/** Sets all channels to value.
    \param value grayscale value (0 - 4095) */
void Tlc5940::setAll(uint16_t value)
{
    uint8_t firstByte = value >> 4;
 976:	cb 01       	movw	r24, r22
 978:	24 e0       	ldi	r18, 0x04	; 4
 97a:	96 95       	lsr	r25
 97c:	87 95       	ror	r24
 97e:	2a 95       	dec	r18
 980:	e1 f7       	brne	.-8      	; 0x97a <_ZN7Tlc59406setAllEj+0x4>
 982:	98 2f       	mov	r25, r24
    uint8_t secondByte = (value << 4) | (value >> 8);
 984:	26 2f       	mov	r18, r22
 986:	86 2f       	mov	r24, r22
 988:	82 95       	swap	r24
 98a:	80 7f       	andi	r24, 0xF0	; 240
 98c:	87 2b       	or	r24, r23
    uint8_t *p = tlc_GSData;
 98e:	e6 ed       	ldi	r30, 0xD6	; 214
 990:	f1 e0       	ldi	r31, 0x01	; 1
    while (p < tlc_GSData + NUM_TLCS * 24) {
        *p++ = firstByte;
 992:	90 83       	st	Z, r25
        *p++ = secondByte;
 994:	81 83       	std	Z+1, r24	; 0x01
 996:	33 96       	adiw	r30, 0x03	; 3
 998:	df 01       	movw	r26, r30
 99a:	11 97       	sbiw	r26, 0x01	; 1
        *p++ = (uint8_t)value;
 99c:	2c 93       	st	X, r18
void Tlc5940::setAll(uint16_t value)
{
    uint8_t firstByte = value >> 4;
    uint8_t secondByte = (value << 4) | (value >> 8);
    uint8_t *p = tlc_GSData;
    while (p < tlc_GSData + NUM_TLCS * 24) {
 99e:	31 e0       	ldi	r19, 0x01	; 1
 9a0:	ee 3e       	cpi	r30, 0xEE	; 238
 9a2:	f3 07       	cpc	r31, r19
 9a4:	b0 f3       	brcs	.-20     	; 0x992 <_ZN7Tlc59406setAllEj+0x1c>
        *p++ = firstByte;
        *p++ = secondByte;
        *p++ = (uint8_t)value;
    }
}
 9a6:	08 95       	ret

000009a8 <_ZN7Tlc59405clearEv>:
/** Clears the grayscale data array, #tlc_GSData, but does not shift in any
    data.  This call should be followed by update() if you are turning off
    all the outputs. */
void Tlc5940::clear(void)
{
    setAll(0);
 9a8:	60 e0       	ldi	r22, 0x00	; 0
 9aa:	70 e0       	ldi	r23, 0x00	; 0
 9ac:	0c 94 bb 04 	jmp	0x976	; 0x976 <_ZN7Tlc59406setAllEj>

000009b0 <_Z15tlc_shift8_initv>:
#elif DATA_TRANSFER_MODE == TLC_SPI

/** Initializes the SPI module to double speed (f_osc / 2) */
void tlc_shift8_init(void)
{
    SIN_DDR    |= _BV(SIN_PIN);    // SPI MOSI as output
 9b0:	23 9a       	sbi	0x04, 3	; 4
    SCLK_DDR   |= _BV(SCLK_PIN);   // SPI SCK as output
 9b2:	25 9a       	sbi	0x04, 5	; 4
    TLC_SS_DDR |= _BV(TLC_SS_PIN); // SPI SS as output
 9b4:	22 9a       	sbi	0x04, 2	; 4

    SCLK_PORT &= ~_BV(SCLK_PIN);
 9b6:	2d 98       	cbi	0x05, 5	; 5

    SPSR = _BV(SPI2X); // double speed (f_osc / 2)
 9b8:	81 e0       	ldi	r24, 0x01	; 1
 9ba:	8d bd       	out	0x2d, r24	; 45
    SPCR = _BV(SPE)    // enable SPI
         | _BV(MSTR);  // master mode
 9bc:	80 e5       	ldi	r24, 0x50	; 80
 9be:	8c bd       	out	0x2c, r24	; 44
 9c0:	08 95       	ret

000009c2 <_Z10tlc_shift8h>:
}

/** Shifts out a byte, MSB first */
void tlc_shift8(uint8_t byte)
{
    SPDR = byte; // starts transmission
 9c2:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & _BV(SPIF)))
 9c4:	0d b4       	in	r0, 0x2d	; 45
 9c6:	07 fe       	sbrs	r0, 7
 9c8:	fd cf       	rjmp	.-6      	; 0x9c4 <_Z10tlc_shift8h+0x2>
        ; // wait for transmission complete
}
 9ca:	08 95       	ret

000009cc <_ZN7Tlc59406updateEv>:
    or
    \code while(tlc_needXLAT); \endcode
    \returns 1 if there is data waiting to be latched, 0 if data was
             successfully shifted in */
uint8_t Tlc5940::update(void)
{
 9cc:	1f 93       	push	r17
 9ce:	cf 93       	push	r28
 9d0:	df 93       	push	r29
    if (tlc_needXLAT) {
 9d2:	10 91 f0 01 	lds	r17, 0x01F0
 9d6:	11 11       	cpse	r17, r1
 9d8:	29 c0       	rjmp	.+82     	; 0xa2c <_ZN7Tlc59406updateEv+0x60>
        return 1;
    }
    disable_XLAT_pulses();
 9da:	80 e2       	ldi	r24, 0x20	; 32
 9dc:	80 93 80 00 	sts	0x0080, r24
    if (firstGSInput) {
 9e0:	80 91 d5 01 	lds	r24, 0x01D5
 9e4:	88 23       	and	r24, r24
 9e6:	29 f0       	breq	.+10     	; 0x9f2 <_ZN7Tlc59406updateEv+0x26>
        // adds an extra SCLK pulse unless we've just set dot-correction data
        firstGSInput = 0;
 9e8:	10 92 d5 01 	sts	0x01D5, r1
    or
    \code while(tlc_needXLAT); \endcode
    \returns 1 if there is data waiting to be latched, 0 if data was
             successfully shifted in */
uint8_t Tlc5940::update(void)
{
 9ec:	c6 ed       	ldi	r28, 0xD6	; 214
 9ee:	d1 e0       	ldi	r29, 0x01	; 1
 9f0:	03 c0       	rjmp	.+6      	; 0x9f8 <_ZN7Tlc59406updateEv+0x2c>
    disable_XLAT_pulses();
    if (firstGSInput) {
        // adds an extra SCLK pulse unless we've just set dot-correction data
        firstGSInput = 0;
    } else {
        pulse_pin(SCLK_PORT, SCLK_PIN);
 9f2:	2d 9a       	sbi	0x05, 5	; 5
 9f4:	2d 98       	cbi	0x05, 5	; 5
 9f6:	fa cf       	rjmp	.-12     	; 0x9ec <_ZN7Tlc59406updateEv+0x20>
    }
    uint8_t *p = tlc_GSData;
    while (p < tlc_GSData + NUM_TLCS * 24) {
        tlc_shift8(*p++);
 9f8:	88 81       	ld	r24, Y
 9fa:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <_Z10tlc_shift8h>
        tlc_shift8(*p++);
 9fe:	89 81       	ldd	r24, Y+1	; 0x01
 a00:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <_Z10tlc_shift8h>
 a04:	23 96       	adiw	r28, 0x03	; 3
 a06:	fe 01       	movw	r30, r28
 a08:	31 97       	sbiw	r30, 0x01	; 1
        tlc_shift8(*p++);
 a0a:	80 81       	ld	r24, Z
 a0c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <_Z10tlc_shift8h>
        firstGSInput = 0;
    } else {
        pulse_pin(SCLK_PORT, SCLK_PIN);
    }
    uint8_t *p = tlc_GSData;
    while (p < tlc_GSData + NUM_TLCS * 24) {
 a10:	81 e0       	ldi	r24, 0x01	; 1
 a12:	ce 3e       	cpi	r28, 0xEE	; 238
 a14:	d8 07       	cpc	r29, r24
 a16:	80 f3       	brcs	.-32     	; 0x9f8 <_ZN7Tlc59406updateEv+0x2c>
        tlc_shift8(*p++);
        tlc_shift8(*p++);
        tlc_shift8(*p++);
    }
    tlc_needXLAT = 1;
 a18:	81 e0       	ldi	r24, 0x01	; 1
 a1a:	80 93 f0 01 	sts	0x01F0, r24
    enable_XLAT_pulses();
 a1e:	90 ea       	ldi	r25, 0xA0	; 160
 a20:	90 93 80 00 	sts	0x0080, r25
    set_XLAT_interrupt();
 a24:	b0 9a       	sbi	0x16, 0	; 22
 a26:	80 93 6f 00 	sts	0x006F, r24
 a2a:	01 c0       	rjmp	.+2      	; 0xa2e <_ZN7Tlc59406updateEv+0x62>
    \returns 1 if there is data waiting to be latched, 0 if data was
             successfully shifted in */
uint8_t Tlc5940::update(void)
{
    if (tlc_needXLAT) {
        return 1;
 a2c:	11 e0       	ldi	r17, 0x01	; 1
    }
    tlc_needXLAT = 1;
    enable_XLAT_pulses();
    set_XLAT_interrupt();
    return 0;
}
 a2e:	81 2f       	mov	r24, r17
 a30:	df 91       	pop	r29
 a32:	cf 91       	pop	r28
 a34:	1f 91       	pop	r17
 a36:	08 95       	ret

00000a38 <_ZN7Tlc59404initEj>:
/** Pin i/o and Timer setup.  The grayscale register will be reset to all
    zeros, or whatever initialValue is set to and the Timers will start.
    \param initialValue = 0, optional parameter specifing the inital startup
           value */
void Tlc5940::init(uint16_t initialValue)
{
 a38:	0f 93       	push	r16
 a3a:	1f 93       	push	r17
 a3c:	cf 93       	push	r28
 a3e:	df 93       	push	r29
 a40:	00 d0       	rcall	.+0      	; 0xa42 <_ZN7Tlc59404initEj+0xa>
 a42:	cd b7       	in	r28, 0x3d	; 61
 a44:	de b7       	in	r29, 0x3e	; 62
 a46:	8c 01       	movw	r16, r24
    /* Pin Setup */
    XLAT_DDR |= _BV(XLAT_PIN);
 a48:	21 9a       	sbi	0x04, 1	; 4
    BLANK_DDR |= _BV(BLANK_PIN);
 a4a:	22 9a       	sbi	0x04, 2	; 4
    GSCLK_DDR |= _BV(GSCLK_PIN);
 a4c:	53 9a       	sbi	0x0a, 3	; 10
#endif
#if XERR_ENABLED
    XERR_DDR &= ~_BV(XERR_PIN);   // XERR as input
    XERR_PORT |= _BV(XERR_PIN);   // enable pull-up resistor
#endif
    BLANK_PORT |= _BV(BLANK_PIN); // leave blank high (until the timers start)
 a4e:	2a 9a       	sbi	0x05, 2	; 5

    tlc_shift8_init();
 a50:	69 83       	std	Y+1, r22	; 0x01
 a52:	7a 83       	std	Y+2, r23	; 0x02
 a54:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <_Z15tlc_shift8_initv>

    setAll(initialValue);
 a58:	69 81       	ldd	r22, Y+1	; 0x01
 a5a:	7a 81       	ldd	r23, Y+2	; 0x02
 a5c:	c8 01       	movw	r24, r16
 a5e:	0e 94 bb 04 	call	0x976	; 0x976 <_ZN7Tlc59406setAllEj>
    update();
 a62:	c8 01       	movw	r24, r16
 a64:	0e 94 e6 04 	call	0x9cc	; 0x9cc <_ZN7Tlc59406updateEv>
    disable_XLAT_pulses();
 a68:	e0 e8       	ldi	r30, 0x80	; 128
 a6a:	f0 e0       	ldi	r31, 0x00	; 0
 a6c:	80 e2       	ldi	r24, 0x20	; 32
 a6e:	80 83       	st	Z, r24
    clear_XLAT_interrupt();
 a70:	10 92 6f 00 	sts	0x006F, r1
    tlc_needXLAT = 0;
 a74:	10 92 f0 01 	sts	0x01F0, r1
    pulse_pin(XLAT_PORT, XLAT_PIN);
 a78:	29 9a       	sbi	0x05, 1	; 5
 a7a:	29 98       	cbi	0x05, 1	; 5


    /* Timer Setup */

    /* Timer 1 - BLANK / XLAT */
    TCCR1A = _BV(COM1B1);  // non inverting, output on OC1B, BLANK
 a7c:	80 83       	st	Z, r24
    TCCR1B = _BV(WGM13);   // Phase/freq correct PWM, ICR1 top
 a7e:	e1 e8       	ldi	r30, 0x81	; 129
 a80:	f0 e0       	ldi	r31, 0x00	; 0
 a82:	80 e1       	ldi	r24, 0x10	; 16
 a84:	80 83       	st	Z, r24
    OCR1A = 1;             // duty factor on OC1A, XLAT is inside BLANK
 a86:	81 e0       	ldi	r24, 0x01	; 1
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	90 93 89 00 	sts	0x0089, r25
 a8e:	80 93 88 00 	sts	0x0088, r24
    OCR1B = 2;             // duty factor on BLANK (larger than OCR1A (XLAT))
 a92:	82 e0       	ldi	r24, 0x02	; 2
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	90 93 8b 00 	sts	0x008B, r25
 a9a:	80 93 8a 00 	sts	0x008A, r24
    ICR1 = TLC_PWM_PERIOD; // see tlc_config.h
 a9e:	80 e0       	ldi	r24, 0x00	; 0
 aa0:	90 e2       	ldi	r25, 0x20	; 32
 aa2:	90 93 87 00 	sts	0x0087, r25
 aa6:	80 93 86 00 	sts	0x0086, r24
           | _BV(WGM33);      // Fast pwm with ICR3 top
#else
    TCCR2A = _BV(COM2B1)      // set on BOTTOM, clear on OCR2A (non-inverting),
                              // output on OC2B
           | _BV(WGM21)       // Fast pwm with OCR2A top
           | _BV(WGM20);      // Fast pwm with OCR2A top
 aaa:	83 e2       	ldi	r24, 0x23	; 35
 aac:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = _BV(WGM22);      // Fast pwm with OCR2A top
 ab0:	a1 eb       	ldi	r26, 0xB1	; 177
 ab2:	b0 e0       	ldi	r27, 0x00	; 0
 ab4:	88 e0       	ldi	r24, 0x08	; 8
 ab6:	8c 93       	st	X, r24
    OCR2B = 0;                // duty factor (as short a pulse as possible)
 ab8:	10 92 b4 00 	sts	0x00B4, r1
    OCR2A = TLC_GSCLK_PERIOD; // see tlc_config.h
 abc:	83 e0       	ldi	r24, 0x03	; 3
 abe:	80 93 b3 00 	sts	0x00B3, r24
    TCCR2B |= _BV(CS20);      // no prescale, (start pwm output)
 ac2:	8c 91       	ld	r24, X
 ac4:	81 60       	ori	r24, 0x01	; 1
 ac6:	8c 93       	st	X, r24
#endif
    TCCR1B |= _BV(CS10);      // no prescale, (start pwm output)
 ac8:	80 81       	ld	r24, Z
 aca:	81 60       	ori	r24, 0x01	; 1
 acc:	80 83       	st	Z, r24
    update();
 ace:	c8 01       	movw	r24, r16
}
 ad0:	0f 90       	pop	r0
 ad2:	0f 90       	pop	r0
 ad4:	df 91       	pop	r29
 ad6:	cf 91       	pop	r28
 ad8:	1f 91       	pop	r17
 ada:	0f 91       	pop	r16
    OCR2B = 0;                // duty factor (as short a pulse as possible)
    OCR2A = TLC_GSCLK_PERIOD; // see tlc_config.h
    TCCR2B |= _BV(CS20);      // no prescale, (start pwm output)
#endif
    TCCR1B |= _BV(CS10);      // no prescale, (start pwm output)
    update();
 adc:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <_ZN7Tlc59406updateEv>

00000ae0 <__divmodhi4>:
 ae0:	97 fb       	bst	r25, 7
 ae2:	07 2e       	mov	r0, r23
 ae4:	16 f4       	brtc	.+4      	; 0xaea <__divmodhi4+0xa>
 ae6:	00 94       	com	r0
 ae8:	07 d0       	rcall	.+14     	; 0xaf8 <__divmodhi4_neg1>
 aea:	77 fd       	sbrc	r23, 7
 aec:	09 d0       	rcall	.+18     	; 0xb00 <__divmodhi4_neg2>
 aee:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__udivmodhi4>
 af2:	07 fc       	sbrc	r0, 7
 af4:	05 d0       	rcall	.+10     	; 0xb00 <__divmodhi4_neg2>
 af6:	3e f4       	brtc	.+14     	; 0xb06 <__divmodhi4_exit>

00000af8 <__divmodhi4_neg1>:
 af8:	90 95       	com	r25
 afa:	81 95       	neg	r24
 afc:	9f 4f       	sbci	r25, 0xFF	; 255
 afe:	08 95       	ret

00000b00 <__divmodhi4_neg2>:
 b00:	70 95       	com	r23
 b02:	61 95       	neg	r22
 b04:	7f 4f       	sbci	r23, 0xFF	; 255

00000b06 <__divmodhi4_exit>:
 b06:	08 95       	ret

00000b08 <__udivmodsi4>:
 b08:	a1 e2       	ldi	r26, 0x21	; 33
 b0a:	1a 2e       	mov	r1, r26
 b0c:	aa 1b       	sub	r26, r26
 b0e:	bb 1b       	sub	r27, r27
 b10:	fd 01       	movw	r30, r26
 b12:	0d c0       	rjmp	.+26     	; 0xb2e <__udivmodsi4_ep>

00000b14 <__udivmodsi4_loop>:
 b14:	aa 1f       	adc	r26, r26
 b16:	bb 1f       	adc	r27, r27
 b18:	ee 1f       	adc	r30, r30
 b1a:	ff 1f       	adc	r31, r31
 b1c:	a2 17       	cp	r26, r18
 b1e:	b3 07       	cpc	r27, r19
 b20:	e4 07       	cpc	r30, r20
 b22:	f5 07       	cpc	r31, r21
 b24:	20 f0       	brcs	.+8      	; 0xb2e <__udivmodsi4_ep>
 b26:	a2 1b       	sub	r26, r18
 b28:	b3 0b       	sbc	r27, r19
 b2a:	e4 0b       	sbc	r30, r20
 b2c:	f5 0b       	sbc	r31, r21

00000b2e <__udivmodsi4_ep>:
 b2e:	66 1f       	adc	r22, r22
 b30:	77 1f       	adc	r23, r23
 b32:	88 1f       	adc	r24, r24
 b34:	99 1f       	adc	r25, r25
 b36:	1a 94       	dec	r1
 b38:	69 f7       	brne	.-38     	; 0xb14 <__udivmodsi4_loop>
 b3a:	60 95       	com	r22
 b3c:	70 95       	com	r23
 b3e:	80 95       	com	r24
 b40:	90 95       	com	r25
 b42:	9b 01       	movw	r18, r22
 b44:	ac 01       	movw	r20, r24
 b46:	bd 01       	movw	r22, r26
 b48:	cf 01       	movw	r24, r30
 b4a:	08 95       	ret

00000b4c <__udivmodhi4>:
 b4c:	aa 1b       	sub	r26, r26
 b4e:	bb 1b       	sub	r27, r27
 b50:	51 e1       	ldi	r21, 0x11	; 17
 b52:	07 c0       	rjmp	.+14     	; 0xb62 <__udivmodhi4_ep>

00000b54 <__udivmodhi4_loop>:
 b54:	aa 1f       	adc	r26, r26
 b56:	bb 1f       	adc	r27, r27
 b58:	a6 17       	cp	r26, r22
 b5a:	b7 07       	cpc	r27, r23
 b5c:	10 f0       	brcs	.+4      	; 0xb62 <__udivmodhi4_ep>
 b5e:	a6 1b       	sub	r26, r22
 b60:	b7 0b       	sbc	r27, r23

00000b62 <__udivmodhi4_ep>:
 b62:	88 1f       	adc	r24, r24
 b64:	99 1f       	adc	r25, r25
 b66:	5a 95       	dec	r21
 b68:	a9 f7       	brne	.-22     	; 0xb54 <__udivmodhi4_loop>
 b6a:	80 95       	com	r24
 b6c:	90 95       	com	r25
 b6e:	bc 01       	movw	r22, r24
 b70:	cd 01       	movw	r24, r26
 b72:	08 95       	ret

00000b74 <__tablejump2__>:
 b74:	ee 0f       	add	r30, r30
 b76:	ff 1f       	adc	r31, r31
 b78:	05 90       	lpm	r0, Z+
 b7a:	f4 91       	lpm	r31, Z
 b7c:	e0 2d       	mov	r30, r0
 b7e:	09 94       	ijmp

00000b80 <_exit>:
 b80:	f8 94       	cli

00000b82 <__stop_program>:
 b82:	ff cf       	rjmp	.-2      	; 0xb82 <__stop_program>
