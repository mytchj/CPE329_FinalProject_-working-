
CPE329_FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000ac4  00000b58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ac4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c3  00800128  00800128  00000b80  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b80  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00000bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006966  00000000  00000000  00000e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013fa  00000000  00000000  000077de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010d9  00000000  00000000  00008bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007a8  00000000  00000000  00009cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a3a  00000000  00000000  0000a45c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b79  00000000  00000000  0000be96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000ea0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 07 04 	jmp	0x80e	; 0x80e <__vector_13>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 82 03 	jmp	0x704	; 0x704 <__vector_16>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__vector_18>
  4c:	0c 94 30 02 	jmp	0x460	; 0x460 <__vector_19>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	56 02       	muls	r21, r22

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e4 ec       	ldi	r30, 0xC4	; 196
  7e:	fa e0       	ldi	r31, 0x0A	; 10
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a8 32       	cpi	r26, 0x28	; 40
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	a8 e2       	ldi	r26, 0x28	; 40
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	ab 3e       	cpi	r26, 0xEB	; 235
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 5a 05 	call	0xab4	; 0xab4 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 60 05 	jmp	0xac0	; 0xac0 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:

int GS = TOP_GS; //0   // LED greyscale
int chan = 0; // LED channel

int main(void){
  init();         // initializations for Arduino.h
  be:	0e 94 cc 03 	call	0x798	; 0x798 <init>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
  c2:	26 e0       	ldi	r18, 0x06	; 6
  c4:	40 e8       	ldi	r20, 0x80	; 128
  c6:	55 e2       	ldi	r21, 0x25	; 37
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	88 e2       	ldi	r24, 0x28	; 40
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	0e 94 99 01 	call	0x332	; 0x332 <_ZN14HardwareSerial5beginEmh>
  Serial.begin(9600);   // set baud rate for serial com
  Tlc.init();       // initialize the TLC chip
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	8e ec       	ldi	r24, 0xCE	; 206
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	0e 94 bc 04 	call	0x978	; 0x978 <_ZN7Tlc59404initEj>
   
   // Turn on full, then fade off
   while(GS >= 0){
  e0:	80 91 00 01 	lds	r24, 0x0100
  e4:	90 91 01 01 	lds	r25, 0x0101
  e8:	97 fd       	sbrc	r25, 7
  ea:	12 c0       	rjmp	.+36     	; 0x110 <main+0x52>
      setAllLEDs(GS);
  ec:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z10setAllLEDsi>
      GS--;         // increment GS
  f0:	80 91 00 01 	lds	r24, 0x0100
  f4:	90 91 01 01 	lds	r25, 0x0101
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	90 93 01 01 	sts	0x0101, r25
  fe:	80 93 00 01 	sts	0x0100, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	8f e1       	ldi	r24, 0x1F	; 31
 104:	9e e4       	ldi	r25, 0x4E	; 78
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <main+0x48>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x4e>
 10c:	00 00       	nop
 10e:	e8 cf       	rjmp	.-48     	; 0xe0 <main+0x22>
      _delay_ms(GS_DELAY);  // delay GS color
   }
   
   // Temporary idea: Determine the bottom/back LED, send it to rgbUtil so that
   //  it knows which led to cycle to next
   setBottomLED(0);
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 a8 00 	call	0x150	; 0x150 <_Z12setBottomLEDi>
   
   //Infintely cycle an LED around the loop
   while (1) {
      nextLED();
 118:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z7nextLEDv>
#include "tmr_int_util.h"

int GS = TOP_GS; //0   // LED greyscale
int chan = 0; // LED channel

int main(void){
 11c:	fd cf       	rjmp	.-6      	; 0x118 <main+0x5a>

0000011e <_Z10setAllLEDsi>:
#define TOP_GS 1250

int bottomLED = -1;
int currentLED = -1;

void setAllLEDs(int gs) {
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	ec 01       	movw	r28, r24
   Serial.println(gs);   // print GS data to Serial window (BAUD =9600)
 124:	4a e0       	ldi	r20, 0x0A	; 10
 126:	50 e0       	ldi	r21, 0x00	; 0
 128:	bc 01       	movw	r22, r24
 12a:	88 e2       	ldi	r24, 0x28	; 40
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN5Print7printlnEii>
   Tlc.clear();      // clear TLC data
 132:	8e ec       	ldi	r24, 0xCE	; 206
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 74 04 	call	0x8e8	; 0x8e8 <_ZN7Tlc59405clearEv>
   Tlc.setAll(gs);     // set all TLC channel (15:0) to GS value
 13a:	be 01       	movw	r22, r28
 13c:	8e ec       	ldi	r24, 0xCE	; 206
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <_ZN7Tlc59406setAllEj>
   Tlc.update();     // send GS data to TLC5940
 144:	8e ec       	ldi	r24, 0xCE	; 206
 146:	91 e0       	ldi	r25, 0x01	; 1
}
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28

void setAllLEDs(int gs) {
   Serial.println(gs);   // print GS data to Serial window (BAUD =9600)
   Tlc.clear();      // clear TLC data
   Tlc.setAll(gs);     // set all TLC channel (15:0) to GS value
   Tlc.update();     // send GS data to TLC5940
 14c:	0c 94 86 04 	jmp	0x90c	; 0x90c <_ZN7Tlc59406updateEv>

00000150 <_Z12setBottomLEDi>:
}

/* Something else determines which LED is on the bottom in main */
void setBottomLED(int LED) {
   bottomLED = LED;
 150:	90 93 05 01 	sts	0x0105, r25
 154:	80 93 04 01 	sts	0x0104, r24
 158:	08 95       	ret

0000015a <_Z7nextLEDv>:
}

void nextLED() {
   if (currentLED < 0)
 15a:	80 91 02 01 	lds	r24, 0x0102
 15e:	90 91 03 01 	lds	r25, 0x0103
 162:	97 ff       	sbrs	r25, 7
 164:	08 c0       	rjmp	.+16     	; 0x176 <_Z7nextLEDv+0x1c>
      currentLED = bottomLED; // Definitely subject to change, just a placeholder
 166:	80 91 04 01 	lds	r24, 0x0104
 16a:	90 91 05 01 	lds	r25, 0x0105
 16e:	90 93 03 01 	sts	0x0103, r25
 172:	80 93 02 01 	sts	0x0102, r24
   
   Serial.println(TOP_GS);
 176:	4a e0       	ldi	r20, 0x0A	; 10
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	62 ee       	ldi	r22, 0xE2	; 226
 17c:	74 e0       	ldi	r23, 0x04	; 4
 17e:	88 e2       	ldi	r24, 0x28	; 40
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN5Print7printlnEii>
   Tlc.clear();
 186:	8e ec       	ldi	r24, 0xCE	; 206
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	0e 94 74 04 	call	0x8e8	; 0x8e8 <_ZN7Tlc59405clearEv>
   Tlc.set(currentLED, TOP_GS);
 18e:	42 ee       	ldi	r20, 0xE2	; 226
 190:	54 e0       	ldi	r21, 0x04	; 4
 192:	60 91 02 01 	lds	r22, 0x0102
 196:	8e ec       	ldi	r24, 0xCE	; 206
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	0e 94 3c 04 	call	0x878	; 0x878 <_ZN7Tlc59403setEhj>
   Tlc.update();
 19e:	8e ec       	ldi	r24, 0xCE	; 206
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	0e 94 86 04 	call	0x90c	; 0x90c <_ZN7Tlc59406updateEv>
   
   currentLED += DIRECTION * NUM_COLOR_CHANNELS;
 1a6:	80 91 02 01 	lds	r24, 0x0102
 1aa:	90 91 03 01 	lds	r25, 0x0103
 1ae:	01 96       	adiw	r24, 0x01	; 1
   currentLED %= NUM_LED_CHANNELS;
 1b0:	60 e1       	ldi	r22, 0x10	; 16
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	0e 94 10 05 	call	0xa20	; 0xa20 <__divmodhi4>
 1b8:	90 93 03 01 	sts	0x0103, r25
 1bc:	80 93 02 01 	sts	0x0102, r24
 1c0:	08 95       	ret

000001c2 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 1c2:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 1c4:	91 8d       	ldd	r25, Z+25	; 0x19
 1c6:	22 8d       	ldd	r18, Z+26	; 0x1a
 1c8:	89 2f       	mov	r24, r25
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	80 5c       	subi	r24, 0xC0	; 192
 1ce:	9f 4f       	sbci	r25, 0xFF	; 255
 1d0:	82 1b       	sub	r24, r18
 1d2:	91 09       	sbc	r25, r1
}
 1d4:	8f 73       	andi	r24, 0x3F	; 63
 1d6:	99 27       	eor	r25, r25
 1d8:	08 95       	ret

000001da <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 1da:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 1dc:	91 8d       	ldd	r25, Z+25	; 0x19
 1de:	82 8d       	ldd	r24, Z+26	; 0x1a
 1e0:	98 17       	cp	r25, r24
 1e2:	31 f0       	breq	.+12     	; 0x1f0 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 1e4:	82 8d       	ldd	r24, Z+26	; 0x1a
 1e6:	e8 0f       	add	r30, r24
 1e8:	f1 1d       	adc	r31, r1
 1ea:	85 8d       	ldd	r24, Z+29	; 0x1d
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 1f0:	8f ef       	ldi	r24, 0xFF	; 255
 1f2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 1f4:	08 95       	ret

000001f6 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 1f6:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 1f8:	91 8d       	ldd	r25, Z+25	; 0x19
 1fa:	82 8d       	ldd	r24, Z+26	; 0x1a
 1fc:	98 17       	cp	r25, r24
 1fe:	61 f0       	breq	.+24     	; 0x218 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 200:	82 8d       	ldd	r24, Z+26	; 0x1a
 202:	df 01       	movw	r26, r30
 204:	a8 0f       	add	r26, r24
 206:	b1 1d       	adc	r27, r1
 208:	5d 96       	adiw	r26, 0x1d	; 29
 20a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 20c:	92 8d       	ldd	r25, Z+26	; 0x1a
 20e:	9f 5f       	subi	r25, 0xFF	; 255
 210:	9f 73       	andi	r25, 0x3F	; 63
 212:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 218:	8f ef       	ldi	r24, 0xFF	; 255
 21a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 21c:	08 95       	ret

0000021e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 21e:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 220:	84 8d       	ldd	r24, Z+28	; 0x1c
 222:	df 01       	movw	r26, r30
 224:	a8 0f       	add	r26, r24
 226:	b1 1d       	adc	r27, r1
 228:	a3 5a       	subi	r26, 0xA3	; 163
 22a:	bf 4f       	sbci	r27, 0xFF	; 255
 22c:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 22e:	84 8d       	ldd	r24, Z+28	; 0x1c
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	8f 73       	andi	r24, 0x3F	; 63
 236:	99 27       	eor	r25, r25
 238:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 23a:	a6 89       	ldd	r26, Z+22	; 0x16
 23c:	b7 89       	ldd	r27, Z+23	; 0x17
 23e:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 240:	a0 89       	ldd	r26, Z+16	; 0x10
 242:	b1 89       	ldd	r27, Z+17	; 0x11
 244:	8c 91       	ld	r24, X
 246:	80 64       	ori	r24, 0x40	; 64
 248:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 24a:	93 8d       	ldd	r25, Z+27	; 0x1b
 24c:	84 8d       	ldd	r24, Z+28	; 0x1c
 24e:	98 13       	cpse	r25, r24
 250:	06 c0       	rjmp	.+12     	; 0x25e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 252:	02 88       	ldd	r0, Z+18	; 0x12
 254:	f3 89       	ldd	r31, Z+19	; 0x13
 256:	e0 2d       	mov	r30, r0
 258:	80 81       	ld	r24, Z
 25a:	8f 7d       	andi	r24, 0xDF	; 223
 25c:	80 83       	st	Z, r24
 25e:	08 95       	ret

00000260 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 266:	88 8d       	ldd	r24, Y+24	; 0x18
 268:	88 23       	and	r24, r24
 26a:	c9 f0       	breq	.+50     	; 0x29e <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 26c:	ea 89       	ldd	r30, Y+18	; 0x12
 26e:	fb 89       	ldd	r31, Y+19	; 0x13
 270:	80 81       	ld	r24, Z
 272:	85 fd       	sbrc	r24, 5
 274:	05 c0       	rjmp	.+10     	; 0x280 <_ZN14HardwareSerial5flushEv+0x20>
 276:	a8 89       	ldd	r26, Y+16	; 0x10
 278:	b9 89       	ldd	r27, Y+17	; 0x11
 27a:	8c 91       	ld	r24, X
 27c:	86 fd       	sbrc	r24, 6
 27e:	0f c0       	rjmp	.+30     	; 0x29e <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	07 fc       	sbrc	r0, 7
 284:	f5 cf       	rjmp	.-22     	; 0x270 <_ZN14HardwareSerial5flushEv+0x10>
 286:	80 81       	ld	r24, Z
 288:	85 ff       	sbrs	r24, 5
 28a:	f2 cf       	rjmp	.-28     	; 0x270 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 28c:	a8 89       	ldd	r26, Y+16	; 0x10
 28e:	b9 89       	ldd	r27, Y+17	; 0x11
 290:	8c 91       	ld	r24, X
 292:	85 ff       	sbrs	r24, 5
 294:	ed cf       	rjmp	.-38     	; 0x270 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 296:	ce 01       	movw	r24, r28
 298:	0e 94 0f 01 	call	0x21e	; 0x21e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 29c:	e7 cf       	rjmp	.-50     	; 0x26c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	08 95       	ret

000002a4 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 2a4:	ef 92       	push	r14
 2a6:	ff 92       	push	r15
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	ec 01       	movw	r28, r24
  _written = true;
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 2b6:	9b 8d       	ldd	r25, Y+27	; 0x1b
 2b8:	8c 8d       	ldd	r24, Y+28	; 0x1c
 2ba:	98 13       	cpse	r25, r24
 2bc:	05 c0       	rjmp	.+10     	; 0x2c8 <_ZN14HardwareSerial5writeEh+0x24>
 2be:	e8 89       	ldd	r30, Y+16	; 0x10
 2c0:	f9 89       	ldd	r31, Y+17	; 0x11
 2c2:	80 81       	ld	r24, Z
 2c4:	85 fd       	sbrc	r24, 5
 2c6:	24 c0       	rjmp	.+72     	; 0x310 <_ZN14HardwareSerial5writeEh+0x6c>
 2c8:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 2ca:	0b 8d       	ldd	r16, Y+27	; 0x1b
 2cc:	10 e0       	ldi	r17, 0x00	; 0
 2ce:	0f 5f       	subi	r16, 0xFF	; 255
 2d0:	1f 4f       	sbci	r17, 0xFF	; 255
 2d2:	0f 73       	andi	r16, 0x3F	; 63
 2d4:	11 27       	eor	r17, r17
 2d6:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 2d8:	8c 8d       	ldd	r24, Y+28	; 0x1c
 2da:	e8 12       	cpse	r14, r24
 2dc:	0c c0       	rjmp	.+24     	; 0x2f6 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	07 fc       	sbrc	r0, 7
 2e2:	fa cf       	rjmp	.-12     	; 0x2d8 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 2e4:	e8 89       	ldd	r30, Y+16	; 0x10
 2e6:	f9 89       	ldd	r31, Y+17	; 0x11
 2e8:	80 81       	ld	r24, Z
 2ea:	85 ff       	sbrs	r24, 5
 2ec:	f5 cf       	rjmp	.-22     	; 0x2d8 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 2ee:	ce 01       	movw	r24, r28
 2f0:	0e 94 0f 01 	call	0x21e	; 0x21e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 2f4:	f1 cf       	rjmp	.-30     	; 0x2d8 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 2f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
 2f8:	fe 01       	movw	r30, r28
 2fa:	e8 0f       	add	r30, r24
 2fc:	f1 1d       	adc	r31, r1
 2fe:	e3 5a       	subi	r30, 0xA3	; 163
 300:	ff 4f       	sbci	r31, 0xFF	; 255
 302:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 304:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 306:	ea 89       	ldd	r30, Y+18	; 0x12
 308:	fb 89       	ldd	r31, Y+19	; 0x13
 30a:	80 81       	ld	r24, Z
 30c:	80 62       	ori	r24, 0x20	; 32
 30e:	07 c0       	rjmp	.+14     	; 0x31e <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 310:	ee 89       	ldd	r30, Y+22	; 0x16
 312:	ff 89       	ldd	r31, Y+23	; 0x17
 314:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 316:	e8 89       	ldd	r30, Y+16	; 0x10
 318:	f9 89       	ldd	r31, Y+17	; 0x11
 31a:	80 81       	ld	r24, Z
 31c:	80 64       	ori	r24, 0x40	; 64
 31e:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	0f 91       	pop	r16
 32c:	ff 90       	pop	r15
 32e:	ef 90       	pop	r14
 330:	08 95       	ret

00000332 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 332:	cf 92       	push	r12
 334:	df 92       	push	r13
 336:	ef 92       	push	r14
 338:	ff 92       	push	r15
 33a:	1f 93       	push	r17
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	ec 01       	movw	r28, r24
 342:	6a 01       	movw	r12, r20
 344:	7b 01       	movw	r14, r22
 346:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 348:	e8 89       	ldd	r30, Y+16	; 0x10
 34a:	f9 89       	ldd	r31, Y+17	; 0x11
 34c:	82 e0       	ldi	r24, 0x02	; 2
 34e:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 350:	41 15       	cp	r20, r1
 352:	51 4e       	sbci	r21, 0xE1	; 225
 354:	61 05       	cpc	r22, r1
 356:	71 05       	cpc	r23, r1
 358:	b1 f0       	breq	.+44     	; 0x386 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	79 e0       	ldi	r23, 0x09	; 9
 35e:	8d e3       	ldi	r24, 0x3D	; 61
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	a7 01       	movw	r20, r14
 364:	96 01       	movw	r18, r12
 366:	0e 94 24 05 	call	0xa48	; 0xa48 <__udivmodsi4>
 36a:	da 01       	movw	r26, r20
 36c:	c9 01       	movw	r24, r18
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	a1 09       	sbc	r26, r1
 372:	b1 09       	sbc	r27, r1
 374:	b6 95       	lsr	r27
 376:	a7 95       	ror	r26
 378:	97 95       	ror	r25
 37a:	87 95       	ror	r24
 37c:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 37e:	41 15       	cp	r20, r1
 380:	80 e1       	ldi	r24, 0x10	; 16
 382:	58 07       	cpc	r21, r24
 384:	a8 f0       	brcs	.+42     	; 0x3b0 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 386:	e8 89       	ldd	r30, Y+16	; 0x10
 388:	f9 89       	ldd	r31, Y+17	; 0x11
 38a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 38c:	60 e8       	ldi	r22, 0x80	; 128
 38e:	74 e8       	ldi	r23, 0x84	; 132
 390:	8e e1       	ldi	r24, 0x1E	; 30
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	a7 01       	movw	r20, r14
 396:	96 01       	movw	r18, r12
 398:	0e 94 24 05 	call	0xa48	; 0xa48 <__udivmodsi4>
 39c:	ba 01       	movw	r22, r20
 39e:	a9 01       	movw	r20, r18
 3a0:	41 50       	subi	r20, 0x01	; 1
 3a2:	51 09       	sbc	r21, r1
 3a4:	61 09       	sbc	r22, r1
 3a6:	71 09       	sbc	r23, r1
 3a8:	76 95       	lsr	r23
 3aa:	67 95       	ror	r22
 3ac:	57 95       	ror	r21
 3ae:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 3b0:	ec 85       	ldd	r30, Y+12	; 0x0c
 3b2:	fd 85       	ldd	r31, Y+13	; 0x0d
 3b4:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
 3b6:	ee 85       	ldd	r30, Y+14	; 0x0e
 3b8:	ff 85       	ldd	r31, Y+15	; 0x0f
 3ba:	40 83       	st	Z, r20

  _written = false;
 3bc:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 3be:	ec 89       	ldd	r30, Y+20	; 0x14
 3c0:	fd 89       	ldd	r31, Y+21	; 0x15
 3c2:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 3c4:	ea 89       	ldd	r30, Y+18	; 0x12
 3c6:	fb 89       	ldd	r31, Y+19	; 0x13
 3c8:	80 81       	ld	r24, Z
 3ca:	80 61       	ori	r24, 0x10	; 16
 3cc:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 3ce:	ea 89       	ldd	r30, Y+18	; 0x12
 3d0:	fb 89       	ldd	r31, Y+19	; 0x13
 3d2:	80 81       	ld	r24, Z
 3d4:	88 60       	ori	r24, 0x08	; 8
 3d6:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 3d8:	ea 89       	ldd	r30, Y+18	; 0x12
 3da:	fb 89       	ldd	r31, Y+19	; 0x13
 3dc:	80 81       	ld	r24, Z
 3de:	80 68       	ori	r24, 0x80	; 128
 3e0:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 3e2:	ea 89       	ldd	r30, Y+18	; 0x12
 3e4:	fb 89       	ldd	r31, Y+19	; 0x13
 3e6:	80 81       	ld	r24, Z
 3e8:	8f 7d       	andi	r24, 0xDF	; 223
 3ea:	80 83       	st	Z, r24
}
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	1f 91       	pop	r17
 3f2:	ff 90       	pop	r15
 3f4:	ef 90       	pop	r14
 3f6:	df 90       	pop	r13
 3f8:	cf 90       	pop	r12
 3fa:	08 95       	ret

000003fc <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 3fc:	1f 92       	push	r1
 3fe:	0f 92       	push	r0
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	0f 92       	push	r0
 404:	11 24       	eor	r1, r1
 406:	2f 93       	push	r18
 408:	8f 93       	push	r24
 40a:	9f 93       	push	r25
 40c:	ef 93       	push	r30
 40e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 410:	e0 91 38 01 	lds	r30, 0x0138
 414:	f0 91 39 01 	lds	r31, 0x0139
 418:	80 81       	ld	r24, Z
 41a:	e0 91 3e 01 	lds	r30, 0x013E
 41e:	f0 91 3f 01 	lds	r31, 0x013F
 422:	82 fd       	sbrc	r24, 2
 424:	12 c0       	rjmp	.+36     	; 0x44a <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 426:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 428:	80 91 41 01 	lds	r24, 0x0141
 42c:	8f 5f       	subi	r24, 0xFF	; 255
 42e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 430:	20 91 42 01 	lds	r18, 0x0142
 434:	82 17       	cp	r24, r18
 436:	51 f0       	breq	.+20     	; 0x44c <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 438:	e0 91 41 01 	lds	r30, 0x0141
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	e8 5d       	subi	r30, 0xD8	; 216
 440:	fe 4f       	sbci	r31, 0xFE	; 254
 442:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 444:	80 93 41 01 	sts	0x0141, r24
 448:	01 c0       	rjmp	.+2      	; 0x44c <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 44a:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 44c:	ff 91       	pop	r31
 44e:	ef 91       	pop	r30
 450:	9f 91       	pop	r25
 452:	8f 91       	pop	r24
 454:	2f 91       	pop	r18
 456:	0f 90       	pop	r0
 458:	0f be       	out	0x3f, r0	; 63
 45a:	0f 90       	pop	r0
 45c:	1f 90       	pop	r1
 45e:	18 95       	reti

00000460 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 460:	1f 92       	push	r1
 462:	0f 92       	push	r0
 464:	0f b6       	in	r0, 0x3f	; 63
 466:	0f 92       	push	r0
 468:	11 24       	eor	r1, r1
 46a:	2f 93       	push	r18
 46c:	3f 93       	push	r19
 46e:	4f 93       	push	r20
 470:	5f 93       	push	r21
 472:	6f 93       	push	r22
 474:	7f 93       	push	r23
 476:	8f 93       	push	r24
 478:	9f 93       	push	r25
 47a:	af 93       	push	r26
 47c:	bf 93       	push	r27
 47e:	ef 93       	push	r30
 480:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 482:	88 e2       	ldi	r24, 0x28	; 40
 484:	91 e0       	ldi	r25, 0x01	; 1
 486:	0e 94 0f 01 	call	0x21e	; 0x21e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 48a:	ff 91       	pop	r31
 48c:	ef 91       	pop	r30
 48e:	bf 91       	pop	r27
 490:	af 91       	pop	r26
 492:	9f 91       	pop	r25
 494:	8f 91       	pop	r24
 496:	7f 91       	pop	r23
 498:	6f 91       	pop	r22
 49a:	5f 91       	pop	r21
 49c:	4f 91       	pop	r20
 49e:	3f 91       	pop	r19
 4a0:	2f 91       	pop	r18
 4a2:	0f 90       	pop	r0
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	0f 90       	pop	r0
 4a8:	1f 90       	pop	r1
 4aa:	18 95       	reti

000004ac <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 4ac:	e8 e2       	ldi	r30, 0x28	; 40
 4ae:	f1 e0       	ldi	r31, 0x01	; 1
 4b0:	13 82       	std	Z+3, r1	; 0x03
 4b2:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 4b4:	88 ee       	ldi	r24, 0xE8	; 232
 4b6:	93 e0       	ldi	r25, 0x03	; 3
 4b8:	a0 e0       	ldi	r26, 0x00	; 0
 4ba:	b0 e0       	ldi	r27, 0x00	; 0
 4bc:	84 83       	std	Z+4, r24	; 0x04
 4be:	95 83       	std	Z+5, r25	; 0x05
 4c0:	a6 83       	std	Z+6, r26	; 0x06
 4c2:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 4c4:	8a e0       	ldi	r24, 0x0A	; 10
 4c6:	91 e0       	ldi	r25, 0x01	; 1
 4c8:	91 83       	std	Z+1, r25	; 0x01
 4ca:	80 83       	st	Z, r24
 4cc:	85 ec       	ldi	r24, 0xC5	; 197
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	95 87       	std	Z+13, r25	; 0x0d
 4d2:	84 87       	std	Z+12, r24	; 0x0c
 4d4:	84 ec       	ldi	r24, 0xC4	; 196
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	97 87       	std	Z+15, r25	; 0x0f
 4da:	86 87       	std	Z+14, r24	; 0x0e
 4dc:	80 ec       	ldi	r24, 0xC0	; 192
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	91 8b       	std	Z+17, r25	; 0x11
 4e2:	80 8b       	std	Z+16, r24	; 0x10
 4e4:	81 ec       	ldi	r24, 0xC1	; 193
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	93 8b       	std	Z+19, r25	; 0x13
 4ea:	82 8b       	std	Z+18, r24	; 0x12
 4ec:	82 ec       	ldi	r24, 0xC2	; 194
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	95 8b       	std	Z+21, r25	; 0x15
 4f2:	84 8b       	std	Z+20, r24	; 0x14
 4f4:	86 ec       	ldi	r24, 0xC6	; 198
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	97 8b       	std	Z+23, r25	; 0x17
 4fa:	86 8b       	std	Z+22, r24	; 0x16
 4fc:	11 8e       	std	Z+25, r1	; 0x19
 4fe:	12 8e       	std	Z+26, r1	; 0x1a
 500:	13 8e       	std	Z+27, r1	; 0x1b
 502:	14 8e       	std	Z+28, r1	; 0x1c
 504:	08 95       	ret

00000506 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 506:	cf 92       	push	r12
 508:	df 92       	push	r13
 50a:	ef 92       	push	r14
 50c:	ff 92       	push	r15
 50e:	0f 93       	push	r16
 510:	1f 93       	push	r17
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
 516:	6c 01       	movw	r12, r24
 518:	eb 01       	movw	r28, r22
 51a:	7b 01       	movw	r14, r22
 51c:	e4 0e       	add	r14, r20
 51e:	f5 1e       	adc	r15, r21
  size_t n = 0;
 520:	00 e0       	ldi	r16, 0x00	; 0
 522:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
 524:	ce 15       	cp	r28, r14
 526:	df 05       	cpc	r29, r15
 528:	61 f0       	breq	.+24     	; 0x542 <_ZN5Print5writeEPKhj+0x3c>
    n += write(*buffer++);
 52a:	69 91       	ld	r22, Y+
 52c:	d6 01       	movw	r26, r12
 52e:	ed 91       	ld	r30, X+
 530:	fc 91       	ld	r31, X
 532:	01 90       	ld	r0, Z+
 534:	f0 81       	ld	r31, Z
 536:	e0 2d       	mov	r30, r0
 538:	c6 01       	movw	r24, r12
 53a:	09 95       	icall
 53c:	08 0f       	add	r16, r24
 53e:	19 1f       	adc	r17, r25
 540:	f1 cf       	rjmp	.-30     	; 0x524 <_ZN5Print5writeEPKhj+0x1e>
  }
  return n;
}
 542:	c8 01       	movw	r24, r16
 544:	df 91       	pop	r29
 546:	cf 91       	pop	r28
 548:	1f 91       	pop	r17
 54a:	0f 91       	pop	r16
 54c:	ff 90       	pop	r15
 54e:	ef 90       	pop	r14
 550:	df 90       	pop	r13
 552:	cf 90       	pop	r12
 554:	08 95       	ret

00000556 <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 556:	61 15       	cp	r22, r1
 558:	71 05       	cpc	r23, r1
 55a:	79 f0       	breq	.+30     	; 0x57a <_ZN5Print5writeEPKc+0x24>
      return write((const uint8_t *)str, strlen(str));
 55c:	fb 01       	movw	r30, r22
 55e:	01 90       	ld	r0, Z+
 560:	00 20       	and	r0, r0
 562:	e9 f7       	brne	.-6      	; 0x55e <_ZN5Print5writeEPKc+0x8>
 564:	31 97       	sbiw	r30, 0x01	; 1
 566:	af 01       	movw	r20, r30
 568:	46 1b       	sub	r20, r22
 56a:	57 0b       	sbc	r21, r23
 56c:	dc 01       	movw	r26, r24
 56e:	ed 91       	ld	r30, X+
 570:	fc 91       	ld	r31, X
 572:	02 80       	ldd	r0, Z+2	; 0x02
 574:	f3 81       	ldd	r31, Z+3	; 0x03
 576:	e0 2d       	mov	r30, r0
 578:	09 94       	ijmp
    }
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	08 95       	ret

00000580 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 580:	dc 01       	movw	r26, r24
 582:	ed 91       	ld	r30, X+
 584:	fc 91       	ld	r31, X
 586:	01 90       	ld	r0, Z+
 588:	f0 81       	ld	r31, Z
 58a:	e0 2d       	mov	r30, r0
 58c:	09 94       	ijmp

0000058e <_ZN5Print7printlnEv>:
  return x.printTo(*this);
}

size_t Print::println(void)
{
  return write("\r\n");
 58e:	66 e1       	ldi	r22, 0x16	; 22
 590:	71 e0       	ldi	r23, 0x01	; 1
 592:	0c 94 ab 02 	jmp	0x556	; 0x556 <_ZN5Print5writeEPKc>

00000596 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 596:	8f 92       	push	r8
 598:	9f 92       	push	r9
 59a:	af 92       	push	r10
 59c:	bf 92       	push	r11
 59e:	cf 92       	push	r12
 5a0:	df 92       	push	r13
 5a2:	ef 92       	push	r14
 5a4:	ff 92       	push	r15
 5a6:	0f 93       	push	r16
 5a8:	1f 93       	push	r17
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
 5ae:	cd b7       	in	r28, 0x3d	; 61
 5b0:	de b7       	in	r29, 0x3e	; 62
 5b2:	a1 97       	sbiw	r28, 0x21	; 33
 5b4:	0f b6       	in	r0, 0x3f	; 63
 5b6:	f8 94       	cli
 5b8:	de bf       	out	0x3e, r29	; 62
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	cd bf       	out	0x3d, r28	; 61
 5be:	6c 01       	movw	r12, r24
 5c0:	14 2f       	mov	r17, r20
 5c2:	e5 2f       	mov	r30, r21
 5c4:	cb 01       	movw	r24, r22
 5c6:	02 2f       	mov	r16, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 5c8:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 5ca:	22 30       	cpi	r18, 0x02	; 2
 5cc:	08 f4       	brcc	.+2      	; 0x5d0 <_ZN5Print11printNumberEmh+0x3a>
 5ce:	0a e0       	ldi	r16, 0x0A	; 10
 5d0:	7e 01       	movw	r14, r28
 5d2:	21 e2       	ldi	r18, 0x21	; 33
 5d4:	e2 0e       	add	r14, r18
 5d6:	f1 1c       	adc	r15, r1

  do {
    unsigned long m = n;
    n /= base;
 5d8:	80 2e       	mov	r8, r16
 5da:	91 2c       	mov	r9, r1
 5dc:	a1 2c       	mov	r10, r1
 5de:	b1 2c       	mov	r11, r1
 5e0:	61 2f       	mov	r22, r17
 5e2:	7e 2f       	mov	r23, r30
 5e4:	a5 01       	movw	r20, r10
 5e6:	94 01       	movw	r18, r8
 5e8:	0e 94 24 05 	call	0xa48	; 0xa48 <__udivmodsi4>
    char c = m - base * n;
 5ec:	02 9f       	mul	r16, r18
 5ee:	10 19       	sub	r17, r0
 5f0:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	e8 1a       	sub	r14, r24
 5f6:	f1 08       	sbc	r15, r1
 5f8:	1a 30       	cpi	r17, 0x0A	; 10
 5fa:	10 f4       	brcc	.+4      	; 0x600 <_ZN5Print11printNumberEmh+0x6a>
 5fc:	10 5d       	subi	r17, 0xD0	; 208
 5fe:	01 c0       	rjmp	.+2      	; 0x602 <_ZN5Print11printNumberEmh+0x6c>
 600:	19 5c       	subi	r17, 0xC9	; 201
 602:	f7 01       	movw	r30, r14
 604:	10 83       	st	Z, r17
 606:	12 2f       	mov	r17, r18
 608:	e3 2f       	mov	r30, r19
 60a:	ca 01       	movw	r24, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 60c:	23 2b       	or	r18, r19
 60e:	24 2b       	or	r18, r20
 610:	25 2b       	or	r18, r21
 612:	31 f7       	brne	.-52     	; 0x5e0 <_ZN5Print11printNumberEmh+0x4a>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 614:	b7 01       	movw	r22, r14
 616:	c6 01       	movw	r24, r12
 618:	0e 94 ab 02 	call	0x556	; 0x556 <_ZN5Print5writeEPKc>
}
 61c:	a1 96       	adiw	r28, 0x21	; 33
 61e:	0f b6       	in	r0, 0x3f	; 63
 620:	f8 94       	cli
 622:	de bf       	out	0x3e, r29	; 62
 624:	0f be       	out	0x3f, r0	; 63
 626:	cd bf       	out	0x3d, r28	; 61
 628:	df 91       	pop	r29
 62a:	cf 91       	pop	r28
 62c:	1f 91       	pop	r17
 62e:	0f 91       	pop	r16
 630:	ff 90       	pop	r15
 632:	ef 90       	pop	r14
 634:	df 90       	pop	r13
 636:	cf 90       	pop	r12
 638:	bf 90       	pop	r11
 63a:	af 90       	pop	r10
 63c:	9f 90       	pop	r9
 63e:	8f 90       	pop	r8
 640:	08 95       	ret

00000642 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 642:	cf 92       	push	r12
 644:	df 92       	push	r13
 646:	ef 92       	push	r14
 648:	ff 92       	push	r15
 64a:	0f 93       	push	r16
 64c:	1f 93       	push	r17
 64e:	cf 93       	push	r28
 650:	df 93       	push	r29
 652:	ec 01       	movw	r28, r24
 654:	6a 01       	movw	r12, r20
 656:	7b 01       	movw	r14, r22
  if (base == 0) {
 658:	21 15       	cp	r18, r1
 65a:	31 05       	cpc	r19, r1
 65c:	79 f4       	brne	.+30     	; 0x67c <_ZN5Print5printEli+0x3a>
    return write(n);
 65e:	e8 81       	ld	r30, Y
 660:	f9 81       	ldd	r31, Y+1	; 0x01
 662:	01 90       	ld	r0, Z+
 664:	f0 81       	ld	r31, Z
 666:	e0 2d       	mov	r30, r0
 668:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 66a:	df 91       	pop	r29
 66c:	cf 91       	pop	r28
 66e:	1f 91       	pop	r17
 670:	0f 91       	pop	r16
 672:	ff 90       	pop	r15
 674:	ef 90       	pop	r14
 676:	df 90       	pop	r13
 678:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 67a:	09 94       	ijmp
  } else if (base == 10) {
 67c:	2a 30       	cpi	r18, 0x0A	; 10
 67e:	31 05       	cpc	r19, r1
 680:	e9 f4       	brne	.+58     	; 0x6bc <_ZN5Print5printEli+0x7a>
    if (n < 0) {
 682:	77 ff       	sbrs	r23, 7
 684:	1a c0       	rjmp	.+52     	; 0x6ba <_ZN5Print5printEli+0x78>
      int t = print('-');
 686:	6d e2       	ldi	r22, 0x2D	; 45
 688:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN5Print5printEc>
 68c:	8c 01       	movw	r16, r24
      n = -n;
 68e:	44 27       	eor	r20, r20
 690:	55 27       	eor	r21, r21
 692:	ba 01       	movw	r22, r20
 694:	4c 19       	sub	r20, r12
 696:	5d 09       	sbc	r21, r13
 698:	6e 09       	sbc	r22, r14
 69a:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
 69c:	2a e0       	ldi	r18, 0x0A	; 10
 69e:	ce 01       	movw	r24, r28
 6a0:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN5Print11printNumberEmh>
 6a4:	80 0f       	add	r24, r16
 6a6:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 6a8:	df 91       	pop	r29
 6aa:	cf 91       	pop	r28
 6ac:	1f 91       	pop	r17
 6ae:	0f 91       	pop	r16
 6b0:	ff 90       	pop	r15
 6b2:	ef 90       	pop	r14
 6b4:	df 90       	pop	r13
 6b6:	cf 90       	pop	r12
 6b8:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
 6ba:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
 6bc:	b7 01       	movw	r22, r14
 6be:	a6 01       	movw	r20, r12
 6c0:	ce 01       	movw	r24, r28
  }
}
 6c2:	df 91       	pop	r29
 6c4:	cf 91       	pop	r28
 6c6:	1f 91       	pop	r17
 6c8:	0f 91       	pop	r16
 6ca:	ff 90       	pop	r15
 6cc:	ef 90       	pop	r14
 6ce:	df 90       	pop	r13
 6d0:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 6d2:	0c 94 cb 02 	jmp	0x596	; 0x596 <_ZN5Print11printNumberEmh>

000006d6 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 6d6:	0f 93       	push	r16
 6d8:	1f 93       	push	r17
 6da:	cf 93       	push	r28
 6dc:	df 93       	push	r29
 6de:	ec 01       	movw	r28, r24
 6e0:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 6e2:	ab 01       	movw	r20, r22
 6e4:	77 0f       	add	r23, r23
 6e6:	66 0b       	sbc	r22, r22
 6e8:	77 0b       	sbc	r23, r23
 6ea:	0e 94 21 03 	call	0x642	; 0x642 <_ZN5Print5printEli>
 6ee:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 6f0:	ce 01       	movw	r24, r28
 6f2:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN5Print7printlnEv>
  return n;
}
 6f6:	80 0f       	add	r24, r16
 6f8:	91 1f       	adc	r25, r17
 6fa:	df 91       	pop	r29
 6fc:	cf 91       	pop	r28
 6fe:	1f 91       	pop	r17
 700:	0f 91       	pop	r16
 702:	08 95       	ret

00000704 <__vector_16>:
 704:	1f 92       	push	r1
 706:	0f 92       	push	r0
 708:	0f b6       	in	r0, 0x3f	; 63
 70a:	0f 92       	push	r0
 70c:	11 24       	eor	r1, r1
 70e:	2f 93       	push	r18
 710:	3f 93       	push	r19
 712:	8f 93       	push	r24
 714:	9f 93       	push	r25
 716:	af 93       	push	r26
 718:	bf 93       	push	r27
 71a:	80 91 c6 01 	lds	r24, 0x01C6
 71e:	90 91 c7 01 	lds	r25, 0x01C7
 722:	a0 91 c8 01 	lds	r26, 0x01C8
 726:	b0 91 c9 01 	lds	r27, 0x01C9
 72a:	30 91 c5 01 	lds	r19, 0x01C5
 72e:	23 e0       	ldi	r18, 0x03	; 3
 730:	23 0f       	add	r18, r19
 732:	2d 37       	cpi	r18, 0x7D	; 125
 734:	20 f4       	brcc	.+8      	; 0x73e <__vector_16+0x3a>
 736:	01 96       	adiw	r24, 0x01	; 1
 738:	a1 1d       	adc	r26, r1
 73a:	b1 1d       	adc	r27, r1
 73c:	05 c0       	rjmp	.+10     	; 0x748 <__vector_16+0x44>
 73e:	26 e8       	ldi	r18, 0x86	; 134
 740:	23 0f       	add	r18, r19
 742:	02 96       	adiw	r24, 0x02	; 2
 744:	a1 1d       	adc	r26, r1
 746:	b1 1d       	adc	r27, r1
 748:	20 93 c5 01 	sts	0x01C5, r18
 74c:	80 93 c6 01 	sts	0x01C6, r24
 750:	90 93 c7 01 	sts	0x01C7, r25
 754:	a0 93 c8 01 	sts	0x01C8, r26
 758:	b0 93 c9 01 	sts	0x01C9, r27
 75c:	80 91 ca 01 	lds	r24, 0x01CA
 760:	90 91 cb 01 	lds	r25, 0x01CB
 764:	a0 91 cc 01 	lds	r26, 0x01CC
 768:	b0 91 cd 01 	lds	r27, 0x01CD
 76c:	01 96       	adiw	r24, 0x01	; 1
 76e:	a1 1d       	adc	r26, r1
 770:	b1 1d       	adc	r27, r1
 772:	80 93 ca 01 	sts	0x01CA, r24
 776:	90 93 cb 01 	sts	0x01CB, r25
 77a:	a0 93 cc 01 	sts	0x01CC, r26
 77e:	b0 93 cd 01 	sts	0x01CD, r27
 782:	bf 91       	pop	r27
 784:	af 91       	pop	r26
 786:	9f 91       	pop	r25
 788:	8f 91       	pop	r24
 78a:	3f 91       	pop	r19
 78c:	2f 91       	pop	r18
 78e:	0f 90       	pop	r0
 790:	0f be       	out	0x3f, r0	; 63
 792:	0f 90       	pop	r0
 794:	1f 90       	pop	r1
 796:	18 95       	reti

00000798 <init>:
 798:	78 94       	sei
 79a:	84 b5       	in	r24, 0x24	; 36
 79c:	82 60       	ori	r24, 0x02	; 2
 79e:	84 bd       	out	0x24, r24	; 36
 7a0:	84 b5       	in	r24, 0x24	; 36
 7a2:	81 60       	ori	r24, 0x01	; 1
 7a4:	84 bd       	out	0x24, r24	; 36
 7a6:	85 b5       	in	r24, 0x25	; 37
 7a8:	82 60       	ori	r24, 0x02	; 2
 7aa:	85 bd       	out	0x25, r24	; 37
 7ac:	85 b5       	in	r24, 0x25	; 37
 7ae:	81 60       	ori	r24, 0x01	; 1
 7b0:	85 bd       	out	0x25, r24	; 37
 7b2:	ee e6       	ldi	r30, 0x6E	; 110
 7b4:	f0 e0       	ldi	r31, 0x00	; 0
 7b6:	80 81       	ld	r24, Z
 7b8:	81 60       	ori	r24, 0x01	; 1
 7ba:	80 83       	st	Z, r24
 7bc:	e1 e8       	ldi	r30, 0x81	; 129
 7be:	f0 e0       	ldi	r31, 0x00	; 0
 7c0:	10 82       	st	Z, r1
 7c2:	80 81       	ld	r24, Z
 7c4:	82 60       	ori	r24, 0x02	; 2
 7c6:	80 83       	st	Z, r24
 7c8:	80 81       	ld	r24, Z
 7ca:	81 60       	ori	r24, 0x01	; 1
 7cc:	80 83       	st	Z, r24
 7ce:	e0 e8       	ldi	r30, 0x80	; 128
 7d0:	f0 e0       	ldi	r31, 0x00	; 0
 7d2:	80 81       	ld	r24, Z
 7d4:	81 60       	ori	r24, 0x01	; 1
 7d6:	80 83       	st	Z, r24
 7d8:	e1 eb       	ldi	r30, 0xB1	; 177
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	80 81       	ld	r24, Z
 7de:	84 60       	ori	r24, 0x04	; 4
 7e0:	80 83       	st	Z, r24
 7e2:	e0 eb       	ldi	r30, 0xB0	; 176
 7e4:	f0 e0       	ldi	r31, 0x00	; 0
 7e6:	80 81       	ld	r24, Z
 7e8:	81 60       	ori	r24, 0x01	; 1
 7ea:	80 83       	st	Z, r24
 7ec:	ea e7       	ldi	r30, 0x7A	; 122
 7ee:	f0 e0       	ldi	r31, 0x00	; 0
 7f0:	80 81       	ld	r24, Z
 7f2:	84 60       	ori	r24, 0x04	; 4
 7f4:	80 83       	st	Z, r24
 7f6:	80 81       	ld	r24, Z
 7f8:	82 60       	ori	r24, 0x02	; 2
 7fa:	80 83       	st	Z, r24
 7fc:	80 81       	ld	r24, Z
 7fe:	81 60       	ori	r24, 0x01	; 1
 800:	80 83       	st	Z, r24
 802:	80 81       	ld	r24, Z
 804:	80 68       	ori	r24, 0x80	; 128
 806:	80 83       	st	Z, r24
 808:	10 92 c1 00 	sts	0x00C1, r1
 80c:	08 95       	ret

0000080e <__vector_13>:
/** Don't add an extra SCLK pulse after switching from dot-correction mode. */
static uint8_t firstGSInput;

/** Interrupt called after an XLAT pulse to prevent more XLAT pulses. */
ISR(TIMER1_OVF_vect)
{
 80e:	1f 92       	push	r1
 810:	0f 92       	push	r0
 812:	0f b6       	in	r0, 0x3f	; 63
 814:	0f 92       	push	r0
 816:	11 24       	eor	r1, r1
 818:	2f 93       	push	r18
 81a:	3f 93       	push	r19
 81c:	4f 93       	push	r20
 81e:	5f 93       	push	r21
 820:	6f 93       	push	r22
 822:	7f 93       	push	r23
 824:	8f 93       	push	r24
 826:	9f 93       	push	r25
 828:	af 93       	push	r26
 82a:	bf 93       	push	r27
 82c:	ef 93       	push	r30
 82e:	ff 93       	push	r31
    disable_XLAT_pulses();
 830:	80 e2       	ldi	r24, 0x20	; 32
 832:	80 93 80 00 	sts	0x0080, r24
    clear_XLAT_interrupt();
 836:	10 92 6f 00 	sts	0x006F, r1
    tlc_needXLAT = 0;
 83a:	10 92 ea 01 	sts	0x01EA, r1
    if (tlc_onUpdateFinished) {
 83e:	80 91 e8 01 	lds	r24, 0x01E8
 842:	90 91 e9 01 	lds	r25, 0x01E9
 846:	89 2b       	or	r24, r25
 848:	31 f0       	breq	.+12     	; 0x856 <__vector_13+0x48>
        sei();
 84a:	78 94       	sei
        tlc_onUpdateFinished();
 84c:	e0 91 e8 01 	lds	r30, 0x01E8
 850:	f0 91 e9 01 	lds	r31, 0x01E9
 854:	09 95       	icall
    }
}
 856:	ff 91       	pop	r31
 858:	ef 91       	pop	r30
 85a:	bf 91       	pop	r27
 85c:	af 91       	pop	r26
 85e:	9f 91       	pop	r25
 860:	8f 91       	pop	r24
 862:	7f 91       	pop	r23
 864:	6f 91       	pop	r22
 866:	5f 91       	pop	r21
 868:	4f 91       	pop	r20
 86a:	3f 91       	pop	r19
 86c:	2f 91       	pop	r18
 86e:	0f 90       	pop	r0
 870:	0f be       	out	0x3f, r0	; 63
 872:	0f 90       	pop	r0
 874:	1f 90       	pop	r1
 876:	18 95       	reti

00000878 <_ZN7Tlc59403setEhj>:
           channel 0, OUT0 of the next TLC is channel 16, etc.
    \param value (0-4095).  The grayscale value, 4095 is maximum.
    \see get */
void Tlc5940::set(TLC_CHANNEL_TYPE channel, uint16_t value)
{
    TLC_CHANNEL_TYPE index8 = (NUM_TLCS * 16 - 1) - channel;
 878:	8f e0       	ldi	r24, 0x0F	; 15
 87a:	86 1b       	sub	r24, r22
    uint8_t *index12p = tlc_GSData + ((((uint16_t)index8) * 3) >> 1);
 87c:	93 e0       	ldi	r25, 0x03	; 3
 87e:	89 9f       	mul	r24, r25
 880:	f0 01       	movw	r30, r0
 882:	11 24       	eor	r1, r1
 884:	f6 95       	lsr	r31
 886:	e7 95       	ror	r30
 888:	e0 53       	subi	r30, 0x30	; 48
 88a:	fe 4f       	sbci	r31, 0xFE	; 254
    if (index8 & 1) { // starts in the middle
 88c:	80 ff       	sbrs	r24, 0
 88e:	05 c0       	rjmp	.+10     	; 0x89a <_ZN7Tlc59403setEhj+0x22>
                      // first 4 bits intact | 4 top bits of value
        *index12p = (*index12p & 0xF0) | (value >> 8);
 890:	80 81       	ld	r24, Z
 892:	80 7f       	andi	r24, 0xF0	; 240
 894:	85 2b       	or	r24, r21
 896:	80 83       	st	Z, r24
 898:	0c c0       	rjmp	.+24     	; 0x8b2 <_ZN7Tlc59403setEhj+0x3a>
                      // 8 lower bits of value
        *(++index12p) = value & 0xFF;
    } else { // starts clean
                      // 8 upper bits of value
        *(index12p++) = value >> 4;
 89a:	ca 01       	movw	r24, r20
 89c:	24 e0       	ldi	r18, 0x04	; 4
 89e:	96 95       	lsr	r25
 8a0:	87 95       	ror	r24
 8a2:	2a 95       	dec	r18
 8a4:	e1 f7       	brne	.-8      	; 0x89e <_ZN7Tlc59403setEhj+0x26>
 8a6:	80 83       	st	Z, r24
                      // 4 lower bits of value | last 4 bits intact
        *index12p = ((uint8_t)(value << 4)) | (*index12p & 0xF);
 8a8:	81 81       	ldd	r24, Z+1	; 0x01
 8aa:	8f 70       	andi	r24, 0x0F	; 15
 8ac:	42 95       	swap	r20
 8ae:	40 7f       	andi	r20, 0xF0	; 240
 8b0:	48 2b       	or	r20, r24
 8b2:	41 83       	std	Z+1, r20	; 0x01
 8b4:	08 95       	ret

000008b6 <_ZN7Tlc59406setAllEj>:

/** Sets all channels to value.
    \param value grayscale value (0 - 4095) */
void Tlc5940::setAll(uint16_t value)
{
    uint8_t firstByte = value >> 4;
 8b6:	cb 01       	movw	r24, r22
 8b8:	24 e0       	ldi	r18, 0x04	; 4
 8ba:	96 95       	lsr	r25
 8bc:	87 95       	ror	r24
 8be:	2a 95       	dec	r18
 8c0:	e1 f7       	brne	.-8      	; 0x8ba <_ZN7Tlc59406setAllEj+0x4>
 8c2:	98 2f       	mov	r25, r24
    uint8_t secondByte = (value << 4) | (value >> 8);
 8c4:	26 2f       	mov	r18, r22
 8c6:	86 2f       	mov	r24, r22
 8c8:	82 95       	swap	r24
 8ca:	80 7f       	andi	r24, 0xF0	; 240
 8cc:	87 2b       	or	r24, r23
    uint8_t *p = tlc_GSData;
 8ce:	e0 ed       	ldi	r30, 0xD0	; 208
 8d0:	f1 e0       	ldi	r31, 0x01	; 1
    while (p < tlc_GSData + NUM_TLCS * 24) {
        *p++ = firstByte;
 8d2:	90 83       	st	Z, r25
        *p++ = secondByte;
 8d4:	81 83       	std	Z+1, r24	; 0x01
 8d6:	33 96       	adiw	r30, 0x03	; 3
 8d8:	df 01       	movw	r26, r30
 8da:	11 97       	sbiw	r26, 0x01	; 1
        *p++ = (uint8_t)value;
 8dc:	2c 93       	st	X, r18
void Tlc5940::setAll(uint16_t value)
{
    uint8_t firstByte = value >> 4;
    uint8_t secondByte = (value << 4) | (value >> 8);
    uint8_t *p = tlc_GSData;
    while (p < tlc_GSData + NUM_TLCS * 24) {
 8de:	31 e0       	ldi	r19, 0x01	; 1
 8e0:	e8 3e       	cpi	r30, 0xE8	; 232
 8e2:	f3 07       	cpc	r31, r19
 8e4:	b0 f3       	brcs	.-20     	; 0x8d2 <_ZN7Tlc59406setAllEj+0x1c>
        *p++ = firstByte;
        *p++ = secondByte;
        *p++ = (uint8_t)value;
    }
}
 8e6:	08 95       	ret

000008e8 <_ZN7Tlc59405clearEv>:
/** Clears the grayscale data array, #tlc_GSData, but does not shift in any
    data.  This call should be followed by update() if you are turning off
    all the outputs. */
void Tlc5940::clear(void)
{
    setAll(0);
 8e8:	60 e0       	ldi	r22, 0x00	; 0
 8ea:	70 e0       	ldi	r23, 0x00	; 0
 8ec:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <_ZN7Tlc59406setAllEj>

000008f0 <_Z15tlc_shift8_initv>:
#elif DATA_TRANSFER_MODE == TLC_SPI

/** Initializes the SPI module to double speed (f_osc / 2) */
void tlc_shift8_init(void)
{
    SIN_DDR    |= _BV(SIN_PIN);    // SPI MOSI as output
 8f0:	23 9a       	sbi	0x04, 3	; 4
    SCLK_DDR   |= _BV(SCLK_PIN);   // SPI SCK as output
 8f2:	25 9a       	sbi	0x04, 5	; 4
    TLC_SS_DDR |= _BV(TLC_SS_PIN); // SPI SS as output
 8f4:	22 9a       	sbi	0x04, 2	; 4

    SCLK_PORT &= ~_BV(SCLK_PIN);
 8f6:	2d 98       	cbi	0x05, 5	; 5

    SPSR = _BV(SPI2X); // double speed (f_osc / 2)
 8f8:	81 e0       	ldi	r24, 0x01	; 1
 8fa:	8d bd       	out	0x2d, r24	; 45
    SPCR = _BV(SPE)    // enable SPI
         | _BV(MSTR);  // master mode
 8fc:	80 e5       	ldi	r24, 0x50	; 80
 8fe:	8c bd       	out	0x2c, r24	; 44
 900:	08 95       	ret

00000902 <_Z10tlc_shift8h>:
}

/** Shifts out a byte, MSB first */
void tlc_shift8(uint8_t byte)
{
    SPDR = byte; // starts transmission
 902:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & _BV(SPIF)))
 904:	0d b4       	in	r0, 0x2d	; 45
 906:	07 fe       	sbrs	r0, 7
 908:	fd cf       	rjmp	.-6      	; 0x904 <_Z10tlc_shift8h+0x2>
        ; // wait for transmission complete
}
 90a:	08 95       	ret

0000090c <_ZN7Tlc59406updateEv>:
    or
    \code while(tlc_needXLAT); \endcode
    \returns 1 if there is data waiting to be latched, 0 if data was
             successfully shifted in */
uint8_t Tlc5940::update(void)
{
 90c:	1f 93       	push	r17
 90e:	cf 93       	push	r28
 910:	df 93       	push	r29
    if (tlc_needXLAT) {
 912:	10 91 ea 01 	lds	r17, 0x01EA
 916:	11 11       	cpse	r17, r1
 918:	29 c0       	rjmp	.+82     	; 0x96c <_ZN7Tlc59406updateEv+0x60>
        return 1;
    }
    disable_XLAT_pulses();
 91a:	80 e2       	ldi	r24, 0x20	; 32
 91c:	80 93 80 00 	sts	0x0080, r24
    if (firstGSInput) {
 920:	80 91 cf 01 	lds	r24, 0x01CF
 924:	88 23       	and	r24, r24
 926:	29 f0       	breq	.+10     	; 0x932 <_ZN7Tlc59406updateEv+0x26>
        // adds an extra SCLK pulse unless we've just set dot-correction data
        firstGSInput = 0;
 928:	10 92 cf 01 	sts	0x01CF, r1
    or
    \code while(tlc_needXLAT); \endcode
    \returns 1 if there is data waiting to be latched, 0 if data was
             successfully shifted in */
uint8_t Tlc5940::update(void)
{
 92c:	c0 ed       	ldi	r28, 0xD0	; 208
 92e:	d1 e0       	ldi	r29, 0x01	; 1
 930:	03 c0       	rjmp	.+6      	; 0x938 <_ZN7Tlc59406updateEv+0x2c>
    disable_XLAT_pulses();
    if (firstGSInput) {
        // adds an extra SCLK pulse unless we've just set dot-correction data
        firstGSInput = 0;
    } else {
        pulse_pin(SCLK_PORT, SCLK_PIN);
 932:	2d 9a       	sbi	0x05, 5	; 5
 934:	2d 98       	cbi	0x05, 5	; 5
 936:	fa cf       	rjmp	.-12     	; 0x92c <_ZN7Tlc59406updateEv+0x20>
    }
    uint8_t *p = tlc_GSData;
    while (p < tlc_GSData + NUM_TLCS * 24) {
        tlc_shift8(*p++);
 938:	88 81       	ld	r24, Y
 93a:	0e 94 81 04 	call	0x902	; 0x902 <_Z10tlc_shift8h>
        tlc_shift8(*p++);
 93e:	89 81       	ldd	r24, Y+1	; 0x01
 940:	0e 94 81 04 	call	0x902	; 0x902 <_Z10tlc_shift8h>
 944:	23 96       	adiw	r28, 0x03	; 3
 946:	fe 01       	movw	r30, r28
 948:	31 97       	sbiw	r30, 0x01	; 1
        tlc_shift8(*p++);
 94a:	80 81       	ld	r24, Z
 94c:	0e 94 81 04 	call	0x902	; 0x902 <_Z10tlc_shift8h>
        firstGSInput = 0;
    } else {
        pulse_pin(SCLK_PORT, SCLK_PIN);
    }
    uint8_t *p = tlc_GSData;
    while (p < tlc_GSData + NUM_TLCS * 24) {
 950:	81 e0       	ldi	r24, 0x01	; 1
 952:	c8 3e       	cpi	r28, 0xE8	; 232
 954:	d8 07       	cpc	r29, r24
 956:	80 f3       	brcs	.-32     	; 0x938 <_ZN7Tlc59406updateEv+0x2c>
        tlc_shift8(*p++);
        tlc_shift8(*p++);
        tlc_shift8(*p++);
    }
    tlc_needXLAT = 1;
 958:	81 e0       	ldi	r24, 0x01	; 1
 95a:	80 93 ea 01 	sts	0x01EA, r24
    enable_XLAT_pulses();
 95e:	90 ea       	ldi	r25, 0xA0	; 160
 960:	90 93 80 00 	sts	0x0080, r25
    set_XLAT_interrupt();
 964:	b0 9a       	sbi	0x16, 0	; 22
 966:	80 93 6f 00 	sts	0x006F, r24
 96a:	01 c0       	rjmp	.+2      	; 0x96e <_ZN7Tlc59406updateEv+0x62>
    \returns 1 if there is data waiting to be latched, 0 if data was
             successfully shifted in */
uint8_t Tlc5940::update(void)
{
    if (tlc_needXLAT) {
        return 1;
 96c:	11 e0       	ldi	r17, 0x01	; 1
    }
    tlc_needXLAT = 1;
    enable_XLAT_pulses();
    set_XLAT_interrupt();
    return 0;
}
 96e:	81 2f       	mov	r24, r17
 970:	df 91       	pop	r29
 972:	cf 91       	pop	r28
 974:	1f 91       	pop	r17
 976:	08 95       	ret

00000978 <_ZN7Tlc59404initEj>:
/** Pin i/o and Timer setup.  The grayscale register will be reset to all
    zeros, or whatever initialValue is set to and the Timers will start.
    \param initialValue = 0, optional parameter specifing the inital startup
           value */
void Tlc5940::init(uint16_t initialValue)
{
 978:	0f 93       	push	r16
 97a:	1f 93       	push	r17
 97c:	cf 93       	push	r28
 97e:	df 93       	push	r29
 980:	00 d0       	rcall	.+0      	; 0x982 <_ZN7Tlc59404initEj+0xa>
 982:	cd b7       	in	r28, 0x3d	; 61
 984:	de b7       	in	r29, 0x3e	; 62
 986:	8c 01       	movw	r16, r24
    /* Pin Setup */
    XLAT_DDR |= _BV(XLAT_PIN);
 988:	21 9a       	sbi	0x04, 1	; 4
    BLANK_DDR |= _BV(BLANK_PIN);
 98a:	22 9a       	sbi	0x04, 2	; 4
    GSCLK_DDR |= _BV(GSCLK_PIN);
 98c:	53 9a       	sbi	0x0a, 3	; 10
#endif
#if XERR_ENABLED
    XERR_DDR &= ~_BV(XERR_PIN);   // XERR as input
    XERR_PORT |= _BV(XERR_PIN);   // enable pull-up resistor
#endif
    BLANK_PORT |= _BV(BLANK_PIN); // leave blank high (until the timers start)
 98e:	2a 9a       	sbi	0x05, 2	; 5

    tlc_shift8_init();
 990:	69 83       	std	Y+1, r22	; 0x01
 992:	7a 83       	std	Y+2, r23	; 0x02
 994:	0e 94 78 04 	call	0x8f0	; 0x8f0 <_Z15tlc_shift8_initv>

    setAll(initialValue);
 998:	69 81       	ldd	r22, Y+1	; 0x01
 99a:	7a 81       	ldd	r23, Y+2	; 0x02
 99c:	c8 01       	movw	r24, r16
 99e:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <_ZN7Tlc59406setAllEj>
    update();
 9a2:	c8 01       	movw	r24, r16
 9a4:	0e 94 86 04 	call	0x90c	; 0x90c <_ZN7Tlc59406updateEv>
    disable_XLAT_pulses();
 9a8:	e0 e8       	ldi	r30, 0x80	; 128
 9aa:	f0 e0       	ldi	r31, 0x00	; 0
 9ac:	80 e2       	ldi	r24, 0x20	; 32
 9ae:	80 83       	st	Z, r24
    clear_XLAT_interrupt();
 9b0:	10 92 6f 00 	sts	0x006F, r1
    tlc_needXLAT = 0;
 9b4:	10 92 ea 01 	sts	0x01EA, r1
    pulse_pin(XLAT_PORT, XLAT_PIN);
 9b8:	29 9a       	sbi	0x05, 1	; 5
 9ba:	29 98       	cbi	0x05, 1	; 5


    /* Timer Setup */

    /* Timer 1 - BLANK / XLAT */
    TCCR1A = _BV(COM1B1);  // non inverting, output on OC1B, BLANK
 9bc:	80 83       	st	Z, r24
    TCCR1B = _BV(WGM13);   // Phase/freq correct PWM, ICR1 top
 9be:	e1 e8       	ldi	r30, 0x81	; 129
 9c0:	f0 e0       	ldi	r31, 0x00	; 0
 9c2:	80 e1       	ldi	r24, 0x10	; 16
 9c4:	80 83       	st	Z, r24
    OCR1A = 1;             // duty factor on OC1A, XLAT is inside BLANK
 9c6:	81 e0       	ldi	r24, 0x01	; 1
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	90 93 89 00 	sts	0x0089, r25
 9ce:	80 93 88 00 	sts	0x0088, r24
    OCR1B = 2;             // duty factor on BLANK (larger than OCR1A (XLAT))
 9d2:	82 e0       	ldi	r24, 0x02	; 2
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	90 93 8b 00 	sts	0x008B, r25
 9da:	80 93 8a 00 	sts	0x008A, r24
    ICR1 = TLC_PWM_PERIOD; // see tlc_config.h
 9de:	80 e0       	ldi	r24, 0x00	; 0
 9e0:	90 e2       	ldi	r25, 0x20	; 32
 9e2:	90 93 87 00 	sts	0x0087, r25
 9e6:	80 93 86 00 	sts	0x0086, r24
           | _BV(WGM33);      // Fast pwm with ICR3 top
#else
    TCCR2A = _BV(COM2B1)      // set on BOTTOM, clear on OCR2A (non-inverting),
                              // output on OC2B
           | _BV(WGM21)       // Fast pwm with OCR2A top
           | _BV(WGM20);      // Fast pwm with OCR2A top
 9ea:	83 e2       	ldi	r24, 0x23	; 35
 9ec:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = _BV(WGM22);      // Fast pwm with OCR2A top
 9f0:	a1 eb       	ldi	r26, 0xB1	; 177
 9f2:	b0 e0       	ldi	r27, 0x00	; 0
 9f4:	88 e0       	ldi	r24, 0x08	; 8
 9f6:	8c 93       	st	X, r24
    OCR2B = 0;                // duty factor (as short a pulse as possible)
 9f8:	10 92 b4 00 	sts	0x00B4, r1
    OCR2A = TLC_GSCLK_PERIOD; // see tlc_config.h
 9fc:	83 e0       	ldi	r24, 0x03	; 3
 9fe:	80 93 b3 00 	sts	0x00B3, r24
    TCCR2B |= _BV(CS20);      // no prescale, (start pwm output)
 a02:	8c 91       	ld	r24, X
 a04:	81 60       	ori	r24, 0x01	; 1
 a06:	8c 93       	st	X, r24
#endif
    TCCR1B |= _BV(CS10);      // no prescale, (start pwm output)
 a08:	80 81       	ld	r24, Z
 a0a:	81 60       	ori	r24, 0x01	; 1
 a0c:	80 83       	st	Z, r24
    update();
 a0e:	c8 01       	movw	r24, r16
}
 a10:	0f 90       	pop	r0
 a12:	0f 90       	pop	r0
 a14:	df 91       	pop	r29
 a16:	cf 91       	pop	r28
 a18:	1f 91       	pop	r17
 a1a:	0f 91       	pop	r16
    OCR2B = 0;                // duty factor (as short a pulse as possible)
    OCR2A = TLC_GSCLK_PERIOD; // see tlc_config.h
    TCCR2B |= _BV(CS20);      // no prescale, (start pwm output)
#endif
    TCCR1B |= _BV(CS10);      // no prescale, (start pwm output)
    update();
 a1c:	0c 94 86 04 	jmp	0x90c	; 0x90c <_ZN7Tlc59406updateEv>

00000a20 <__divmodhi4>:
 a20:	97 fb       	bst	r25, 7
 a22:	07 2e       	mov	r0, r23
 a24:	16 f4       	brtc	.+4      	; 0xa2a <__divmodhi4+0xa>
 a26:	00 94       	com	r0
 a28:	07 d0       	rcall	.+14     	; 0xa38 <__divmodhi4_neg1>
 a2a:	77 fd       	sbrc	r23, 7
 a2c:	09 d0       	rcall	.+18     	; 0xa40 <__divmodhi4_neg2>
 a2e:	0e 94 46 05 	call	0xa8c	; 0xa8c <__udivmodhi4>
 a32:	07 fc       	sbrc	r0, 7
 a34:	05 d0       	rcall	.+10     	; 0xa40 <__divmodhi4_neg2>
 a36:	3e f4       	brtc	.+14     	; 0xa46 <__divmodhi4_exit>

00000a38 <__divmodhi4_neg1>:
 a38:	90 95       	com	r25
 a3a:	81 95       	neg	r24
 a3c:	9f 4f       	sbci	r25, 0xFF	; 255
 a3e:	08 95       	ret

00000a40 <__divmodhi4_neg2>:
 a40:	70 95       	com	r23
 a42:	61 95       	neg	r22
 a44:	7f 4f       	sbci	r23, 0xFF	; 255

00000a46 <__divmodhi4_exit>:
 a46:	08 95       	ret

00000a48 <__udivmodsi4>:
 a48:	a1 e2       	ldi	r26, 0x21	; 33
 a4a:	1a 2e       	mov	r1, r26
 a4c:	aa 1b       	sub	r26, r26
 a4e:	bb 1b       	sub	r27, r27
 a50:	fd 01       	movw	r30, r26
 a52:	0d c0       	rjmp	.+26     	; 0xa6e <__udivmodsi4_ep>

00000a54 <__udivmodsi4_loop>:
 a54:	aa 1f       	adc	r26, r26
 a56:	bb 1f       	adc	r27, r27
 a58:	ee 1f       	adc	r30, r30
 a5a:	ff 1f       	adc	r31, r31
 a5c:	a2 17       	cp	r26, r18
 a5e:	b3 07       	cpc	r27, r19
 a60:	e4 07       	cpc	r30, r20
 a62:	f5 07       	cpc	r31, r21
 a64:	20 f0       	brcs	.+8      	; 0xa6e <__udivmodsi4_ep>
 a66:	a2 1b       	sub	r26, r18
 a68:	b3 0b       	sbc	r27, r19
 a6a:	e4 0b       	sbc	r30, r20
 a6c:	f5 0b       	sbc	r31, r21

00000a6e <__udivmodsi4_ep>:
 a6e:	66 1f       	adc	r22, r22
 a70:	77 1f       	adc	r23, r23
 a72:	88 1f       	adc	r24, r24
 a74:	99 1f       	adc	r25, r25
 a76:	1a 94       	dec	r1
 a78:	69 f7       	brne	.-38     	; 0xa54 <__udivmodsi4_loop>
 a7a:	60 95       	com	r22
 a7c:	70 95       	com	r23
 a7e:	80 95       	com	r24
 a80:	90 95       	com	r25
 a82:	9b 01       	movw	r18, r22
 a84:	ac 01       	movw	r20, r24
 a86:	bd 01       	movw	r22, r26
 a88:	cf 01       	movw	r24, r30
 a8a:	08 95       	ret

00000a8c <__udivmodhi4>:
 a8c:	aa 1b       	sub	r26, r26
 a8e:	bb 1b       	sub	r27, r27
 a90:	51 e1       	ldi	r21, 0x11	; 17
 a92:	07 c0       	rjmp	.+14     	; 0xaa2 <__udivmodhi4_ep>

00000a94 <__udivmodhi4_loop>:
 a94:	aa 1f       	adc	r26, r26
 a96:	bb 1f       	adc	r27, r27
 a98:	a6 17       	cp	r26, r22
 a9a:	b7 07       	cpc	r27, r23
 a9c:	10 f0       	brcs	.+4      	; 0xaa2 <__udivmodhi4_ep>
 a9e:	a6 1b       	sub	r26, r22
 aa0:	b7 0b       	sbc	r27, r23

00000aa2 <__udivmodhi4_ep>:
 aa2:	88 1f       	adc	r24, r24
 aa4:	99 1f       	adc	r25, r25
 aa6:	5a 95       	dec	r21
 aa8:	a9 f7       	brne	.-22     	; 0xa94 <__udivmodhi4_loop>
 aaa:	80 95       	com	r24
 aac:	90 95       	com	r25
 aae:	bc 01       	movw	r22, r24
 ab0:	cd 01       	movw	r24, r26
 ab2:	08 95       	ret

00000ab4 <__tablejump2__>:
 ab4:	ee 0f       	add	r30, r30
 ab6:	ff 1f       	adc	r31, r31
 ab8:	05 90       	lpm	r0, Z+
 aba:	f4 91       	lpm	r31, Z
 abc:	e0 2d       	mov	r30, r0
 abe:	09 94       	ijmp

00000ac0 <_exit>:
 ac0:	f8 94       	cli

00000ac2 <__stop_program>:
 ac2:	ff cf       	rjmp	.-2      	; 0xac2 <__stop_program>
