
CPE329_FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000bc0  00000c54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bc0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cd  00800128  00800128  00000c7c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c7c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e0  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006b37  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001462  00000000  00000000  00007b03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001142  00000000  00000000  00008f65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000089c  00000000  00000000  0000a0a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a89  00000000  00000000  0000a944  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d3c  00000000  00000000  0000c3cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f0  00000000  00000000  0000f109  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__vector_3>
  10:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_4>
  14:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__vector_5>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__vector_13>
  38:	0c 94 bb 00 	jmp	0x176	; 0x176 <__vector_14>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 48 03 	jmp	0x690	; 0x690 <__vector_16>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 c4 01 	jmp	0x388	; 0x388 <__vector_18>
  4c:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__vector_19>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	1c 02       	muls	r17, r28

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e0 ec       	ldi	r30, 0xC0	; 192
  7e:	fb e0       	ldi	r31, 0x0B	; 11
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a8 32       	cpi	r26, 0x28	; 40
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	a8 e2       	ldi	r26, 0x28	; 40
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a5 3f       	cpi	r26, 0xF5	; 245
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	81 ee       	ldi	r24, 0xE1	; 225
  c2:	94 e0       	ldi	r25, 0x04	; 4
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x6>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x10>
  ce:	00 00       	nop
uint32_t dt_us = 0;

int main(void){
	_delay_ms(100);			// startup delay
	
	init();					// initializations for Arduino.h
  d0:	0e 94 92 03 	call	0x724	; 0x724 <init>
	//Serial.begin(9600);		// set baud rate for serial com
	Tlc.init();				// initialize the TLC chip
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	88 ed       	ldi	r24, 0xD8	; 216
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	0e 94 82 04 	call	0x904	; 0x904 <_ZN7Tlc59404initEj>
	
	initGPIO();
  e0:	0e 94 a6 01 	call	0x34c	; 0x34c <_Z8initGPIOv>
	initTimers();
  e4:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z10initTimersv>
	initPCINT();
  e8:	0e 94 b6 01 	call	0x36c	; 0x36c <_Z9initPCINTv>
	sei();
  ec:	78 94       	sei
   
	// Turn on full, then fade off
	while(GS >= 0){
  ee:	80 91 00 01 	lds	r24, 0x0100
  f2:	90 91 01 01 	lds	r25, 0x0101
  f6:	97 fd       	sbrc	r25, 7
  f8:	16 c0       	rjmp	.+44     	; 0x126 <main+0x68>
		setAllLEDs(GS,0,0);
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	50 e0       	ldi	r21, 0x00	; 0
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	0e 94 32 01 	call	0x264	; 0x264 <_Z10setAllLEDsiii>
		GS--;					// increment GS
 106:	80 91 00 01 	lds	r24, 0x0100
 10a:	90 91 01 01 	lds	r25, 0x0101
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	90 93 01 01 	sts	0x0101, r25
 114:	80 93 00 01 	sts	0x0100, r24
 118:	8f e1       	ldi	r24, 0x1F	; 31
 11a:	9e e4       	ldi	r25, 0x4E	; 78
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <main+0x5e>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x64>
 122:	00 00       	nop
 124:	e4 cf       	rjmp	.-56     	; 0xee <main+0x30>
		_delay_ms(GS_DELAY);	// delay GS color
	}
   
	// Temporary idea: Determine the bottom/back LED, send it to rgbUtil so that
	//  it knows which led to cycle to next
	setBottomLED(0);
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 4b 01 	call	0x296	; 0x296 <_Z12setBottomLEDi>
	//Infintely cycle an LED around the loop
	while (1) {
		nextLED();
		setAmbientColor(GS, 0, 0);
		GS++;
		GS %= (TOP_GS/16);
 12e:	ce e4       	ldi	r28, 0x4E	; 78
 130:	d0 e0       	ldi	r29, 0x00	; 0
	//  it knows which led to cycle to next
	setBottomLED(0);
   
	//Infintely cycle an LED around the loop
	while (1) {
		nextLED();
 132:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_Z7nextLEDv>
		setAmbientColor(GS, 0, 0);
 136:	40 e0       	ldi	r20, 0x00	; 0
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	80 91 00 01 	lds	r24, 0x0100
 142:	90 91 01 01 	lds	r25, 0x0101
 146:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_Z15setAmbientColoriii>
		GS++;
 14a:	80 91 00 01 	lds	r24, 0x0100
 14e:	90 91 01 01 	lds	r25, 0x0101
 152:	01 96       	adiw	r24, 0x01	; 1
		GS %= (TOP_GS/16);
 154:	be 01       	movw	r22, r28
 156:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__divmodhi4>
 15a:	90 93 01 01 	sts	0x0101, r25
 15e:	80 93 00 01 	sts	0x0100, r24
 162:	9f ef       	ldi	r25, 0xFF	; 255
 164:	21 ee       	ldi	r18, 0xE1	; 225
 166:	84 e0       	ldi	r24, 0x04	; 4
 168:	91 50       	subi	r25, 0x01	; 1
 16a:	20 40       	sbci	r18, 0x00	; 0
 16c:	80 40       	sbci	r24, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <main+0xaa>
 170:	00 c0       	rjmp	.+0      	; 0x172 <main+0xb4>
 172:	00 00       	nop
 174:	de cf       	rjmp	.-68     	; 0x132 <main+0x74>

00000176 <__vector_14>:

////////////////////////////////ISR////////////////////////////////////////////

// ISR that holds the time between halleffect readings
// timer0 set to overflow every 100us / 0.1ms
ISR(TIMER0_COMPA_vect){
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	2f 93       	push	r18
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
 186:	af 93       	push	r26
 188:	bf 93       	push	r27
	dt_us = dt_us + 100;
 18a:	80 91 28 01 	lds	r24, 0x0128
 18e:	90 91 29 01 	lds	r25, 0x0129
 192:	a0 91 2a 01 	lds	r26, 0x012A
 196:	b0 91 2b 01 	lds	r27, 0x012B
 19a:	8c 59       	subi	r24, 0x9C	; 156
 19c:	9f 4f       	sbci	r25, 0xFF	; 255
 19e:	af 4f       	sbci	r26, 0xFF	; 255
 1a0:	bf 4f       	sbci	r27, 0xFF	; 255
	
	// if dt_us > 1 second bike is probalby stopped 
	if(dt_us > 1000000){
 1a2:	81 34       	cpi	r24, 0x41	; 65
 1a4:	22 e4       	ldi	r18, 0x42	; 66
 1a6:	92 07       	cpc	r25, r18
 1a8:	2f e0       	ldi	r18, 0x0F	; 15
 1aa:	a2 07       	cpc	r26, r18
 1ac:	b1 05       	cpc	r27, r1
 1ae:	48 f4       	brcc	.+18     	; 0x1c2 <__vector_14+0x4c>
////////////////////////////////ISR////////////////////////////////////////////

// ISR that holds the time between halleffect readings
// timer0 set to overflow every 100us / 0.1ms
ISR(TIMER0_COMPA_vect){
	dt_us = dt_us + 100;
 1b0:	80 93 28 01 	sts	0x0128, r24
 1b4:	90 93 29 01 	sts	0x0129, r25
 1b8:	a0 93 2a 01 	sts	0x012A, r26
 1bc:	b0 93 2b 01 	sts	0x012B, r27
 1c0:	08 c0       	rjmp	.+16     	; 0x1d2 <__vector_14+0x5c>
	
	// if dt_us > 1 second bike is probalby stopped 
	if(dt_us > 1000000){
		// tell rgbUtil that bike is stopped
		
		dt_us = 0;		// reset dt_us
 1c2:	10 92 28 01 	sts	0x0128, r1
 1c6:	10 92 29 01 	sts	0x0129, r1
 1ca:	10 92 2a 01 	sts	0x012A, r1
 1ce:	10 92 2b 01 	sts	0x012B, r1
	}
}
 1d2:	bf 91       	pop	r27
 1d4:	af 91       	pop	r26
 1d6:	9f 91       	pop	r25
 1d8:	8f 91       	pop	r24
 1da:	2f 91       	pop	r18
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <__vector_3>:

// ISR for halleffect1 at pin D8
// enters ISR when set from high (from pull-up) to low
ISR(PCINT0_vect){
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	8f 93       	push	r24
	dt_us = dt_us + TCNT0;		// add remaining TCNT time to dt_us
 1f2:	86 b5       	in	r24, 0x26	; 38
	
	// send dt_us to rgbUtil
	
	dt_us = 0;		// reset dt_us
 1f4:	10 92 28 01 	sts	0x0128, r1
 1f8:	10 92 29 01 	sts	0x0129, r1
 1fc:	10 92 2a 01 	sts	0x012A, r1
 200:	10 92 2b 01 	sts	0x012B, r1
}
 204:	8f 91       	pop	r24
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <__vector_4>:

// ISR for halleffect1 at pin D7
// enters ISR when set from high (from pull-up) to low
ISR(PCINT1_vect){
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	8f 93       	push	r24
	dt_us = dt_us + TCNT0;		// add remaining TCNT time to dt_us
 21c:	86 b5       	in	r24, 0x26	; 38
	
	// send dt_us to rgbUtil
	
	dt_us = 0;		// reset dt_us
 21e:	10 92 28 01 	sts	0x0128, r1
 222:	10 92 29 01 	sts	0x0129, r1
 226:	10 92 2a 01 	sts	0x012A, r1
 22a:	10 92 2b 01 	sts	0x012B, r1
}
 22e:	8f 91       	pop	r24
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <__vector_5>:

// ISR for halleffect1 at pin A0
// enters ISR when set from high (from pull-up) to low
ISR(PCINT2_vect){
 23a:	1f 92       	push	r1
 23c:	0f 92       	push	r0
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	0f 92       	push	r0
 242:	11 24       	eor	r1, r1
 244:	8f 93       	push	r24
	dt_us = dt_us + TCNT0;		// add remaining TCNT time to dt_us
 246:	86 b5       	in	r24, 0x26	; 38
	
	// send dt_us to rgbUtil
	
	dt_us = 0;		// reset dt_us
 248:	10 92 28 01 	sts	0x0128, r1
 24c:	10 92 29 01 	sts	0x0129, r1
 250:	10 92 2a 01 	sts	0x012A, r1
 254:	10 92 2b 01 	sts	0x012B, r1
}
 258:	8f 91       	pop	r24
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <_Z10setAllLEDsiii>:

int bottomLED = -1;
int currentLED = -1;
static color ambientColor = {0,0,0};

void setAllLEDs(int r, int g, int b) {
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	ec 01       	movw	r28, r24
   Serial.println(r);   // print GS data to Serial window (BAUD =9600)
 26a:	4a e0       	ldi	r20, 0x0A	; 10
 26c:	50 e0       	ldi	r21, 0x00	; 0
 26e:	bc 01       	movw	r22, r24
 270:	82 e3       	ldi	r24, 0x32	; 50
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	0e 94 31 03 	call	0x662	; 0x662 <_ZN5Print7printlnEii>
   Tlc.clear();      // clear TLC data
 278:	88 ed       	ldi	r24, 0xD8	; 216
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	0e 94 3a 04 	call	0x874	; 0x874 <_ZN7Tlc59405clearEv>
   Tlc.setAll(r);     // set all TLC channel (15:0) to GS value
 280:	be 01       	movw	r22, r28
 282:	88 ed       	ldi	r24, 0xD8	; 216
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	0e 94 21 04 	call	0x842	; 0x842 <_ZN7Tlc59406setAllEj>
   Tlc.update();     // send GS data to TLC5940
 28a:	88 ed       	ldi	r24, 0xD8	; 216
 28c:	91 e0       	ldi	r25, 0x01	; 1
}
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28

void setAllLEDs(int r, int g, int b) {
   Serial.println(r);   // print GS data to Serial window (BAUD =9600)
   Tlc.clear();      // clear TLC data
   Tlc.setAll(r);     // set all TLC channel (15:0) to GS value
   Tlc.update();     // send GS data to TLC5940
 292:	0c 94 4c 04 	jmp	0x898	; 0x898 <_ZN7Tlc59406updateEv>

00000296 <_Z12setBottomLEDi>:
}

/* Something else determines which LED is on the bottom in main */
void setBottomLED(int LED) {
   bottomLED = LED;
 296:	90 93 05 01 	sts	0x0105, r25
 29a:	80 93 04 01 	sts	0x0104, r24
 29e:	08 95       	ret

000002a0 <_Z15setAmbientColoriii>:
}

void setAmbientColor(int r, int g, int b) {
   ambientColor.r = r;
 2a0:	ec e2       	ldi	r30, 0x2C	; 44
 2a2:	f1 e0       	ldi	r31, 0x01	; 1
 2a4:	91 83       	std	Z+1, r25	; 0x01
 2a6:	80 83       	st	Z, r24
   ambientColor.g = g;
 2a8:	73 83       	std	Z+3, r23	; 0x03
 2aa:	62 83       	std	Z+2, r22	; 0x02
   ambientColor.b = b;
 2ac:	55 83       	std	Z+5, r21	; 0x05
 2ae:	44 83       	std	Z+4, r20	; 0x04
 2b0:	08 95       	ret

000002b2 <_Z7nextLEDv>:
}

void nextLED() {
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
   int ndx;
   
   if (currentLED < 0)
 2b6:	80 91 02 01 	lds	r24, 0x0102
 2ba:	90 91 03 01 	lds	r25, 0x0103
 2be:	97 ff       	sbrs	r25, 7
 2c0:	08 c0       	rjmp	.+16     	; 0x2d2 <_Z7nextLEDv+0x20>
      currentLED = bottomLED; // Definitely subject to change, just a placeholder
 2c2:	80 91 04 01 	lds	r24, 0x0104
 2c6:	90 91 05 01 	lds	r25, 0x0105
 2ca:	90 93 03 01 	sts	0x0103, r25
 2ce:	80 93 02 01 	sts	0x0102, r24
   
   Serial.println(TOP_GS);
 2d2:	4a e0       	ldi	r20, 0x0A	; 10
 2d4:	50 e0       	ldi	r21, 0x00	; 0
 2d6:	62 ee       	ldi	r22, 0xE2	; 226
 2d8:	74 e0       	ldi	r23, 0x04	; 4
 2da:	82 e3       	ldi	r24, 0x32	; 50
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	0e 94 31 03 	call	0x662	; 0x662 <_ZN5Print7printlnEii>
   Tlc.clear();
 2e2:	88 ed       	ldi	r24, 0xD8	; 216
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	0e 94 3a 04 	call	0x874	; 0x874 <_ZN7Tlc59405clearEv>
//   Tlc.setAll(ambientColor);
   
   for (ndx = 0; ndx < NUM_LED_CHANNELS; ndx++) {
 2ea:	c0 e0       	ldi	r28, 0x00	; 0
 2ec:	d0 e0       	ldi	r29, 0x00	; 0
      if (ndx == currentLED)
 2ee:	80 91 02 01 	lds	r24, 0x0102
 2f2:	90 91 03 01 	lds	r25, 0x0103
 2f6:	c8 17       	cp	r28, r24
 2f8:	d9 07       	cpc	r29, r25
 2fa:	19 f4       	brne	.+6      	; 0x302 <_Z7nextLEDv+0x50>
         Tlc.set(ndx, TOP_GS);
 2fc:	42 ee       	ldi	r20, 0xE2	; 226
 2fe:	54 e0       	ldi	r21, 0x04	; 4
 300:	04 c0       	rjmp	.+8      	; 0x30a <_Z7nextLEDv+0x58>
      else
         Tlc.set(ndx, ambientColor.r);
 302:	40 91 2c 01 	lds	r20, 0x012C
 306:	50 91 2d 01 	lds	r21, 0x012D
 30a:	6c 2f       	mov	r22, r28
 30c:	88 ed       	ldi	r24, 0xD8	; 216
 30e:	91 e0       	ldi	r25, 0x01	; 1
 310:	0e 94 02 04 	call	0x804	; 0x804 <_ZN7Tlc59403setEhj>
   
   Serial.println(TOP_GS);
   Tlc.clear();
//   Tlc.setAll(ambientColor);
   
   for (ndx = 0; ndx < NUM_LED_CHANNELS; ndx++) {
 314:	21 96       	adiw	r28, 0x01	; 1
 316:	c0 31       	cpi	r28, 0x10	; 16
 318:	d1 05       	cpc	r29, r1
 31a:	49 f7       	brne	.-46     	; 0x2ee <_Z7nextLEDv+0x3c>
         Tlc.set(ndx, TOP_GS);
      else
         Tlc.set(ndx, ambientColor.r);
   }
   
   Tlc.update();
 31c:	88 ed       	ldi	r24, 0xD8	; 216
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN7Tlc59406updateEv>
   
   if ((currentLED += DIRECTION * NUM_COLOR_CHANNELS) > NUM_LED_CHANNELS)
 324:	80 91 02 01 	lds	r24, 0x0102
 328:	90 91 03 01 	lds	r25, 0x0103
 32c:	03 96       	adiw	r24, 0x03	; 3
 32e:	81 31       	cpi	r24, 0x11	; 17
 330:	91 05       	cpc	r25, r1
 332:	2c f4       	brge	.+10     	; 0x33e <_Z7nextLEDv+0x8c>
 334:	90 93 03 01 	sts	0x0103, r25
 338:	80 93 02 01 	sts	0x0102, r24
 33c:	04 c0       	rjmp	.+8      	; 0x346 <_Z7nextLEDv+0x94>
      currentLED = 0;
 33e:	10 92 03 01 	sts	0x0103, r1
 342:	10 92 02 01 	sts	0x0102, r1
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	08 95       	ret

0000034c <_Z8initGPIOv>:
#include "tmr_int_util.h"

// sets up the inputs, outputs and internal pull-ups 
void initGPIO(){
	// all hall effect sensors are outputs
	DDRB |= (1<<HALLEFFECT1);
 34c:	20 9a       	sbi	0x04, 0	; 4
	DDRD |= (1<<HALLEFFECT2);
 34e:	57 9a       	sbi	0x0a, 7	; 10
	DDRC |= (1<<HALLEFFECT3);
 350:	38 9a       	sbi	0x07, 0	; 7
	
	// turn on internal pull-up for hall effects
	PORTB |= (1<<HALLEFFECT1);
 352:	28 9a       	sbi	0x05, 0	; 5
	PORTD |= (1<<HALLEFFECT2);
 354:	5f 9a       	sbi	0x0b, 7	; 11
	PORTC |= (1<<HALLEFFECT3);
 356:	40 9a       	sbi	0x08, 0	; 8
 358:	08 95       	ret

0000035a <_Z10initTimersv>:
// sets up the timers
void initTimers(){
	// timer1 and timer2 are used in SparkFun library
	
	// timer0 (8bit) 0->255
	TCCR0A = 0x02;		// set timer to CTC mode
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x02;		// set pre-scaler to 8
 35e:	85 bd       	out	0x25, r24	; 37
	OCR0A = OCR0A_OVR;	// overflow value 
 360:	98 ec       	ldi	r25, 0xC8	; 200
 362:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;		// timer mask interrupt on OCR0A overflow
 364:	80 93 6e 00 	sts	0x006E, r24
	TIFR0 = 0x02;		// set overflow to OCR0A value
 368:	85 bb       	out	0x15, r24	; 21
 36a:	08 95       	ret

0000036c <_Z9initPCINTv>:
}

// sets up all three PCINT vectors for each halleffect sensor
void initPCINT(){
	cli();		// clear interrupts
 36c:	f8 94       	cli
	
	// enable PCINT (2:0)
	PCICR = 0b00000111;
 36e:	87 e0       	ldi	r24, 0x07	; 7
 370:	80 93 68 00 	sts	0x0068, r24
	
	// PCINT0 -> D8 (halleffect sensor 1)
	PCMSK0 = (1<<PCINT0);
 374:	91 e0       	ldi	r25, 0x01	; 1
 376:	90 93 6b 00 	sts	0x006B, r25
	
	// PCINT1 -> D7 (halleffect sensor 2)
	PCMSK1 = (1<<PCINT23);
 37a:	20 e8       	ldi	r18, 0x80	; 128
 37c:	20 93 6c 00 	sts	0x006C, r18
	
	// PCINT2 -> A0 (halleffect sensor 3)
	PCMSK2 = (1<<PCINT8);
 380:	90 93 6d 00 	sts	0x006D, r25
	
	// set the PCINT flag register for all 3 PCINTs
	PCIFR = 0b00000111;
 384:	8b bb       	out	0x1b, r24	; 27
 386:	08 95       	ret

00000388 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 388:	1f 92       	push	r1
 38a:	0f 92       	push	r0
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	0f 92       	push	r0
 390:	11 24       	eor	r1, r1
 392:	2f 93       	push	r18
 394:	8f 93       	push	r24
 396:	9f 93       	push	r25
 398:	ef 93       	push	r30
 39a:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 39c:	e0 91 42 01 	lds	r30, 0x0142
 3a0:	f0 91 43 01 	lds	r31, 0x0143
 3a4:	80 81       	ld	r24, Z
 3a6:	e0 91 48 01 	lds	r30, 0x0148
 3aa:	f0 91 49 01 	lds	r31, 0x0149
 3ae:	82 fd       	sbrc	r24, 2
 3b0:	12 c0       	rjmp	.+36     	; 0x3d6 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 3b2:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 3b4:	80 91 4b 01 	lds	r24, 0x014B
 3b8:	8f 5f       	subi	r24, 0xFF	; 255
 3ba:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 3bc:	20 91 4c 01 	lds	r18, 0x014C
 3c0:	82 17       	cp	r24, r18
 3c2:	51 f0       	breq	.+20     	; 0x3d8 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 3c4:	e0 91 4b 01 	lds	r30, 0x014B
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	ee 5c       	subi	r30, 0xCE	; 206
 3cc:	fe 4f       	sbci	r31, 0xFE	; 254
 3ce:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 3d0:	80 93 4b 01 	sts	0x014B, r24
 3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 3d6:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 3d8:	ff 91       	pop	r31
 3da:	ef 91       	pop	r30
 3dc:	9f 91       	pop	r25
 3de:	8f 91       	pop	r24
 3e0:	2f 91       	pop	r18
 3e2:	0f 90       	pop	r0
 3e4:	0f be       	out	0x3f, r0	; 63
 3e6:	0f 90       	pop	r0
 3e8:	1f 90       	pop	r1
 3ea:	18 95       	reti

000003ec <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 3ec:	1f 92       	push	r1
 3ee:	0f 92       	push	r0
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	0f 92       	push	r0
 3f4:	11 24       	eor	r1, r1
 3f6:	2f 93       	push	r18
 3f8:	3f 93       	push	r19
 3fa:	4f 93       	push	r20
 3fc:	5f 93       	push	r21
 3fe:	6f 93       	push	r22
 400:	7f 93       	push	r23
 402:	8f 93       	push	r24
 404:	9f 93       	push	r25
 406:	af 93       	push	r26
 408:	bf 93       	push	r27
 40a:	ef 93       	push	r30
 40c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 40e:	82 e3       	ldi	r24, 0x32	; 50
 410:	91 e0       	ldi	r25, 0x01	; 1
 412:	0e 94 04 05 	call	0xa08	; 0xa08 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 416:	ff 91       	pop	r31
 418:	ef 91       	pop	r30
 41a:	bf 91       	pop	r27
 41c:	af 91       	pop	r26
 41e:	9f 91       	pop	r25
 420:	8f 91       	pop	r24
 422:	7f 91       	pop	r23
 424:	6f 91       	pop	r22
 426:	5f 91       	pop	r21
 428:	4f 91       	pop	r20
 42a:	3f 91       	pop	r19
 42c:	2f 91       	pop	r18
 42e:	0f 90       	pop	r0
 430:	0f be       	out	0x3f, r0	; 63
 432:	0f 90       	pop	r0
 434:	1f 90       	pop	r1
 436:	18 95       	reti

00000438 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 438:	e2 e3       	ldi	r30, 0x32	; 50
 43a:	f1 e0       	ldi	r31, 0x01	; 1
 43c:	13 82       	std	Z+3, r1	; 0x03
 43e:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 440:	88 ee       	ldi	r24, 0xE8	; 232
 442:	93 e0       	ldi	r25, 0x03	; 3
 444:	a0 e0       	ldi	r26, 0x00	; 0
 446:	b0 e0       	ldi	r27, 0x00	; 0
 448:	84 83       	std	Z+4, r24	; 0x04
 44a:	95 83       	std	Z+5, r25	; 0x05
 44c:	a6 83       	std	Z+6, r26	; 0x06
 44e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 450:	8b e1       	ldi	r24, 0x1B	; 27
 452:	91 e0       	ldi	r25, 0x01	; 1
 454:	91 83       	std	Z+1, r25	; 0x01
 456:	80 83       	st	Z, r24
 458:	85 ec       	ldi	r24, 0xC5	; 197
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	95 87       	std	Z+13, r25	; 0x0d
 45e:	84 87       	std	Z+12, r24	; 0x0c
 460:	84 ec       	ldi	r24, 0xC4	; 196
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	97 87       	std	Z+15, r25	; 0x0f
 466:	86 87       	std	Z+14, r24	; 0x0e
 468:	80 ec       	ldi	r24, 0xC0	; 192
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	91 8b       	std	Z+17, r25	; 0x11
 46e:	80 8b       	std	Z+16, r24	; 0x10
 470:	81 ec       	ldi	r24, 0xC1	; 193
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	93 8b       	std	Z+19, r25	; 0x13
 476:	82 8b       	std	Z+18, r24	; 0x12
 478:	82 ec       	ldi	r24, 0xC2	; 194
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	95 8b       	std	Z+21, r25	; 0x15
 47e:	84 8b       	std	Z+20, r24	; 0x14
 480:	86 ec       	ldi	r24, 0xC6	; 198
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	97 8b       	std	Z+23, r25	; 0x17
 486:	86 8b       	std	Z+22, r24	; 0x16
 488:	11 8e       	std	Z+25, r1	; 0x19
 48a:	12 8e       	std	Z+26, r1	; 0x1a
 48c:	13 8e       	std	Z+27, r1	; 0x1b
 48e:	14 8e       	std	Z+28, r1	; 0x1c
 490:	08 95       	ret

00000492 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 492:	cf 92       	push	r12
 494:	df 92       	push	r13
 496:	ef 92       	push	r14
 498:	ff 92       	push	r15
 49a:	0f 93       	push	r16
 49c:	1f 93       	push	r17
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	6c 01       	movw	r12, r24
 4a4:	eb 01       	movw	r28, r22
 4a6:	7b 01       	movw	r14, r22
 4a8:	e4 0e       	add	r14, r20
 4aa:	f5 1e       	adc	r15, r21
  size_t n = 0;
 4ac:	00 e0       	ldi	r16, 0x00	; 0
 4ae:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
 4b0:	ce 15       	cp	r28, r14
 4b2:	df 05       	cpc	r29, r15
 4b4:	61 f0       	breq	.+24     	; 0x4ce <_ZN5Print5writeEPKhj+0x3c>
    n += write(*buffer++);
 4b6:	69 91       	ld	r22, Y+
 4b8:	d6 01       	movw	r26, r12
 4ba:	ed 91       	ld	r30, X+
 4bc:	fc 91       	ld	r31, X
 4be:	01 90       	ld	r0, Z+
 4c0:	f0 81       	ld	r31, Z
 4c2:	e0 2d       	mov	r30, r0
 4c4:	c6 01       	movw	r24, r12
 4c6:	09 95       	icall
 4c8:	08 0f       	add	r16, r24
 4ca:	19 1f       	adc	r17, r25
 4cc:	f1 cf       	rjmp	.-30     	; 0x4b0 <_ZN5Print5writeEPKhj+0x1e>
  }
  return n;
}
 4ce:	c8 01       	movw	r24, r16
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	1f 91       	pop	r17
 4d6:	0f 91       	pop	r16
 4d8:	ff 90       	pop	r15
 4da:	ef 90       	pop	r14
 4dc:	df 90       	pop	r13
 4de:	cf 90       	pop	r12
 4e0:	08 95       	ret

000004e2 <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 4e2:	61 15       	cp	r22, r1
 4e4:	71 05       	cpc	r23, r1
 4e6:	79 f0       	breq	.+30     	; 0x506 <_ZN5Print5writeEPKc+0x24>
      return write((const uint8_t *)str, strlen(str));
 4e8:	fb 01       	movw	r30, r22
 4ea:	01 90       	ld	r0, Z+
 4ec:	00 20       	and	r0, r0
 4ee:	e9 f7       	brne	.-6      	; 0x4ea <_ZN5Print5writeEPKc+0x8>
 4f0:	31 97       	sbiw	r30, 0x01	; 1
 4f2:	af 01       	movw	r20, r30
 4f4:	46 1b       	sub	r20, r22
 4f6:	57 0b       	sbc	r21, r23
 4f8:	dc 01       	movw	r26, r24
 4fa:	ed 91       	ld	r30, X+
 4fc:	fc 91       	ld	r31, X
 4fe:	02 80       	ldd	r0, Z+2	; 0x02
 500:	f3 81       	ldd	r31, Z+3	; 0x03
 502:	e0 2d       	mov	r30, r0
 504:	09 94       	ijmp
    }
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	08 95       	ret

0000050c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 50c:	dc 01       	movw	r26, r24
 50e:	ed 91       	ld	r30, X+
 510:	fc 91       	ld	r31, X
 512:	01 90       	ld	r0, Z+
 514:	f0 81       	ld	r31, Z
 516:	e0 2d       	mov	r30, r0
 518:	09 94       	ijmp

0000051a <_ZN5Print7printlnEv>:
  return x.printTo(*this);
}

size_t Print::println(void)
{
  return write("\r\n");
 51a:	66 e0       	ldi	r22, 0x06	; 6
 51c:	71 e0       	ldi	r23, 0x01	; 1
 51e:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <_ZN5Print5writeEPKc>

00000522 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 522:	8f 92       	push	r8
 524:	9f 92       	push	r9
 526:	af 92       	push	r10
 528:	bf 92       	push	r11
 52a:	cf 92       	push	r12
 52c:	df 92       	push	r13
 52e:	ef 92       	push	r14
 530:	ff 92       	push	r15
 532:	0f 93       	push	r16
 534:	1f 93       	push	r17
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
 53a:	cd b7       	in	r28, 0x3d	; 61
 53c:	de b7       	in	r29, 0x3e	; 62
 53e:	a1 97       	sbiw	r28, 0x21	; 33
 540:	0f b6       	in	r0, 0x3f	; 63
 542:	f8 94       	cli
 544:	de bf       	out	0x3e, r29	; 62
 546:	0f be       	out	0x3f, r0	; 63
 548:	cd bf       	out	0x3d, r28	; 61
 54a:	6c 01       	movw	r12, r24
 54c:	14 2f       	mov	r17, r20
 54e:	e5 2f       	mov	r30, r21
 550:	cb 01       	movw	r24, r22
 552:	02 2f       	mov	r16, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 554:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 556:	22 30       	cpi	r18, 0x02	; 2
 558:	08 f4       	brcc	.+2      	; 0x55c <_ZN5Print11printNumberEmh+0x3a>
 55a:	0a e0       	ldi	r16, 0x0A	; 10
 55c:	7e 01       	movw	r14, r28
 55e:	21 e2       	ldi	r18, 0x21	; 33
 560:	e2 0e       	add	r14, r18
 562:	f1 1c       	adc	r15, r1

  do {
    unsigned long m = n;
    n /= base;
 564:	80 2e       	mov	r8, r16
 566:	91 2c       	mov	r9, r1
 568:	a1 2c       	mov	r10, r1
 56a:	b1 2c       	mov	r11, r1
 56c:	61 2f       	mov	r22, r17
 56e:	7e 2f       	mov	r23, r30
 570:	a5 01       	movw	r20, r10
 572:	94 01       	movw	r18, r8
 574:	0e 94 a2 05 	call	0xb44	; 0xb44 <__udivmodsi4>
    char c = m - base * n;
 578:	02 9f       	mul	r16, r18
 57a:	10 19       	sub	r17, r0
 57c:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	e8 1a       	sub	r14, r24
 582:	f1 08       	sbc	r15, r1
 584:	1a 30       	cpi	r17, 0x0A	; 10
 586:	10 f4       	brcc	.+4      	; 0x58c <_ZN5Print11printNumberEmh+0x6a>
 588:	10 5d       	subi	r17, 0xD0	; 208
 58a:	01 c0       	rjmp	.+2      	; 0x58e <_ZN5Print11printNumberEmh+0x6c>
 58c:	19 5c       	subi	r17, 0xC9	; 201
 58e:	f7 01       	movw	r30, r14
 590:	10 83       	st	Z, r17
 592:	12 2f       	mov	r17, r18
 594:	e3 2f       	mov	r30, r19
 596:	ca 01       	movw	r24, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 598:	23 2b       	or	r18, r19
 59a:	24 2b       	or	r18, r20
 59c:	25 2b       	or	r18, r21
 59e:	31 f7       	brne	.-52     	; 0x56c <_ZN5Print11printNumberEmh+0x4a>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 5a0:	b7 01       	movw	r22, r14
 5a2:	c6 01       	movw	r24, r12
 5a4:	0e 94 71 02 	call	0x4e2	; 0x4e2 <_ZN5Print5writeEPKc>
}
 5a8:	a1 96       	adiw	r28, 0x21	; 33
 5aa:	0f b6       	in	r0, 0x3f	; 63
 5ac:	f8 94       	cli
 5ae:	de bf       	out	0x3e, r29	; 62
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	cd bf       	out	0x3d, r28	; 61
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	1f 91       	pop	r17
 5ba:	0f 91       	pop	r16
 5bc:	ff 90       	pop	r15
 5be:	ef 90       	pop	r14
 5c0:	df 90       	pop	r13
 5c2:	cf 90       	pop	r12
 5c4:	bf 90       	pop	r11
 5c6:	af 90       	pop	r10
 5c8:	9f 90       	pop	r9
 5ca:	8f 90       	pop	r8
 5cc:	08 95       	ret

000005ce <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 5ce:	cf 92       	push	r12
 5d0:	df 92       	push	r13
 5d2:	ef 92       	push	r14
 5d4:	ff 92       	push	r15
 5d6:	0f 93       	push	r16
 5d8:	1f 93       	push	r17
 5da:	cf 93       	push	r28
 5dc:	df 93       	push	r29
 5de:	ec 01       	movw	r28, r24
 5e0:	6a 01       	movw	r12, r20
 5e2:	7b 01       	movw	r14, r22
  if (base == 0) {
 5e4:	21 15       	cp	r18, r1
 5e6:	31 05       	cpc	r19, r1
 5e8:	79 f4       	brne	.+30     	; 0x608 <_ZN5Print5printEli+0x3a>
    return write(n);
 5ea:	e8 81       	ld	r30, Y
 5ec:	f9 81       	ldd	r31, Y+1	; 0x01
 5ee:	01 90       	ld	r0, Z+
 5f0:	f0 81       	ld	r31, Z
 5f2:	e0 2d       	mov	r30, r0
 5f4:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 5f6:	df 91       	pop	r29
 5f8:	cf 91       	pop	r28
 5fa:	1f 91       	pop	r17
 5fc:	0f 91       	pop	r16
 5fe:	ff 90       	pop	r15
 600:	ef 90       	pop	r14
 602:	df 90       	pop	r13
 604:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 606:	09 94       	ijmp
  } else if (base == 10) {
 608:	2a 30       	cpi	r18, 0x0A	; 10
 60a:	31 05       	cpc	r19, r1
 60c:	e9 f4       	brne	.+58     	; 0x648 <_ZN5Print5printEli+0x7a>
    if (n < 0) {
 60e:	77 ff       	sbrs	r23, 7
 610:	1a c0       	rjmp	.+52     	; 0x646 <_ZN5Print5printEli+0x78>
      int t = print('-');
 612:	6d e2       	ldi	r22, 0x2D	; 45
 614:	0e 94 86 02 	call	0x50c	; 0x50c <_ZN5Print5printEc>
 618:	8c 01       	movw	r16, r24
      n = -n;
 61a:	44 27       	eor	r20, r20
 61c:	55 27       	eor	r21, r21
 61e:	ba 01       	movw	r22, r20
 620:	4c 19       	sub	r20, r12
 622:	5d 09       	sbc	r21, r13
 624:	6e 09       	sbc	r22, r14
 626:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
 628:	2a e0       	ldi	r18, 0x0A	; 10
 62a:	ce 01       	movw	r24, r28
 62c:	0e 94 91 02 	call	0x522	; 0x522 <_ZN5Print11printNumberEmh>
 630:	80 0f       	add	r24, r16
 632:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 634:	df 91       	pop	r29
 636:	cf 91       	pop	r28
 638:	1f 91       	pop	r17
 63a:	0f 91       	pop	r16
 63c:	ff 90       	pop	r15
 63e:	ef 90       	pop	r14
 640:	df 90       	pop	r13
 642:	cf 90       	pop	r12
 644:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
 646:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
 648:	b7 01       	movw	r22, r14
 64a:	a6 01       	movw	r20, r12
 64c:	ce 01       	movw	r24, r28
  }
}
 64e:	df 91       	pop	r29
 650:	cf 91       	pop	r28
 652:	1f 91       	pop	r17
 654:	0f 91       	pop	r16
 656:	ff 90       	pop	r15
 658:	ef 90       	pop	r14
 65a:	df 90       	pop	r13
 65c:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 65e:	0c 94 91 02 	jmp	0x522	; 0x522 <_ZN5Print11printNumberEmh>

00000662 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 662:	0f 93       	push	r16
 664:	1f 93       	push	r17
 666:	cf 93       	push	r28
 668:	df 93       	push	r29
 66a:	ec 01       	movw	r28, r24
 66c:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 66e:	ab 01       	movw	r20, r22
 670:	77 0f       	add	r23, r23
 672:	66 0b       	sbc	r22, r22
 674:	77 0b       	sbc	r23, r23
 676:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_ZN5Print5printEli>
 67a:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 67c:	ce 01       	movw	r24, r28
 67e:	0e 94 8d 02 	call	0x51a	; 0x51a <_ZN5Print7printlnEv>
  return n;
}
 682:	80 0f       	add	r24, r16
 684:	91 1f       	adc	r25, r17
 686:	df 91       	pop	r29
 688:	cf 91       	pop	r28
 68a:	1f 91       	pop	r17
 68c:	0f 91       	pop	r16
 68e:	08 95       	ret

00000690 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 690:	1f 92       	push	r1
 692:	0f 92       	push	r0
 694:	0f b6       	in	r0, 0x3f	; 63
 696:	0f 92       	push	r0
 698:	11 24       	eor	r1, r1
 69a:	2f 93       	push	r18
 69c:	3f 93       	push	r19
 69e:	8f 93       	push	r24
 6a0:	9f 93       	push	r25
 6a2:	af 93       	push	r26
 6a4:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 6a6:	80 91 d0 01 	lds	r24, 0x01D0
 6aa:	90 91 d1 01 	lds	r25, 0x01D1
 6ae:	a0 91 d2 01 	lds	r26, 0x01D2
 6b2:	b0 91 d3 01 	lds	r27, 0x01D3
	unsigned char f = timer0_fract;
 6b6:	30 91 cf 01 	lds	r19, 0x01CF

	m += MILLIS_INC;
	f += FRACT_INC;
 6ba:	23 e0       	ldi	r18, 0x03	; 3
 6bc:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 6be:	2d 37       	cpi	r18, 0x7D	; 125
 6c0:	20 f4       	brcc	.+8      	; 0x6ca <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 6c2:	01 96       	adiw	r24, 0x01	; 1
 6c4:	a1 1d       	adc	r26, r1
 6c6:	b1 1d       	adc	r27, r1
 6c8:	05 c0       	rjmp	.+10     	; 0x6d4 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 6ca:	26 e8       	ldi	r18, 0x86	; 134
 6cc:	23 0f       	add	r18, r19
		m += 1;
 6ce:	02 96       	adiw	r24, 0x02	; 2
 6d0:	a1 1d       	adc	r26, r1
 6d2:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 6d4:	20 93 cf 01 	sts	0x01CF, r18
	timer0_millis = m;
 6d8:	80 93 d0 01 	sts	0x01D0, r24
 6dc:	90 93 d1 01 	sts	0x01D1, r25
 6e0:	a0 93 d2 01 	sts	0x01D2, r26
 6e4:	b0 93 d3 01 	sts	0x01D3, r27
	timer0_overflow_count++;
 6e8:	80 91 d4 01 	lds	r24, 0x01D4
 6ec:	90 91 d5 01 	lds	r25, 0x01D5
 6f0:	a0 91 d6 01 	lds	r26, 0x01D6
 6f4:	b0 91 d7 01 	lds	r27, 0x01D7
 6f8:	01 96       	adiw	r24, 0x01	; 1
 6fa:	a1 1d       	adc	r26, r1
 6fc:	b1 1d       	adc	r27, r1
 6fe:	80 93 d4 01 	sts	0x01D4, r24
 702:	90 93 d5 01 	sts	0x01D5, r25
 706:	a0 93 d6 01 	sts	0x01D6, r26
 70a:	b0 93 d7 01 	sts	0x01D7, r27
}
 70e:	bf 91       	pop	r27
 710:	af 91       	pop	r26
 712:	9f 91       	pop	r25
 714:	8f 91       	pop	r24
 716:	3f 91       	pop	r19
 718:	2f 91       	pop	r18
 71a:	0f 90       	pop	r0
 71c:	0f be       	out	0x3f, r0	; 63
 71e:	0f 90       	pop	r0
 720:	1f 90       	pop	r1
 722:	18 95       	reti

00000724 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 724:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 726:	84 b5       	in	r24, 0x24	; 36
 728:	82 60       	ori	r24, 0x02	; 2
 72a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 72c:	84 b5       	in	r24, 0x24	; 36
 72e:	81 60       	ori	r24, 0x01	; 1
 730:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 732:	85 b5       	in	r24, 0x25	; 37
 734:	82 60       	ori	r24, 0x02	; 2
 736:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 738:	85 b5       	in	r24, 0x25	; 37
 73a:	81 60       	ori	r24, 0x01	; 1
 73c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 73e:	ee e6       	ldi	r30, 0x6E	; 110
 740:	f0 e0       	ldi	r31, 0x00	; 0
 742:	80 81       	ld	r24, Z
 744:	81 60       	ori	r24, 0x01	; 1
 746:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 748:	e1 e8       	ldi	r30, 0x81	; 129
 74a:	f0 e0       	ldi	r31, 0x00	; 0
 74c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 74e:	80 81       	ld	r24, Z
 750:	82 60       	ori	r24, 0x02	; 2
 752:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 754:	80 81       	ld	r24, Z
 756:	81 60       	ori	r24, 0x01	; 1
 758:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 75a:	e0 e8       	ldi	r30, 0x80	; 128
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	80 81       	ld	r24, Z
 760:	81 60       	ori	r24, 0x01	; 1
 762:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 764:	e1 eb       	ldi	r30, 0xB1	; 177
 766:	f0 e0       	ldi	r31, 0x00	; 0
 768:	80 81       	ld	r24, Z
 76a:	84 60       	ori	r24, 0x04	; 4
 76c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 76e:	e0 eb       	ldi	r30, 0xB0	; 176
 770:	f0 e0       	ldi	r31, 0x00	; 0
 772:	80 81       	ld	r24, Z
 774:	81 60       	ori	r24, 0x01	; 1
 776:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 778:	ea e7       	ldi	r30, 0x7A	; 122
 77a:	f0 e0       	ldi	r31, 0x00	; 0
 77c:	80 81       	ld	r24, Z
 77e:	84 60       	ori	r24, 0x04	; 4
 780:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 782:	80 81       	ld	r24, Z
 784:	82 60       	ori	r24, 0x02	; 2
 786:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 788:	80 81       	ld	r24, Z
 78a:	81 60       	ori	r24, 0x01	; 1
 78c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 78e:	80 81       	ld	r24, Z
 790:	80 68       	ori	r24, 0x80	; 128
 792:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 794:	10 92 c1 00 	sts	0x00C1, r1
 798:	08 95       	ret

0000079a <__vector_13>:
/** Don't add an extra SCLK pulse after switching from dot-correction mode. */
static uint8_t firstGSInput;

/** Interrupt called after an XLAT pulse to prevent more XLAT pulses. */
ISR(TIMER1_OVF_vect)
{
 79a:	1f 92       	push	r1
 79c:	0f 92       	push	r0
 79e:	0f b6       	in	r0, 0x3f	; 63
 7a0:	0f 92       	push	r0
 7a2:	11 24       	eor	r1, r1
 7a4:	2f 93       	push	r18
 7a6:	3f 93       	push	r19
 7a8:	4f 93       	push	r20
 7aa:	5f 93       	push	r21
 7ac:	6f 93       	push	r22
 7ae:	7f 93       	push	r23
 7b0:	8f 93       	push	r24
 7b2:	9f 93       	push	r25
 7b4:	af 93       	push	r26
 7b6:	bf 93       	push	r27
 7b8:	ef 93       	push	r30
 7ba:	ff 93       	push	r31
    disable_XLAT_pulses();
 7bc:	80 e2       	ldi	r24, 0x20	; 32
 7be:	80 93 80 00 	sts	0x0080, r24
    clear_XLAT_interrupt();
 7c2:	10 92 6f 00 	sts	0x006F, r1
    tlc_needXLAT = 0;
 7c6:	10 92 f4 01 	sts	0x01F4, r1
    if (tlc_onUpdateFinished) {
 7ca:	80 91 f2 01 	lds	r24, 0x01F2
 7ce:	90 91 f3 01 	lds	r25, 0x01F3
 7d2:	89 2b       	or	r24, r25
 7d4:	31 f0       	breq	.+12     	; 0x7e2 <__vector_13+0x48>
        sei();
 7d6:	78 94       	sei
        tlc_onUpdateFinished();
 7d8:	e0 91 f2 01 	lds	r30, 0x01F2
 7dc:	f0 91 f3 01 	lds	r31, 0x01F3
 7e0:	09 95       	icall
    }
}
 7e2:	ff 91       	pop	r31
 7e4:	ef 91       	pop	r30
 7e6:	bf 91       	pop	r27
 7e8:	af 91       	pop	r26
 7ea:	9f 91       	pop	r25
 7ec:	8f 91       	pop	r24
 7ee:	7f 91       	pop	r23
 7f0:	6f 91       	pop	r22
 7f2:	5f 91       	pop	r21
 7f4:	4f 91       	pop	r20
 7f6:	3f 91       	pop	r19
 7f8:	2f 91       	pop	r18
 7fa:	0f 90       	pop	r0
 7fc:	0f be       	out	0x3f, r0	; 63
 7fe:	0f 90       	pop	r0
 800:	1f 90       	pop	r1
 802:	18 95       	reti

00000804 <_ZN7Tlc59403setEhj>:
           channel 0, OUT0 of the next TLC is channel 16, etc.
    \param value (0-4095).  The grayscale value, 4095 is maximum.
    \see get */
void Tlc5940::set(TLC_CHANNEL_TYPE channel, uint16_t value)
{
    TLC_CHANNEL_TYPE index8 = (NUM_TLCS * 16 - 1) - channel;
 804:	8f e0       	ldi	r24, 0x0F	; 15
 806:	86 1b       	sub	r24, r22
    uint8_t *index12p = tlc_GSData + ((((uint16_t)index8) * 3) >> 1);
 808:	93 e0       	ldi	r25, 0x03	; 3
 80a:	89 9f       	mul	r24, r25
 80c:	f0 01       	movw	r30, r0
 80e:	11 24       	eor	r1, r1
 810:	f6 95       	lsr	r31
 812:	e7 95       	ror	r30
 814:	e6 52       	subi	r30, 0x26	; 38
 816:	fe 4f       	sbci	r31, 0xFE	; 254
    if (index8 & 1) { // starts in the middle
 818:	80 ff       	sbrs	r24, 0
 81a:	05 c0       	rjmp	.+10     	; 0x826 <_ZN7Tlc59403setEhj+0x22>
                      // first 4 bits intact | 4 top bits of value
        *index12p = (*index12p & 0xF0) | (value >> 8);
 81c:	80 81       	ld	r24, Z
 81e:	80 7f       	andi	r24, 0xF0	; 240
 820:	85 2b       	or	r24, r21
 822:	80 83       	st	Z, r24
 824:	0c c0       	rjmp	.+24     	; 0x83e <_ZN7Tlc59403setEhj+0x3a>
                      // 8 lower bits of value
        *(++index12p) = value & 0xFF;
    } else { // starts clean
                      // 8 upper bits of value
        *(index12p++) = value >> 4;
 826:	ca 01       	movw	r24, r20
 828:	24 e0       	ldi	r18, 0x04	; 4
 82a:	96 95       	lsr	r25
 82c:	87 95       	ror	r24
 82e:	2a 95       	dec	r18
 830:	e1 f7       	brne	.-8      	; 0x82a <_ZN7Tlc59403setEhj+0x26>
 832:	80 83       	st	Z, r24
                      // 4 lower bits of value | last 4 bits intact
        *index12p = ((uint8_t)(value << 4)) | (*index12p & 0xF);
 834:	81 81       	ldd	r24, Z+1	; 0x01
 836:	8f 70       	andi	r24, 0x0F	; 15
 838:	42 95       	swap	r20
 83a:	40 7f       	andi	r20, 0xF0	; 240
 83c:	48 2b       	or	r20, r24
 83e:	41 83       	std	Z+1, r20	; 0x01
 840:	08 95       	ret

00000842 <_ZN7Tlc59406setAllEj>:

/** Sets all channels to value.
    \param value grayscale value (0 - 4095) */
void Tlc5940::setAll(uint16_t value)
{
    uint8_t firstByte = value >> 4;
 842:	cb 01       	movw	r24, r22
 844:	24 e0       	ldi	r18, 0x04	; 4
 846:	96 95       	lsr	r25
 848:	87 95       	ror	r24
 84a:	2a 95       	dec	r18
 84c:	e1 f7       	brne	.-8      	; 0x846 <_ZN7Tlc59406setAllEj+0x4>
 84e:	98 2f       	mov	r25, r24
    uint8_t secondByte = (value << 4) | (value >> 8);
 850:	26 2f       	mov	r18, r22
 852:	86 2f       	mov	r24, r22
 854:	82 95       	swap	r24
 856:	80 7f       	andi	r24, 0xF0	; 240
 858:	87 2b       	or	r24, r23
    uint8_t *p = tlc_GSData;
 85a:	ea ed       	ldi	r30, 0xDA	; 218
 85c:	f1 e0       	ldi	r31, 0x01	; 1
    while (p < tlc_GSData + NUM_TLCS * 24) {
        *p++ = firstByte;
 85e:	90 83       	st	Z, r25
        *p++ = secondByte;
 860:	81 83       	std	Z+1, r24	; 0x01
 862:	33 96       	adiw	r30, 0x03	; 3
 864:	df 01       	movw	r26, r30
 866:	11 97       	sbiw	r26, 0x01	; 1
        *p++ = (uint8_t)value;
 868:	2c 93       	st	X, r18
void Tlc5940::setAll(uint16_t value)
{
    uint8_t firstByte = value >> 4;
    uint8_t secondByte = (value << 4) | (value >> 8);
    uint8_t *p = tlc_GSData;
    while (p < tlc_GSData + NUM_TLCS * 24) {
 86a:	31 e0       	ldi	r19, 0x01	; 1
 86c:	e2 3f       	cpi	r30, 0xF2	; 242
 86e:	f3 07       	cpc	r31, r19
 870:	b0 f3       	brcs	.-20     	; 0x85e <_ZN7Tlc59406setAllEj+0x1c>
        *p++ = firstByte;
        *p++ = secondByte;
        *p++ = (uint8_t)value;
    }
}
 872:	08 95       	ret

00000874 <_ZN7Tlc59405clearEv>:
/** Clears the grayscale data array, #tlc_GSData, but does not shift in any
    data.  This call should be followed by update() if you are turning off
    all the outputs. */
void Tlc5940::clear(void)
{
    setAll(0);
 874:	60 e0       	ldi	r22, 0x00	; 0
 876:	70 e0       	ldi	r23, 0x00	; 0
 878:	0c 94 21 04 	jmp	0x842	; 0x842 <_ZN7Tlc59406setAllEj>

0000087c <_Z15tlc_shift8_initv>:
#elif DATA_TRANSFER_MODE == TLC_SPI

/** Initializes the SPI module to double speed (f_osc / 2) */
void tlc_shift8_init(void)
{
    SIN_DDR    |= _BV(SIN_PIN);    // SPI MOSI as output
 87c:	23 9a       	sbi	0x04, 3	; 4
    SCLK_DDR   |= _BV(SCLK_PIN);   // SPI SCK as output
 87e:	25 9a       	sbi	0x04, 5	; 4
    TLC_SS_DDR |= _BV(TLC_SS_PIN); // SPI SS as output
 880:	22 9a       	sbi	0x04, 2	; 4

    SCLK_PORT &= ~_BV(SCLK_PIN);
 882:	2d 98       	cbi	0x05, 5	; 5

    SPSR = _BV(SPI2X); // double speed (f_osc / 2)
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	8d bd       	out	0x2d, r24	; 45
    SPCR = _BV(SPE)    // enable SPI
         | _BV(MSTR);  // master mode
 888:	80 e5       	ldi	r24, 0x50	; 80
 88a:	8c bd       	out	0x2c, r24	; 44
 88c:	08 95       	ret

0000088e <_Z10tlc_shift8h>:
}

/** Shifts out a byte, MSB first */
void tlc_shift8(uint8_t byte)
{
    SPDR = byte; // starts transmission
 88e:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & _BV(SPIF)))
 890:	0d b4       	in	r0, 0x2d	; 45
 892:	07 fe       	sbrs	r0, 7
 894:	fd cf       	rjmp	.-6      	; 0x890 <_Z10tlc_shift8h+0x2>
        ; // wait for transmission complete
}
 896:	08 95       	ret

00000898 <_ZN7Tlc59406updateEv>:
    or
    \code while(tlc_needXLAT); \endcode
    \returns 1 if there is data waiting to be latched, 0 if data was
             successfully shifted in */
uint8_t Tlc5940::update(void)
{
 898:	1f 93       	push	r17
 89a:	cf 93       	push	r28
 89c:	df 93       	push	r29
    if (tlc_needXLAT) {
 89e:	10 91 f4 01 	lds	r17, 0x01F4
 8a2:	11 11       	cpse	r17, r1
 8a4:	29 c0       	rjmp	.+82     	; 0x8f8 <_ZN7Tlc59406updateEv+0x60>
        return 1;
    }
    disable_XLAT_pulses();
 8a6:	80 e2       	ldi	r24, 0x20	; 32
 8a8:	80 93 80 00 	sts	0x0080, r24
    if (firstGSInput) {
 8ac:	80 91 d9 01 	lds	r24, 0x01D9
 8b0:	88 23       	and	r24, r24
 8b2:	29 f0       	breq	.+10     	; 0x8be <_ZN7Tlc59406updateEv+0x26>
        // adds an extra SCLK pulse unless we've just set dot-correction data
        firstGSInput = 0;
 8b4:	10 92 d9 01 	sts	0x01D9, r1
    or
    \code while(tlc_needXLAT); \endcode
    \returns 1 if there is data waiting to be latched, 0 if data was
             successfully shifted in */
uint8_t Tlc5940::update(void)
{
 8b8:	ca ed       	ldi	r28, 0xDA	; 218
 8ba:	d1 e0       	ldi	r29, 0x01	; 1
 8bc:	03 c0       	rjmp	.+6      	; 0x8c4 <_ZN7Tlc59406updateEv+0x2c>
    disable_XLAT_pulses();
    if (firstGSInput) {
        // adds an extra SCLK pulse unless we've just set dot-correction data
        firstGSInput = 0;
    } else {
        pulse_pin(SCLK_PORT, SCLK_PIN);
 8be:	2d 9a       	sbi	0x05, 5	; 5
 8c0:	2d 98       	cbi	0x05, 5	; 5
 8c2:	fa cf       	rjmp	.-12     	; 0x8b8 <_ZN7Tlc59406updateEv+0x20>
    }
    uint8_t *p = tlc_GSData;
    while (p < tlc_GSData + NUM_TLCS * 24) {
        tlc_shift8(*p++);
 8c4:	88 81       	ld	r24, Y
 8c6:	0e 94 47 04 	call	0x88e	; 0x88e <_Z10tlc_shift8h>
        tlc_shift8(*p++);
 8ca:	89 81       	ldd	r24, Y+1	; 0x01
 8cc:	0e 94 47 04 	call	0x88e	; 0x88e <_Z10tlc_shift8h>
 8d0:	23 96       	adiw	r28, 0x03	; 3
 8d2:	fe 01       	movw	r30, r28
 8d4:	31 97       	sbiw	r30, 0x01	; 1
        tlc_shift8(*p++);
 8d6:	80 81       	ld	r24, Z
 8d8:	0e 94 47 04 	call	0x88e	; 0x88e <_Z10tlc_shift8h>
        firstGSInput = 0;
    } else {
        pulse_pin(SCLK_PORT, SCLK_PIN);
    }
    uint8_t *p = tlc_GSData;
    while (p < tlc_GSData + NUM_TLCS * 24) {
 8dc:	81 e0       	ldi	r24, 0x01	; 1
 8de:	c2 3f       	cpi	r28, 0xF2	; 242
 8e0:	d8 07       	cpc	r29, r24
 8e2:	80 f3       	brcs	.-32     	; 0x8c4 <_ZN7Tlc59406updateEv+0x2c>
        tlc_shift8(*p++);
        tlc_shift8(*p++);
        tlc_shift8(*p++);
    }
    tlc_needXLAT = 1;
 8e4:	81 e0       	ldi	r24, 0x01	; 1
 8e6:	80 93 f4 01 	sts	0x01F4, r24
    enable_XLAT_pulses();
 8ea:	90 ea       	ldi	r25, 0xA0	; 160
 8ec:	90 93 80 00 	sts	0x0080, r25
    set_XLAT_interrupt();
 8f0:	b0 9a       	sbi	0x16, 0	; 22
 8f2:	80 93 6f 00 	sts	0x006F, r24
 8f6:	01 c0       	rjmp	.+2      	; 0x8fa <_ZN7Tlc59406updateEv+0x62>
    \returns 1 if there is data waiting to be latched, 0 if data was
             successfully shifted in */
uint8_t Tlc5940::update(void)
{
    if (tlc_needXLAT) {
        return 1;
 8f8:	11 e0       	ldi	r17, 0x01	; 1
    }
    tlc_needXLAT = 1;
    enable_XLAT_pulses();
    set_XLAT_interrupt();
    return 0;
}
 8fa:	81 2f       	mov	r24, r17
 8fc:	df 91       	pop	r29
 8fe:	cf 91       	pop	r28
 900:	1f 91       	pop	r17
 902:	08 95       	ret

00000904 <_ZN7Tlc59404initEj>:
/** Pin i/o and Timer setup.  The grayscale register will be reset to all
    zeros, or whatever initialValue is set to and the Timers will start.
    \param initialValue = 0, optional parameter specifing the inital startup
           value */
void Tlc5940::init(uint16_t initialValue)
{
 904:	0f 93       	push	r16
 906:	1f 93       	push	r17
 908:	cf 93       	push	r28
 90a:	df 93       	push	r29
 90c:	00 d0       	rcall	.+0      	; 0x90e <_ZN7Tlc59404initEj+0xa>
 90e:	cd b7       	in	r28, 0x3d	; 61
 910:	de b7       	in	r29, 0x3e	; 62
 912:	8c 01       	movw	r16, r24
    /* Pin Setup */
    XLAT_DDR |= _BV(XLAT_PIN);
 914:	21 9a       	sbi	0x04, 1	; 4
    BLANK_DDR |= _BV(BLANK_PIN);
 916:	22 9a       	sbi	0x04, 2	; 4
    GSCLK_DDR |= _BV(GSCLK_PIN);
 918:	53 9a       	sbi	0x0a, 3	; 10
#endif
#if XERR_ENABLED
    XERR_DDR &= ~_BV(XERR_PIN);   // XERR as input
    XERR_PORT |= _BV(XERR_PIN);   // enable pull-up resistor
#endif
    BLANK_PORT |= _BV(BLANK_PIN); // leave blank high (until the timers start)
 91a:	2a 9a       	sbi	0x05, 2	; 5

    tlc_shift8_init();
 91c:	69 83       	std	Y+1, r22	; 0x01
 91e:	7a 83       	std	Y+2, r23	; 0x02
 920:	0e 94 3e 04 	call	0x87c	; 0x87c <_Z15tlc_shift8_initv>

    setAll(initialValue);
 924:	69 81       	ldd	r22, Y+1	; 0x01
 926:	7a 81       	ldd	r23, Y+2	; 0x02
 928:	c8 01       	movw	r24, r16
 92a:	0e 94 21 04 	call	0x842	; 0x842 <_ZN7Tlc59406setAllEj>
    update();
 92e:	c8 01       	movw	r24, r16
 930:	0e 94 4c 04 	call	0x898	; 0x898 <_ZN7Tlc59406updateEv>
    disable_XLAT_pulses();
 934:	e0 e8       	ldi	r30, 0x80	; 128
 936:	f0 e0       	ldi	r31, 0x00	; 0
 938:	80 e2       	ldi	r24, 0x20	; 32
 93a:	80 83       	st	Z, r24
    clear_XLAT_interrupt();
 93c:	10 92 6f 00 	sts	0x006F, r1
    tlc_needXLAT = 0;
 940:	10 92 f4 01 	sts	0x01F4, r1
    pulse_pin(XLAT_PORT, XLAT_PIN);
 944:	29 9a       	sbi	0x05, 1	; 5
 946:	29 98       	cbi	0x05, 1	; 5


    /* Timer Setup */

    /* Timer 1 - BLANK / XLAT */
    TCCR1A = _BV(COM1B1);  // non inverting, output on OC1B, BLANK
 948:	80 83       	st	Z, r24
    TCCR1B = _BV(WGM13);   // Phase/freq correct PWM, ICR1 top
 94a:	e1 e8       	ldi	r30, 0x81	; 129
 94c:	f0 e0       	ldi	r31, 0x00	; 0
 94e:	80 e1       	ldi	r24, 0x10	; 16
 950:	80 83       	st	Z, r24
    OCR1A = 1;             // duty factor on OC1A, XLAT is inside BLANK
 952:	81 e0       	ldi	r24, 0x01	; 1
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	90 93 89 00 	sts	0x0089, r25
 95a:	80 93 88 00 	sts	0x0088, r24
    OCR1B = 2;             // duty factor on BLANK (larger than OCR1A (XLAT))
 95e:	82 e0       	ldi	r24, 0x02	; 2
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	90 93 8b 00 	sts	0x008B, r25
 966:	80 93 8a 00 	sts	0x008A, r24
    ICR1 = TLC_PWM_PERIOD; // see tlc_config.h
 96a:	80 e0       	ldi	r24, 0x00	; 0
 96c:	90 e2       	ldi	r25, 0x20	; 32
 96e:	90 93 87 00 	sts	0x0087, r25
 972:	80 93 86 00 	sts	0x0086, r24
           | _BV(WGM33);      // Fast pwm with ICR3 top
#else
    TCCR2A = _BV(COM2B1)      // set on BOTTOM, clear on OCR2A (non-inverting),
                              // output on OC2B
           | _BV(WGM21)       // Fast pwm with OCR2A top
           | _BV(WGM20);      // Fast pwm with OCR2A top
 976:	83 e2       	ldi	r24, 0x23	; 35
 978:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = _BV(WGM22);      // Fast pwm with OCR2A top
 97c:	a1 eb       	ldi	r26, 0xB1	; 177
 97e:	b0 e0       	ldi	r27, 0x00	; 0
 980:	88 e0       	ldi	r24, 0x08	; 8
 982:	8c 93       	st	X, r24
    OCR2B = 0;                // duty factor (as short a pulse as possible)
 984:	10 92 b4 00 	sts	0x00B4, r1
    OCR2A = TLC_GSCLK_PERIOD; // see tlc_config.h
 988:	83 e0       	ldi	r24, 0x03	; 3
 98a:	80 93 b3 00 	sts	0x00B3, r24
    TCCR2B |= _BV(CS20);      // no prescale, (start pwm output)
 98e:	8c 91       	ld	r24, X
 990:	81 60       	ori	r24, 0x01	; 1
 992:	8c 93       	st	X, r24
#endif
    TCCR1B |= _BV(CS10);      // no prescale, (start pwm output)
 994:	80 81       	ld	r24, Z
 996:	81 60       	ori	r24, 0x01	; 1
 998:	80 83       	st	Z, r24
    update();
 99a:	c8 01       	movw	r24, r16
}
 99c:	0f 90       	pop	r0
 99e:	0f 90       	pop	r0
 9a0:	df 91       	pop	r29
 9a2:	cf 91       	pop	r28
 9a4:	1f 91       	pop	r17
 9a6:	0f 91       	pop	r16
    OCR2B = 0;                // duty factor (as short a pulse as possible)
    OCR2A = TLC_GSCLK_PERIOD; // see tlc_config.h
    TCCR2B |= _BV(CS20);      // no prescale, (start pwm output)
#endif
    TCCR1B |= _BV(CS10);      // no prescale, (start pwm output)
    update();
 9a8:	0c 94 4c 04 	jmp	0x898	; 0x898 <_ZN7Tlc59406updateEv>

000009ac <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 9ac:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 9ae:	91 8d       	ldd	r25, Z+25	; 0x19
 9b0:	22 8d       	ldd	r18, Z+26	; 0x1a
 9b2:	89 2f       	mov	r24, r25
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	80 5c       	subi	r24, 0xC0	; 192
 9b8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ba:	82 1b       	sub	r24, r18
 9bc:	91 09       	sbc	r25, r1
}
 9be:	8f 73       	andi	r24, 0x3F	; 63
 9c0:	99 27       	eor	r25, r25
 9c2:	08 95       	ret

000009c4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 9c4:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 9c6:	91 8d       	ldd	r25, Z+25	; 0x19
 9c8:	82 8d       	ldd	r24, Z+26	; 0x1a
 9ca:	98 17       	cp	r25, r24
 9cc:	31 f0       	breq	.+12     	; 0x9da <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 9ce:	82 8d       	ldd	r24, Z+26	; 0x1a
 9d0:	e8 0f       	add	r30, r24
 9d2:	f1 1d       	adc	r31, r1
 9d4:	85 8d       	ldd	r24, Z+29	; 0x1d
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 9da:	8f ef       	ldi	r24, 0xFF	; 255
 9dc:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 9de:	08 95       	ret

000009e0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 9e0:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 9e2:	91 8d       	ldd	r25, Z+25	; 0x19
 9e4:	82 8d       	ldd	r24, Z+26	; 0x1a
 9e6:	98 17       	cp	r25, r24
 9e8:	61 f0       	breq	.+24     	; 0xa02 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 9ea:	82 8d       	ldd	r24, Z+26	; 0x1a
 9ec:	df 01       	movw	r26, r30
 9ee:	a8 0f       	add	r26, r24
 9f0:	b1 1d       	adc	r27, r1
 9f2:	5d 96       	adiw	r26, 0x1d	; 29
 9f4:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 9f6:	92 8d       	ldd	r25, Z+26	; 0x1a
 9f8:	9f 5f       	subi	r25, 0xFF	; 255
 9fa:	9f 73       	andi	r25, 0x3F	; 63
 9fc:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 a02:	8f ef       	ldi	r24, 0xFF	; 255
 a04:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 a06:	08 95       	ret

00000a08 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 a08:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 a0a:	84 8d       	ldd	r24, Z+28	; 0x1c
 a0c:	df 01       	movw	r26, r30
 a0e:	a8 0f       	add	r26, r24
 a10:	b1 1d       	adc	r27, r1
 a12:	a3 5a       	subi	r26, 0xA3	; 163
 a14:	bf 4f       	sbci	r27, 0xFF	; 255
 a16:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 a18:	84 8d       	ldd	r24, Z+28	; 0x1c
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	01 96       	adiw	r24, 0x01	; 1
 a1e:	8f 73       	andi	r24, 0x3F	; 63
 a20:	99 27       	eor	r25, r25
 a22:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 a24:	a6 89       	ldd	r26, Z+22	; 0x16
 a26:	b7 89       	ldd	r27, Z+23	; 0x17
 a28:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 a2a:	a0 89       	ldd	r26, Z+16	; 0x10
 a2c:	b1 89       	ldd	r27, Z+17	; 0x11
 a2e:	8c 91       	ld	r24, X
 a30:	80 64       	ori	r24, 0x40	; 64
 a32:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 a34:	93 8d       	ldd	r25, Z+27	; 0x1b
 a36:	84 8d       	ldd	r24, Z+28	; 0x1c
 a38:	98 13       	cpse	r25, r24
 a3a:	06 c0       	rjmp	.+12     	; 0xa48 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 a3c:	02 88       	ldd	r0, Z+18	; 0x12
 a3e:	f3 89       	ldd	r31, Z+19	; 0x13
 a40:	e0 2d       	mov	r30, r0
 a42:	80 81       	ld	r24, Z
 a44:	8f 7d       	andi	r24, 0xDF	; 223
 a46:	80 83       	st	Z, r24
 a48:	08 95       	ret

00000a4a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 a4a:	cf 93       	push	r28
 a4c:	df 93       	push	r29
 a4e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 a50:	88 8d       	ldd	r24, Y+24	; 0x18
 a52:	88 23       	and	r24, r24
 a54:	c9 f0       	breq	.+50     	; 0xa88 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 a56:	ea 89       	ldd	r30, Y+18	; 0x12
 a58:	fb 89       	ldd	r31, Y+19	; 0x13
 a5a:	80 81       	ld	r24, Z
 a5c:	85 fd       	sbrc	r24, 5
 a5e:	05 c0       	rjmp	.+10     	; 0xa6a <_ZN14HardwareSerial5flushEv+0x20>
 a60:	a8 89       	ldd	r26, Y+16	; 0x10
 a62:	b9 89       	ldd	r27, Y+17	; 0x11
 a64:	8c 91       	ld	r24, X
 a66:	86 fd       	sbrc	r24, 6
 a68:	0f c0       	rjmp	.+30     	; 0xa88 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 a6a:	0f b6       	in	r0, 0x3f	; 63
 a6c:	07 fc       	sbrc	r0, 7
 a6e:	f5 cf       	rjmp	.-22     	; 0xa5a <_ZN14HardwareSerial5flushEv+0x10>
 a70:	80 81       	ld	r24, Z
 a72:	85 ff       	sbrs	r24, 5
 a74:	f2 cf       	rjmp	.-28     	; 0xa5a <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 a76:	a8 89       	ldd	r26, Y+16	; 0x10
 a78:	b9 89       	ldd	r27, Y+17	; 0x11
 a7a:	8c 91       	ld	r24, X
 a7c:	85 ff       	sbrs	r24, 5
 a7e:	ed cf       	rjmp	.-38     	; 0xa5a <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 a80:	ce 01       	movw	r24, r28
 a82:	0e 94 04 05 	call	0xa08	; 0xa08 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 a86:	e7 cf       	rjmp	.-50     	; 0xa56 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 a88:	df 91       	pop	r29
 a8a:	cf 91       	pop	r28
 a8c:	08 95       	ret

00000a8e <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 a8e:	ef 92       	push	r14
 a90:	ff 92       	push	r15
 a92:	0f 93       	push	r16
 a94:	1f 93       	push	r17
 a96:	cf 93       	push	r28
 a98:	df 93       	push	r29
 a9a:	ec 01       	movw	r28, r24
  _written = true;
 a9c:	81 e0       	ldi	r24, 0x01	; 1
 a9e:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 aa0:	9b 8d       	ldd	r25, Y+27	; 0x1b
 aa2:	8c 8d       	ldd	r24, Y+28	; 0x1c
 aa4:	98 13       	cpse	r25, r24
 aa6:	05 c0       	rjmp	.+10     	; 0xab2 <_ZN14HardwareSerial5writeEh+0x24>
 aa8:	e8 89       	ldd	r30, Y+16	; 0x10
 aaa:	f9 89       	ldd	r31, Y+17	; 0x11
 aac:	80 81       	ld	r24, Z
 aae:	85 fd       	sbrc	r24, 5
 ab0:	24 c0       	rjmp	.+72     	; 0xafa <_ZN14HardwareSerial5writeEh+0x6c>
 ab2:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 ab4:	0b 8d       	ldd	r16, Y+27	; 0x1b
 ab6:	10 e0       	ldi	r17, 0x00	; 0
 ab8:	0f 5f       	subi	r16, 0xFF	; 255
 aba:	1f 4f       	sbci	r17, 0xFF	; 255
 abc:	0f 73       	andi	r16, 0x3F	; 63
 abe:	11 27       	eor	r17, r17
 ac0:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 ac2:	8c 8d       	ldd	r24, Y+28	; 0x1c
 ac4:	e8 12       	cpse	r14, r24
 ac6:	0c c0       	rjmp	.+24     	; 0xae0 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 ac8:	0f b6       	in	r0, 0x3f	; 63
 aca:	07 fc       	sbrc	r0, 7
 acc:	fa cf       	rjmp	.-12     	; 0xac2 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 ace:	e8 89       	ldd	r30, Y+16	; 0x10
 ad0:	f9 89       	ldd	r31, Y+17	; 0x11
 ad2:	80 81       	ld	r24, Z
 ad4:	85 ff       	sbrs	r24, 5
 ad6:	f5 cf       	rjmp	.-22     	; 0xac2 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 ad8:	ce 01       	movw	r24, r28
 ada:	0e 94 04 05 	call	0xa08	; 0xa08 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 ade:	f1 cf       	rjmp	.-30     	; 0xac2 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 ae0:	8b 8d       	ldd	r24, Y+27	; 0x1b
 ae2:	fe 01       	movw	r30, r28
 ae4:	e8 0f       	add	r30, r24
 ae6:	f1 1d       	adc	r31, r1
 ae8:	e3 5a       	subi	r30, 0xA3	; 163
 aea:	ff 4f       	sbci	r31, 0xFF	; 255
 aec:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 aee:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 af0:	ea 89       	ldd	r30, Y+18	; 0x12
 af2:	fb 89       	ldd	r31, Y+19	; 0x13
 af4:	80 81       	ld	r24, Z
 af6:	80 62       	ori	r24, 0x20	; 32
 af8:	07 c0       	rjmp	.+14     	; 0xb08 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 afa:	ee 89       	ldd	r30, Y+22	; 0x16
 afc:	ff 89       	ldd	r31, Y+23	; 0x17
 afe:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 b00:	e8 89       	ldd	r30, Y+16	; 0x10
 b02:	f9 89       	ldd	r31, Y+17	; 0x11
 b04:	80 81       	ld	r24, Z
 b06:	80 64       	ori	r24, 0x40	; 64
 b08:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 b0a:	81 e0       	ldi	r24, 0x01	; 1
 b0c:	90 e0       	ldi	r25, 0x00	; 0
 b0e:	df 91       	pop	r29
 b10:	cf 91       	pop	r28
 b12:	1f 91       	pop	r17
 b14:	0f 91       	pop	r16
 b16:	ff 90       	pop	r15
 b18:	ef 90       	pop	r14
 b1a:	08 95       	ret

00000b1c <__divmodhi4>:
 b1c:	97 fb       	bst	r25, 7
 b1e:	07 2e       	mov	r0, r23
 b20:	16 f4       	brtc	.+4      	; 0xb26 <__divmodhi4+0xa>
 b22:	00 94       	com	r0
 b24:	07 d0       	rcall	.+14     	; 0xb34 <__divmodhi4_neg1>
 b26:	77 fd       	sbrc	r23, 7
 b28:	09 d0       	rcall	.+18     	; 0xb3c <__divmodhi4_neg2>
 b2a:	0e 94 c4 05 	call	0xb88	; 0xb88 <__udivmodhi4>
 b2e:	07 fc       	sbrc	r0, 7
 b30:	05 d0       	rcall	.+10     	; 0xb3c <__divmodhi4_neg2>
 b32:	3e f4       	brtc	.+14     	; 0xb42 <__divmodhi4_exit>

00000b34 <__divmodhi4_neg1>:
 b34:	90 95       	com	r25
 b36:	81 95       	neg	r24
 b38:	9f 4f       	sbci	r25, 0xFF	; 255
 b3a:	08 95       	ret

00000b3c <__divmodhi4_neg2>:
 b3c:	70 95       	com	r23
 b3e:	61 95       	neg	r22
 b40:	7f 4f       	sbci	r23, 0xFF	; 255

00000b42 <__divmodhi4_exit>:
 b42:	08 95       	ret

00000b44 <__udivmodsi4>:
 b44:	a1 e2       	ldi	r26, 0x21	; 33
 b46:	1a 2e       	mov	r1, r26
 b48:	aa 1b       	sub	r26, r26
 b4a:	bb 1b       	sub	r27, r27
 b4c:	fd 01       	movw	r30, r26
 b4e:	0d c0       	rjmp	.+26     	; 0xb6a <__udivmodsi4_ep>

00000b50 <__udivmodsi4_loop>:
 b50:	aa 1f       	adc	r26, r26
 b52:	bb 1f       	adc	r27, r27
 b54:	ee 1f       	adc	r30, r30
 b56:	ff 1f       	adc	r31, r31
 b58:	a2 17       	cp	r26, r18
 b5a:	b3 07       	cpc	r27, r19
 b5c:	e4 07       	cpc	r30, r20
 b5e:	f5 07       	cpc	r31, r21
 b60:	20 f0       	brcs	.+8      	; 0xb6a <__udivmodsi4_ep>
 b62:	a2 1b       	sub	r26, r18
 b64:	b3 0b       	sbc	r27, r19
 b66:	e4 0b       	sbc	r30, r20
 b68:	f5 0b       	sbc	r31, r21

00000b6a <__udivmodsi4_ep>:
 b6a:	66 1f       	adc	r22, r22
 b6c:	77 1f       	adc	r23, r23
 b6e:	88 1f       	adc	r24, r24
 b70:	99 1f       	adc	r25, r25
 b72:	1a 94       	dec	r1
 b74:	69 f7       	brne	.-38     	; 0xb50 <__udivmodsi4_loop>
 b76:	60 95       	com	r22
 b78:	70 95       	com	r23
 b7a:	80 95       	com	r24
 b7c:	90 95       	com	r25
 b7e:	9b 01       	movw	r18, r22
 b80:	ac 01       	movw	r20, r24
 b82:	bd 01       	movw	r22, r26
 b84:	cf 01       	movw	r24, r30
 b86:	08 95       	ret

00000b88 <__udivmodhi4>:
 b88:	aa 1b       	sub	r26, r26
 b8a:	bb 1b       	sub	r27, r27
 b8c:	51 e1       	ldi	r21, 0x11	; 17
 b8e:	07 c0       	rjmp	.+14     	; 0xb9e <__udivmodhi4_ep>

00000b90 <__udivmodhi4_loop>:
 b90:	aa 1f       	adc	r26, r26
 b92:	bb 1f       	adc	r27, r27
 b94:	a6 17       	cp	r26, r22
 b96:	b7 07       	cpc	r27, r23
 b98:	10 f0       	brcs	.+4      	; 0xb9e <__udivmodhi4_ep>
 b9a:	a6 1b       	sub	r26, r22
 b9c:	b7 0b       	sbc	r27, r23

00000b9e <__udivmodhi4_ep>:
 b9e:	88 1f       	adc	r24, r24
 ba0:	99 1f       	adc	r25, r25
 ba2:	5a 95       	dec	r21
 ba4:	a9 f7       	brne	.-22     	; 0xb90 <__udivmodhi4_loop>
 ba6:	80 95       	com	r24
 ba8:	90 95       	com	r25
 baa:	bc 01       	movw	r22, r24
 bac:	cd 01       	movw	r24, r26
 bae:	08 95       	ret

00000bb0 <__tablejump2__>:
 bb0:	ee 0f       	add	r30, r30
 bb2:	ff 1f       	adc	r31, r31
 bb4:	05 90       	lpm	r0, Z+
 bb6:	f4 91       	lpm	r31, Z
 bb8:	e0 2d       	mov	r30, r0
 bba:	09 94       	ijmp

00000bbc <_exit>:
 bbc:	f8 94       	cli

00000bbe <__stop_program>:
 bbe:	ff cf       	rjmp	.-2      	; 0xbbe <__stop_program>
