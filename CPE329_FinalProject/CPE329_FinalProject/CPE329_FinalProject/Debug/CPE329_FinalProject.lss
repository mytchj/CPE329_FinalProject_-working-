
CPE329_FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000ba8  00000c3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ba8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c9  00800128  00800128  00000c64  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c64  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  00000cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006c03  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014c7  00000000  00000000  00007baf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011bc  00000000  00000000  00009076  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000085c  00000000  00000000  0000a234  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a77  00000000  00000000  0000aa90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ca5  00000000  00000000  0000c507  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  0000f1ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__vector_3>
  10:	0c 94 c9 00 	jmp	0x192	; 0x192 <__vector_4>
  14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_5>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <__vector_13>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__vector_16>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_18>
  4c:	0c 94 a2 02 	jmp	0x544	; 0x544 <__vector_19>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	c8 02       	muls	r28, r24

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e8 ea       	ldi	r30, 0xA8	; 168
  7e:	fb e0       	ldi	r31, 0x0B	; 11
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a8 32       	cpi	r26, 0x28	; 40
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	a8 e2       	ldi	r26, 0x28	; 40
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a1 3f       	cpi	r26, 0xF1	; 241
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 cc 05 	call	0xb98	; 0xb98 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	81 ee       	ldi	r24, 0xE1	; 225
  c2:	94 e0       	ldi	r25, 0x04	; 4
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x6>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x10>
  ce:	00 00       	nop
int chan = 0; // LED channel

int main(void){
	_delay_ms(100);			// startup delay
	
	initGPIO();
  d0:	0e 94 4c 01 	call	0x298	; 0x298 <_Z8initGPIOv>
	//initTimers();
	
	init();					// initializations for Arduino.h
  d4:	0e 94 3e 04 	call	0x87c	; 0x87c <init>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
  d8:	26 e0       	ldi	r18, 0x06	; 6
  da:	40 e8       	ldi	r20, 0x80	; 128
  dc:	55 e2       	ldi	r21, 0x25	; 37
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	8e e2       	ldi	r24, 0x2E	; 46
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(9600);		// set baud rate for serial com
	Tlc.init();				// initialize the TLC chip
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	84 ed       	ldi	r24, 0xD4	; 212
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_ZN7Tlc59404initEj>
   
	// Turn on full, then fade off
	while(GS >= 0){
  f6:	80 91 00 01 	lds	r24, 0x0100
  fa:	90 91 01 01 	lds	r25, 0x0101
  fe:	97 fd       	sbrc	r25, 7
 100:	16 c0       	rjmp	.+44     	; 0x12e <main+0x70>
		setAllLEDs(GS,0,0);
 102:	40 e0       	ldi	r20, 0x00	; 0
 104:	50 e0       	ldi	r21, 0x00	; 0
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	70 e0       	ldi	r23, 0x00	; 0
 10a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_Z10setAllLEDsiii>
		GS--;					// increment GS
 10e:	80 91 00 01 	lds	r24, 0x0100
 112:	90 91 01 01 	lds	r25, 0x0101
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	90 93 01 01 	sts	0x0101, r25
 11c:	80 93 00 01 	sts	0x0100, r24
 120:	8f e1       	ldi	r24, 0x1F	; 31
 122:	9e e4       	ldi	r25, 0x4E	; 78
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <main+0x66>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x6c>
 12a:	00 00       	nop
 12c:	e4 cf       	rjmp	.-56     	; 0xf6 <main+0x38>
		_delay_ms(GS_DELAY);	// delay GS color
	}
   
	// Temporary idea: Determine the bottom/back LED, send it to rgbUtil so that
	//  it knows which led to cycle to next
	setBottomLED(0);
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_Z12setBottomLEDi>
	//Infintely cycle an LED around the loop
	while (1) {
		nextLED();
		setAmbientColor(GS, 0, 0);
		GS++;
		GS %= (TOP_GS/16);
 136:	ce e4       	ldi	r28, 0x4E	; 78
 138:	d0 e0       	ldi	r29, 0x00	; 0
	//  it knows which led to cycle to next
	setBottomLED(0);
   
	//Infintely cycle an LED around the loop
	while (1) {
		nextLED();
 13a:	0e 94 04 01 	call	0x208	; 0x208 <_Z7nextLEDv>
		setAmbientColor(GS, 0, 0);
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	50 e0       	ldi	r21, 0x00	; 0
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	80 91 00 01 	lds	r24, 0x0100
 14a:	90 91 01 01 	lds	r25, 0x0101
 14e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z15setAmbientColoriii>
		GS++;
 152:	80 91 00 01 	lds	r24, 0x0100
 156:	90 91 01 01 	lds	r25, 0x0101
 15a:	01 96       	adiw	r24, 0x01	; 1
		GS %= (TOP_GS/16);
 15c:	be 01       	movw	r22, r28
 15e:	0e 94 82 05 	call	0xb04	; 0xb04 <__divmodhi4>
 162:	90 93 01 01 	sts	0x0101, r25
 166:	80 93 00 01 	sts	0x0100, r24
 16a:	9f ef       	ldi	r25, 0xFF	; 255
 16c:	21 ee       	ldi	r18, 0xE1	; 225
 16e:	84 e0       	ldi	r24, 0x04	; 4
 170:	91 50       	subi	r25, 0x01	; 1
 172:	20 40       	sbci	r18, 0x00	; 0
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0xb2>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0xbc>
 17a:	00 00       	nop
 17c:	de cf       	rjmp	.-68     	; 0x13a <main+0x7c>

0000017e <__vector_3>:
}


// ISR for halleffect1 at pin D8
// enters ISR when set from high (from pull-up) to low
ISR(PCINT0_vect){
 17e:	1f 92       	push	r1
 180:	0f 92       	push	r0
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	0f 92       	push	r0
 186:	11 24       	eor	r1, r1
	
}
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <__vector_4>:

// ISR for halleffect1 at pin D7
// enters ISR when set from high (from pull-up) to low
ISR(PCINT1_vect){
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
	
}
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <__vector_5>:

// ISR for halleffect1 at pin A0
// enters ISR when set from high (from pull-up) to low
ISR(PCINT2_vect){
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
	
}
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	0f 90       	pop	r0
 1b6:	1f 90       	pop	r1
 1b8:	18 95       	reti

000001ba <_Z10setAllLEDsiii>:

int bottomLED = -1;
int currentLED = -1;
static color ambientColor = {0,0,0};

void setAllLEDs(int r, int g, int b) {
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	ec 01       	movw	r28, r24
   Serial.println(r);   // print GS data to Serial window (BAUD =9600)
 1c0:	4a e0       	ldi	r20, 0x0A	; 10
 1c2:	50 e0       	ldi	r21, 0x00	; 0
 1c4:	bc 01       	movw	r22, r24
 1c6:	8e e2       	ldi	r24, 0x2E	; 46
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_ZN5Print7printlnEii>
   Tlc.clear();      // clear TLC data
 1ce:	84 ed       	ldi	r24, 0xD4	; 212
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	0e 94 e6 04 	call	0x9cc	; 0x9cc <_ZN7Tlc59405clearEv>
   Tlc.setAll(r);     // set all TLC channel (15:0) to GS value
 1d6:	be 01       	movw	r22, r28
 1d8:	84 ed       	ldi	r24, 0xD4	; 212
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	0e 94 cd 04 	call	0x99a	; 0x99a <_ZN7Tlc59406setAllEj>
   Tlc.update();     // send GS data to TLC5940
 1e0:	84 ed       	ldi	r24, 0xD4	; 212
 1e2:	91 e0       	ldi	r25, 0x01	; 1
}
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28

void setAllLEDs(int r, int g, int b) {
   Serial.println(r);   // print GS data to Serial window (BAUD =9600)
   Tlc.clear();      // clear TLC data
   Tlc.setAll(r);     // set all TLC channel (15:0) to GS value
   Tlc.update();     // send GS data to TLC5940
 1e8:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <_ZN7Tlc59406updateEv>

000001ec <_Z12setBottomLEDi>:
}

/* Something else determines which LED is on the bottom in main */
void setBottomLED(int LED) {
   bottomLED = LED;
 1ec:	90 93 05 01 	sts	0x0105, r25
 1f0:	80 93 04 01 	sts	0x0104, r24
 1f4:	08 95       	ret

000001f6 <_Z15setAmbientColoriii>:
}

void setAmbientColor(int r, int g, int b) {
   ambientColor.r = r;
 1f6:	e8 e2       	ldi	r30, 0x28	; 40
 1f8:	f1 e0       	ldi	r31, 0x01	; 1
 1fa:	91 83       	std	Z+1, r25	; 0x01
 1fc:	80 83       	st	Z, r24
   ambientColor.g = g;
 1fe:	73 83       	std	Z+3, r23	; 0x03
 200:	62 83       	std	Z+2, r22	; 0x02
   ambientColor.b = b;
 202:	55 83       	std	Z+5, r21	; 0x05
 204:	44 83       	std	Z+4, r20	; 0x04
 206:	08 95       	ret

00000208 <_Z7nextLEDv>:
}

void nextLED() {
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
   int ndx;
   
   if (currentLED < 0)
 20c:	80 91 02 01 	lds	r24, 0x0102
 210:	90 91 03 01 	lds	r25, 0x0103
 214:	97 ff       	sbrs	r25, 7
 216:	08 c0       	rjmp	.+16     	; 0x228 <_Z7nextLEDv+0x20>
      currentLED = bottomLED; // Definitely subject to change, just a placeholder
 218:	80 91 04 01 	lds	r24, 0x0104
 21c:	90 91 05 01 	lds	r25, 0x0105
 220:	90 93 03 01 	sts	0x0103, r25
 224:	80 93 02 01 	sts	0x0102, r24
   
   Serial.println(TOP_GS);
 228:	4a e0       	ldi	r20, 0x0A	; 10
 22a:	50 e0       	ldi	r21, 0x00	; 0
 22c:	62 ee       	ldi	r22, 0xE2	; 226
 22e:	74 e0       	ldi	r23, 0x04	; 4
 230:	8e e2       	ldi	r24, 0x2E	; 46
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_ZN5Print7printlnEii>
   Tlc.clear();
 238:	84 ed       	ldi	r24, 0xD4	; 212
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <_ZN7Tlc59405clearEv>
//   Tlc.setAll(ambientColor);
   
   for (ndx = 0; ndx < NUM_LED_CHANNELS; ndx++) {
 240:	c0 e0       	ldi	r28, 0x00	; 0
 242:	d0 e0       	ldi	r29, 0x00	; 0
      if (ndx == currentLED)
 244:	80 91 02 01 	lds	r24, 0x0102
 248:	90 91 03 01 	lds	r25, 0x0103
 24c:	c8 17       	cp	r28, r24
 24e:	d9 07       	cpc	r29, r25
 250:	19 f4       	brne	.+6      	; 0x258 <_Z7nextLEDv+0x50>
         Tlc.set(ndx, TOP_GS);
 252:	42 ee       	ldi	r20, 0xE2	; 226
 254:	54 e0       	ldi	r21, 0x04	; 4
 256:	04 c0       	rjmp	.+8      	; 0x260 <_Z7nextLEDv+0x58>
      else
         Tlc.set(ndx, ambientColor.r);
 258:	40 91 28 01 	lds	r20, 0x0128
 25c:	50 91 29 01 	lds	r21, 0x0129
 260:	6c 2f       	mov	r22, r28
 262:	84 ed       	ldi	r24, 0xD4	; 212
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	0e 94 ae 04 	call	0x95c	; 0x95c <_ZN7Tlc59403setEhj>
   
   Serial.println(TOP_GS);
   Tlc.clear();
//   Tlc.setAll(ambientColor);
   
   for (ndx = 0; ndx < NUM_LED_CHANNELS; ndx++) {
 26a:	21 96       	adiw	r28, 0x01	; 1
 26c:	c0 31       	cpi	r28, 0x10	; 16
 26e:	d1 05       	cpc	r29, r1
 270:	49 f7       	brne	.-46     	; 0x244 <_Z7nextLEDv+0x3c>
         Tlc.set(ndx, TOP_GS);
      else
         Tlc.set(ndx, ambientColor.r);
   }
   
   Tlc.update();
 272:	84 ed       	ldi	r24, 0xD4	; 212
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <_ZN7Tlc59406updateEv>
   
   currentLED += DIRECTION * NUM_COLOR_CHANNELS;
 27a:	80 91 02 01 	lds	r24, 0x0102
 27e:	90 91 03 01 	lds	r25, 0x0103
 282:	01 96       	adiw	r24, 0x01	; 1
   currentLED %= NUM_LED_CHANNELS;
 284:	be 01       	movw	r22, r28
 286:	0e 94 82 05 	call	0xb04	; 0xb04 <__divmodhi4>
 28a:	90 93 03 01 	sts	0x0103, r25
 28e:	80 93 02 01 	sts	0x0102, r24
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <_Z8initGPIOv>:
#include "tmr_int_util.h"

// sets up the inputs, outputs and internal pull-ups 
void initGPIO(){
	// all hall effect sensors are outputs
	DDRB |= (1<<HALLEFFECT1);
 298:	20 9a       	sbi	0x04, 0	; 4
	DDRD |= (1<<HALLEFFECT2);
 29a:	57 9a       	sbi	0x0a, 7	; 10
	DDRC |= (1<<HALLEFFECT3);
 29c:	38 9a       	sbi	0x07, 0	; 7
	
	// turn on internal pull-up for hall effects
	PORTB |= (1<<HALLEFFECT1);
 29e:	28 9a       	sbi	0x05, 0	; 5
	PORTD |= (1<<HALLEFFECT2);
 2a0:	5f 9a       	sbi	0x0b, 7	; 11
	PORTC |= (1<<HALLEFFECT3);
 2a2:	40 9a       	sbi	0x08, 0	; 8
 2a4:	08 95       	ret

000002a6 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 2a6:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 2a8:	91 8d       	ldd	r25, Z+25	; 0x19
 2aa:	22 8d       	ldd	r18, Z+26	; 0x1a
 2ac:	89 2f       	mov	r24, r25
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	80 5c       	subi	r24, 0xC0	; 192
 2b2:	9f 4f       	sbci	r25, 0xFF	; 255
 2b4:	82 1b       	sub	r24, r18
 2b6:	91 09       	sbc	r25, r1
}
 2b8:	8f 73       	andi	r24, 0x3F	; 63
 2ba:	99 27       	eor	r25, r25
 2bc:	08 95       	ret

000002be <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 2be:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 2c0:	91 8d       	ldd	r25, Z+25	; 0x19
 2c2:	82 8d       	ldd	r24, Z+26	; 0x1a
 2c4:	98 17       	cp	r25, r24
 2c6:	31 f0       	breq	.+12     	; 0x2d4 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 2c8:	82 8d       	ldd	r24, Z+26	; 0x1a
 2ca:	e8 0f       	add	r30, r24
 2cc:	f1 1d       	adc	r31, r1
 2ce:	85 8d       	ldd	r24, Z+29	; 0x1d
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 2d4:	8f ef       	ldi	r24, 0xFF	; 255
 2d6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 2d8:	08 95       	ret

000002da <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 2da:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 2dc:	91 8d       	ldd	r25, Z+25	; 0x19
 2de:	82 8d       	ldd	r24, Z+26	; 0x1a
 2e0:	98 17       	cp	r25, r24
 2e2:	61 f0       	breq	.+24     	; 0x2fc <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 2e4:	82 8d       	ldd	r24, Z+26	; 0x1a
 2e6:	df 01       	movw	r26, r30
 2e8:	a8 0f       	add	r26, r24
 2ea:	b1 1d       	adc	r27, r1
 2ec:	5d 96       	adiw	r26, 0x1d	; 29
 2ee:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 2f0:	92 8d       	ldd	r25, Z+26	; 0x1a
 2f2:	9f 5f       	subi	r25, 0xFF	; 255
 2f4:	9f 73       	andi	r25, 0x3F	; 63
 2f6:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 2fc:	8f ef       	ldi	r24, 0xFF	; 255
 2fe:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 300:	08 95       	ret

00000302 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 302:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 304:	84 8d       	ldd	r24, Z+28	; 0x1c
 306:	df 01       	movw	r26, r30
 308:	a8 0f       	add	r26, r24
 30a:	b1 1d       	adc	r27, r1
 30c:	a3 5a       	subi	r26, 0xA3	; 163
 30e:	bf 4f       	sbci	r27, 0xFF	; 255
 310:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 312:	84 8d       	ldd	r24, Z+28	; 0x1c
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	01 96       	adiw	r24, 0x01	; 1
 318:	8f 73       	andi	r24, 0x3F	; 63
 31a:	99 27       	eor	r25, r25
 31c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 31e:	a6 89       	ldd	r26, Z+22	; 0x16
 320:	b7 89       	ldd	r27, Z+23	; 0x17
 322:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 324:	a0 89       	ldd	r26, Z+16	; 0x10
 326:	b1 89       	ldd	r27, Z+17	; 0x11
 328:	8c 91       	ld	r24, X
 32a:	80 64       	ori	r24, 0x40	; 64
 32c:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 32e:	93 8d       	ldd	r25, Z+27	; 0x1b
 330:	84 8d       	ldd	r24, Z+28	; 0x1c
 332:	98 13       	cpse	r25, r24
 334:	06 c0       	rjmp	.+12     	; 0x342 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 336:	02 88       	ldd	r0, Z+18	; 0x12
 338:	f3 89       	ldd	r31, Z+19	; 0x13
 33a:	e0 2d       	mov	r30, r0
 33c:	80 81       	ld	r24, Z
 33e:	8f 7d       	andi	r24, 0xDF	; 223
 340:	80 83       	st	Z, r24
 342:	08 95       	ret

00000344 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 34a:	88 8d       	ldd	r24, Y+24	; 0x18
 34c:	88 23       	and	r24, r24
 34e:	c9 f0       	breq	.+50     	; 0x382 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 350:	ea 89       	ldd	r30, Y+18	; 0x12
 352:	fb 89       	ldd	r31, Y+19	; 0x13
 354:	80 81       	ld	r24, Z
 356:	85 fd       	sbrc	r24, 5
 358:	05 c0       	rjmp	.+10     	; 0x364 <_ZN14HardwareSerial5flushEv+0x20>
 35a:	a8 89       	ldd	r26, Y+16	; 0x10
 35c:	b9 89       	ldd	r27, Y+17	; 0x11
 35e:	8c 91       	ld	r24, X
 360:	86 fd       	sbrc	r24, 6
 362:	0f c0       	rjmp	.+30     	; 0x382 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	07 fc       	sbrc	r0, 7
 368:	f5 cf       	rjmp	.-22     	; 0x354 <_ZN14HardwareSerial5flushEv+0x10>
 36a:	80 81       	ld	r24, Z
 36c:	85 ff       	sbrs	r24, 5
 36e:	f2 cf       	rjmp	.-28     	; 0x354 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 370:	a8 89       	ldd	r26, Y+16	; 0x10
 372:	b9 89       	ldd	r27, Y+17	; 0x11
 374:	8c 91       	ld	r24, X
 376:	85 ff       	sbrs	r24, 5
 378:	ed cf       	rjmp	.-38     	; 0x354 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 37a:	ce 01       	movw	r24, r28
 37c:	0e 94 81 01 	call	0x302	; 0x302 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 380:	e7 cf       	rjmp	.-50     	; 0x350 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	08 95       	ret

00000388 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 388:	ef 92       	push	r14
 38a:	ff 92       	push	r15
 38c:	0f 93       	push	r16
 38e:	1f 93       	push	r17
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	ec 01       	movw	r28, r24
  _written = true;
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 39a:	9b 8d       	ldd	r25, Y+27	; 0x1b
 39c:	8c 8d       	ldd	r24, Y+28	; 0x1c
 39e:	98 13       	cpse	r25, r24
 3a0:	05 c0       	rjmp	.+10     	; 0x3ac <_ZN14HardwareSerial5writeEh+0x24>
 3a2:	e8 89       	ldd	r30, Y+16	; 0x10
 3a4:	f9 89       	ldd	r31, Y+17	; 0x11
 3a6:	80 81       	ld	r24, Z
 3a8:	85 fd       	sbrc	r24, 5
 3aa:	24 c0       	rjmp	.+72     	; 0x3f4 <_ZN14HardwareSerial5writeEh+0x6c>
 3ac:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 3ae:	0b 8d       	ldd	r16, Y+27	; 0x1b
 3b0:	10 e0       	ldi	r17, 0x00	; 0
 3b2:	0f 5f       	subi	r16, 0xFF	; 255
 3b4:	1f 4f       	sbci	r17, 0xFF	; 255
 3b6:	0f 73       	andi	r16, 0x3F	; 63
 3b8:	11 27       	eor	r17, r17
 3ba:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 3bc:	8c 8d       	ldd	r24, Y+28	; 0x1c
 3be:	e8 12       	cpse	r14, r24
 3c0:	0c c0       	rjmp	.+24     	; 0x3da <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	07 fc       	sbrc	r0, 7
 3c6:	fa cf       	rjmp	.-12     	; 0x3bc <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 3c8:	e8 89       	ldd	r30, Y+16	; 0x10
 3ca:	f9 89       	ldd	r31, Y+17	; 0x11
 3cc:	80 81       	ld	r24, Z
 3ce:	85 ff       	sbrs	r24, 5
 3d0:	f5 cf       	rjmp	.-22     	; 0x3bc <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 3d2:	ce 01       	movw	r24, r28
 3d4:	0e 94 81 01 	call	0x302	; 0x302 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 3d8:	f1 cf       	rjmp	.-30     	; 0x3bc <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 3da:	8b 8d       	ldd	r24, Y+27	; 0x1b
 3dc:	fe 01       	movw	r30, r28
 3de:	e8 0f       	add	r30, r24
 3e0:	f1 1d       	adc	r31, r1
 3e2:	e3 5a       	subi	r30, 0xA3	; 163
 3e4:	ff 4f       	sbci	r31, 0xFF	; 255
 3e6:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 3e8:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 3ea:	ea 89       	ldd	r30, Y+18	; 0x12
 3ec:	fb 89       	ldd	r31, Y+19	; 0x13
 3ee:	80 81       	ld	r24, Z
 3f0:	80 62       	ori	r24, 0x20	; 32
 3f2:	07 c0       	rjmp	.+14     	; 0x402 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 3f4:	ee 89       	ldd	r30, Y+22	; 0x16
 3f6:	ff 89       	ldd	r31, Y+23	; 0x17
 3f8:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 3fa:	e8 89       	ldd	r30, Y+16	; 0x10
 3fc:	f9 89       	ldd	r31, Y+17	; 0x11
 3fe:	80 81       	ld	r24, Z
 400:	80 64       	ori	r24, 0x40	; 64
 402:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	1f 91       	pop	r17
 40e:	0f 91       	pop	r16
 410:	ff 90       	pop	r15
 412:	ef 90       	pop	r14
 414:	08 95       	ret

00000416 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 416:	cf 92       	push	r12
 418:	df 92       	push	r13
 41a:	ef 92       	push	r14
 41c:	ff 92       	push	r15
 41e:	1f 93       	push	r17
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	ec 01       	movw	r28, r24
 426:	6a 01       	movw	r12, r20
 428:	7b 01       	movw	r14, r22
 42a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 42c:	e8 89       	ldd	r30, Y+16	; 0x10
 42e:	f9 89       	ldd	r31, Y+17	; 0x11
 430:	82 e0       	ldi	r24, 0x02	; 2
 432:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 434:	41 15       	cp	r20, r1
 436:	51 4e       	sbci	r21, 0xE1	; 225
 438:	61 05       	cpc	r22, r1
 43a:	71 05       	cpc	r23, r1
 43c:	b1 f0       	breq	.+44     	; 0x46a <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 43e:	60 e0       	ldi	r22, 0x00	; 0
 440:	79 e0       	ldi	r23, 0x09	; 9
 442:	8d e3       	ldi	r24, 0x3D	; 61
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	a7 01       	movw	r20, r14
 448:	96 01       	movw	r18, r12
 44a:	0e 94 96 05 	call	0xb2c	; 0xb2c <__udivmodsi4>
 44e:	da 01       	movw	r26, r20
 450:	c9 01       	movw	r24, r18
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	a1 09       	sbc	r26, r1
 456:	b1 09       	sbc	r27, r1
 458:	b6 95       	lsr	r27
 45a:	a7 95       	ror	r26
 45c:	97 95       	ror	r25
 45e:	87 95       	ror	r24
 460:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 462:	41 15       	cp	r20, r1
 464:	80 e1       	ldi	r24, 0x10	; 16
 466:	58 07       	cpc	r21, r24
 468:	a8 f0       	brcs	.+42     	; 0x494 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 46a:	e8 89       	ldd	r30, Y+16	; 0x10
 46c:	f9 89       	ldd	r31, Y+17	; 0x11
 46e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 470:	60 e8       	ldi	r22, 0x80	; 128
 472:	74 e8       	ldi	r23, 0x84	; 132
 474:	8e e1       	ldi	r24, 0x1E	; 30
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	a7 01       	movw	r20, r14
 47a:	96 01       	movw	r18, r12
 47c:	0e 94 96 05 	call	0xb2c	; 0xb2c <__udivmodsi4>
 480:	ba 01       	movw	r22, r20
 482:	a9 01       	movw	r20, r18
 484:	41 50       	subi	r20, 0x01	; 1
 486:	51 09       	sbc	r21, r1
 488:	61 09       	sbc	r22, r1
 48a:	71 09       	sbc	r23, r1
 48c:	76 95       	lsr	r23
 48e:	67 95       	ror	r22
 490:	57 95       	ror	r21
 492:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 494:	ec 85       	ldd	r30, Y+12	; 0x0c
 496:	fd 85       	ldd	r31, Y+13	; 0x0d
 498:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
 49a:	ee 85       	ldd	r30, Y+14	; 0x0e
 49c:	ff 85       	ldd	r31, Y+15	; 0x0f
 49e:	40 83       	st	Z, r20

  _written = false;
 4a0:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 4a2:	ec 89       	ldd	r30, Y+20	; 0x14
 4a4:	fd 89       	ldd	r31, Y+21	; 0x15
 4a6:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 4a8:	ea 89       	ldd	r30, Y+18	; 0x12
 4aa:	fb 89       	ldd	r31, Y+19	; 0x13
 4ac:	80 81       	ld	r24, Z
 4ae:	80 61       	ori	r24, 0x10	; 16
 4b0:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 4b2:	ea 89       	ldd	r30, Y+18	; 0x12
 4b4:	fb 89       	ldd	r31, Y+19	; 0x13
 4b6:	80 81       	ld	r24, Z
 4b8:	88 60       	ori	r24, 0x08	; 8
 4ba:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 4bc:	ea 89       	ldd	r30, Y+18	; 0x12
 4be:	fb 89       	ldd	r31, Y+19	; 0x13
 4c0:	80 81       	ld	r24, Z
 4c2:	80 68       	ori	r24, 0x80	; 128
 4c4:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 4c6:	ea 89       	ldd	r30, Y+18	; 0x12
 4c8:	fb 89       	ldd	r31, Y+19	; 0x13
 4ca:	80 81       	ld	r24, Z
 4cc:	8f 7d       	andi	r24, 0xDF	; 223
 4ce:	80 83       	st	Z, r24
}
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	1f 91       	pop	r17
 4d6:	ff 90       	pop	r15
 4d8:	ef 90       	pop	r14
 4da:	df 90       	pop	r13
 4dc:	cf 90       	pop	r12
 4de:	08 95       	ret

000004e0 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 4e0:	1f 92       	push	r1
 4e2:	0f 92       	push	r0
 4e4:	0f b6       	in	r0, 0x3f	; 63
 4e6:	0f 92       	push	r0
 4e8:	11 24       	eor	r1, r1
 4ea:	2f 93       	push	r18
 4ec:	8f 93       	push	r24
 4ee:	9f 93       	push	r25
 4f0:	ef 93       	push	r30
 4f2:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 4f4:	e0 91 3e 01 	lds	r30, 0x013E
 4f8:	f0 91 3f 01 	lds	r31, 0x013F
 4fc:	80 81       	ld	r24, Z
 4fe:	e0 91 44 01 	lds	r30, 0x0144
 502:	f0 91 45 01 	lds	r31, 0x0145
 506:	82 fd       	sbrc	r24, 2
 508:	12 c0       	rjmp	.+36     	; 0x52e <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 50a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 50c:	80 91 47 01 	lds	r24, 0x0147
 510:	8f 5f       	subi	r24, 0xFF	; 255
 512:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 514:	20 91 48 01 	lds	r18, 0x0148
 518:	82 17       	cp	r24, r18
 51a:	51 f0       	breq	.+20     	; 0x530 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 51c:	e0 91 47 01 	lds	r30, 0x0147
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	e2 5d       	subi	r30, 0xD2	; 210
 524:	fe 4f       	sbci	r31, 0xFE	; 254
 526:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 528:	80 93 47 01 	sts	0x0147, r24
 52c:	01 c0       	rjmp	.+2      	; 0x530 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 52e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 530:	ff 91       	pop	r31
 532:	ef 91       	pop	r30
 534:	9f 91       	pop	r25
 536:	8f 91       	pop	r24
 538:	2f 91       	pop	r18
 53a:	0f 90       	pop	r0
 53c:	0f be       	out	0x3f, r0	; 63
 53e:	0f 90       	pop	r0
 540:	1f 90       	pop	r1
 542:	18 95       	reti

00000544 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 544:	1f 92       	push	r1
 546:	0f 92       	push	r0
 548:	0f b6       	in	r0, 0x3f	; 63
 54a:	0f 92       	push	r0
 54c:	11 24       	eor	r1, r1
 54e:	2f 93       	push	r18
 550:	3f 93       	push	r19
 552:	4f 93       	push	r20
 554:	5f 93       	push	r21
 556:	6f 93       	push	r22
 558:	7f 93       	push	r23
 55a:	8f 93       	push	r24
 55c:	9f 93       	push	r25
 55e:	af 93       	push	r26
 560:	bf 93       	push	r27
 562:	ef 93       	push	r30
 564:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 566:	8e e2       	ldi	r24, 0x2E	; 46
 568:	91 e0       	ldi	r25, 0x01	; 1
 56a:	0e 94 81 01 	call	0x302	; 0x302 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 56e:	ff 91       	pop	r31
 570:	ef 91       	pop	r30
 572:	bf 91       	pop	r27
 574:	af 91       	pop	r26
 576:	9f 91       	pop	r25
 578:	8f 91       	pop	r24
 57a:	7f 91       	pop	r23
 57c:	6f 91       	pop	r22
 57e:	5f 91       	pop	r21
 580:	4f 91       	pop	r20
 582:	3f 91       	pop	r19
 584:	2f 91       	pop	r18
 586:	0f 90       	pop	r0
 588:	0f be       	out	0x3f, r0	; 63
 58a:	0f 90       	pop	r0
 58c:	1f 90       	pop	r1
 58e:	18 95       	reti

00000590 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 590:	ee e2       	ldi	r30, 0x2E	; 46
 592:	f1 e0       	ldi	r31, 0x01	; 1
 594:	13 82       	std	Z+3, r1	; 0x03
 596:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 598:	88 ee       	ldi	r24, 0xE8	; 232
 59a:	93 e0       	ldi	r25, 0x03	; 3
 59c:	a0 e0       	ldi	r26, 0x00	; 0
 59e:	b0 e0       	ldi	r27, 0x00	; 0
 5a0:	84 83       	std	Z+4, r24	; 0x04
 5a2:	95 83       	std	Z+5, r25	; 0x05
 5a4:	a6 83       	std	Z+6, r26	; 0x06
 5a6:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 5a8:	8a e0       	ldi	r24, 0x0A	; 10
 5aa:	91 e0       	ldi	r25, 0x01	; 1
 5ac:	91 83       	std	Z+1, r25	; 0x01
 5ae:	80 83       	st	Z, r24
 5b0:	85 ec       	ldi	r24, 0xC5	; 197
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	95 87       	std	Z+13, r25	; 0x0d
 5b6:	84 87       	std	Z+12, r24	; 0x0c
 5b8:	84 ec       	ldi	r24, 0xC4	; 196
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	97 87       	std	Z+15, r25	; 0x0f
 5be:	86 87       	std	Z+14, r24	; 0x0e
 5c0:	80 ec       	ldi	r24, 0xC0	; 192
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	91 8b       	std	Z+17, r25	; 0x11
 5c6:	80 8b       	std	Z+16, r24	; 0x10
 5c8:	81 ec       	ldi	r24, 0xC1	; 193
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	93 8b       	std	Z+19, r25	; 0x13
 5ce:	82 8b       	std	Z+18, r24	; 0x12
 5d0:	82 ec       	ldi	r24, 0xC2	; 194
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	95 8b       	std	Z+21, r25	; 0x15
 5d6:	84 8b       	std	Z+20, r24	; 0x14
 5d8:	86 ec       	ldi	r24, 0xC6	; 198
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	97 8b       	std	Z+23, r25	; 0x17
 5de:	86 8b       	std	Z+22, r24	; 0x16
 5e0:	11 8e       	std	Z+25, r1	; 0x19
 5e2:	12 8e       	std	Z+26, r1	; 0x1a
 5e4:	13 8e       	std	Z+27, r1	; 0x1b
 5e6:	14 8e       	std	Z+28, r1	; 0x1c
 5e8:	08 95       	ret

000005ea <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 5ea:	cf 92       	push	r12
 5ec:	df 92       	push	r13
 5ee:	ef 92       	push	r14
 5f0:	ff 92       	push	r15
 5f2:	0f 93       	push	r16
 5f4:	1f 93       	push	r17
 5f6:	cf 93       	push	r28
 5f8:	df 93       	push	r29
 5fa:	6c 01       	movw	r12, r24
 5fc:	eb 01       	movw	r28, r22
 5fe:	7b 01       	movw	r14, r22
 600:	e4 0e       	add	r14, r20
 602:	f5 1e       	adc	r15, r21
  size_t n = 0;
 604:	00 e0       	ldi	r16, 0x00	; 0
 606:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
 608:	ce 15       	cp	r28, r14
 60a:	df 05       	cpc	r29, r15
 60c:	61 f0       	breq	.+24     	; 0x626 <_ZN5Print5writeEPKhj+0x3c>
    n += write(*buffer++);
 60e:	69 91       	ld	r22, Y+
 610:	d6 01       	movw	r26, r12
 612:	ed 91       	ld	r30, X+
 614:	fc 91       	ld	r31, X
 616:	01 90       	ld	r0, Z+
 618:	f0 81       	ld	r31, Z
 61a:	e0 2d       	mov	r30, r0
 61c:	c6 01       	movw	r24, r12
 61e:	09 95       	icall
 620:	08 0f       	add	r16, r24
 622:	19 1f       	adc	r17, r25
 624:	f1 cf       	rjmp	.-30     	; 0x608 <_ZN5Print5writeEPKhj+0x1e>
  }
  return n;
}
 626:	c8 01       	movw	r24, r16
 628:	df 91       	pop	r29
 62a:	cf 91       	pop	r28
 62c:	1f 91       	pop	r17
 62e:	0f 91       	pop	r16
 630:	ff 90       	pop	r15
 632:	ef 90       	pop	r14
 634:	df 90       	pop	r13
 636:	cf 90       	pop	r12
 638:	08 95       	ret

0000063a <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 63a:	61 15       	cp	r22, r1
 63c:	71 05       	cpc	r23, r1
 63e:	79 f0       	breq	.+30     	; 0x65e <_ZN5Print5writeEPKc+0x24>
      return write((const uint8_t *)str, strlen(str));
 640:	fb 01       	movw	r30, r22
 642:	01 90       	ld	r0, Z+
 644:	00 20       	and	r0, r0
 646:	e9 f7       	brne	.-6      	; 0x642 <_ZN5Print5writeEPKc+0x8>
 648:	31 97       	sbiw	r30, 0x01	; 1
 64a:	af 01       	movw	r20, r30
 64c:	46 1b       	sub	r20, r22
 64e:	57 0b       	sbc	r21, r23
 650:	dc 01       	movw	r26, r24
 652:	ed 91       	ld	r30, X+
 654:	fc 91       	ld	r31, X
 656:	02 80       	ldd	r0, Z+2	; 0x02
 658:	f3 81       	ldd	r31, Z+3	; 0x03
 65a:	e0 2d       	mov	r30, r0
 65c:	09 94       	ijmp
    }
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	08 95       	ret

00000664 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 664:	dc 01       	movw	r26, r24
 666:	ed 91       	ld	r30, X+
 668:	fc 91       	ld	r31, X
 66a:	01 90       	ld	r0, Z+
 66c:	f0 81       	ld	r31, Z
 66e:	e0 2d       	mov	r30, r0
 670:	09 94       	ijmp

00000672 <_ZN5Print7printlnEv>:
  return x.printTo(*this);
}

size_t Print::println(void)
{
  return write("\r\n");
 672:	66 e1       	ldi	r22, 0x16	; 22
 674:	71 e0       	ldi	r23, 0x01	; 1
 676:	0c 94 1d 03 	jmp	0x63a	; 0x63a <_ZN5Print5writeEPKc>

0000067a <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 67a:	8f 92       	push	r8
 67c:	9f 92       	push	r9
 67e:	af 92       	push	r10
 680:	bf 92       	push	r11
 682:	cf 92       	push	r12
 684:	df 92       	push	r13
 686:	ef 92       	push	r14
 688:	ff 92       	push	r15
 68a:	0f 93       	push	r16
 68c:	1f 93       	push	r17
 68e:	cf 93       	push	r28
 690:	df 93       	push	r29
 692:	cd b7       	in	r28, 0x3d	; 61
 694:	de b7       	in	r29, 0x3e	; 62
 696:	a1 97       	sbiw	r28, 0x21	; 33
 698:	0f b6       	in	r0, 0x3f	; 63
 69a:	f8 94       	cli
 69c:	de bf       	out	0x3e, r29	; 62
 69e:	0f be       	out	0x3f, r0	; 63
 6a0:	cd bf       	out	0x3d, r28	; 61
 6a2:	6c 01       	movw	r12, r24
 6a4:	14 2f       	mov	r17, r20
 6a6:	e5 2f       	mov	r30, r21
 6a8:	cb 01       	movw	r24, r22
 6aa:	02 2f       	mov	r16, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 6ac:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 6ae:	22 30       	cpi	r18, 0x02	; 2
 6b0:	08 f4       	brcc	.+2      	; 0x6b4 <_ZN5Print11printNumberEmh+0x3a>
 6b2:	0a e0       	ldi	r16, 0x0A	; 10
 6b4:	7e 01       	movw	r14, r28
 6b6:	21 e2       	ldi	r18, 0x21	; 33
 6b8:	e2 0e       	add	r14, r18
 6ba:	f1 1c       	adc	r15, r1

  do {
    unsigned long m = n;
    n /= base;
 6bc:	80 2e       	mov	r8, r16
 6be:	91 2c       	mov	r9, r1
 6c0:	a1 2c       	mov	r10, r1
 6c2:	b1 2c       	mov	r11, r1
 6c4:	61 2f       	mov	r22, r17
 6c6:	7e 2f       	mov	r23, r30
 6c8:	a5 01       	movw	r20, r10
 6ca:	94 01       	movw	r18, r8
 6cc:	0e 94 96 05 	call	0xb2c	; 0xb2c <__udivmodsi4>
    char c = m - base * n;
 6d0:	02 9f       	mul	r16, r18
 6d2:	10 19       	sub	r17, r0
 6d4:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	e8 1a       	sub	r14, r24
 6da:	f1 08       	sbc	r15, r1
 6dc:	1a 30       	cpi	r17, 0x0A	; 10
 6de:	10 f4       	brcc	.+4      	; 0x6e4 <_ZN5Print11printNumberEmh+0x6a>
 6e0:	10 5d       	subi	r17, 0xD0	; 208
 6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <_ZN5Print11printNumberEmh+0x6c>
 6e4:	19 5c       	subi	r17, 0xC9	; 201
 6e6:	f7 01       	movw	r30, r14
 6e8:	10 83       	st	Z, r17
 6ea:	12 2f       	mov	r17, r18
 6ec:	e3 2f       	mov	r30, r19
 6ee:	ca 01       	movw	r24, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 6f0:	23 2b       	or	r18, r19
 6f2:	24 2b       	or	r18, r20
 6f4:	25 2b       	or	r18, r21
 6f6:	31 f7       	brne	.-52     	; 0x6c4 <_ZN5Print11printNumberEmh+0x4a>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 6f8:	b7 01       	movw	r22, r14
 6fa:	c6 01       	movw	r24, r12
 6fc:	0e 94 1d 03 	call	0x63a	; 0x63a <_ZN5Print5writeEPKc>
}
 700:	a1 96       	adiw	r28, 0x21	; 33
 702:	0f b6       	in	r0, 0x3f	; 63
 704:	f8 94       	cli
 706:	de bf       	out	0x3e, r29	; 62
 708:	0f be       	out	0x3f, r0	; 63
 70a:	cd bf       	out	0x3d, r28	; 61
 70c:	df 91       	pop	r29
 70e:	cf 91       	pop	r28
 710:	1f 91       	pop	r17
 712:	0f 91       	pop	r16
 714:	ff 90       	pop	r15
 716:	ef 90       	pop	r14
 718:	df 90       	pop	r13
 71a:	cf 90       	pop	r12
 71c:	bf 90       	pop	r11
 71e:	af 90       	pop	r10
 720:	9f 90       	pop	r9
 722:	8f 90       	pop	r8
 724:	08 95       	ret

00000726 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 726:	cf 92       	push	r12
 728:	df 92       	push	r13
 72a:	ef 92       	push	r14
 72c:	ff 92       	push	r15
 72e:	0f 93       	push	r16
 730:	1f 93       	push	r17
 732:	cf 93       	push	r28
 734:	df 93       	push	r29
 736:	ec 01       	movw	r28, r24
 738:	6a 01       	movw	r12, r20
 73a:	7b 01       	movw	r14, r22
  if (base == 0) {
 73c:	21 15       	cp	r18, r1
 73e:	31 05       	cpc	r19, r1
 740:	79 f4       	brne	.+30     	; 0x760 <_ZN5Print5printEli+0x3a>
    return write(n);
 742:	e8 81       	ld	r30, Y
 744:	f9 81       	ldd	r31, Y+1	; 0x01
 746:	01 90       	ld	r0, Z+
 748:	f0 81       	ld	r31, Z
 74a:	e0 2d       	mov	r30, r0
 74c:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 74e:	df 91       	pop	r29
 750:	cf 91       	pop	r28
 752:	1f 91       	pop	r17
 754:	0f 91       	pop	r16
 756:	ff 90       	pop	r15
 758:	ef 90       	pop	r14
 75a:	df 90       	pop	r13
 75c:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 75e:	09 94       	ijmp
  } else if (base == 10) {
 760:	2a 30       	cpi	r18, 0x0A	; 10
 762:	31 05       	cpc	r19, r1
 764:	e9 f4       	brne	.+58     	; 0x7a0 <_ZN5Print5printEli+0x7a>
    if (n < 0) {
 766:	77 ff       	sbrs	r23, 7
 768:	1a c0       	rjmp	.+52     	; 0x79e <_ZN5Print5printEli+0x78>
      int t = print('-');
 76a:	6d e2       	ldi	r22, 0x2D	; 45
 76c:	0e 94 32 03 	call	0x664	; 0x664 <_ZN5Print5printEc>
 770:	8c 01       	movw	r16, r24
      n = -n;
 772:	44 27       	eor	r20, r20
 774:	55 27       	eor	r21, r21
 776:	ba 01       	movw	r22, r20
 778:	4c 19       	sub	r20, r12
 77a:	5d 09       	sbc	r21, r13
 77c:	6e 09       	sbc	r22, r14
 77e:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
 780:	2a e0       	ldi	r18, 0x0A	; 10
 782:	ce 01       	movw	r24, r28
 784:	0e 94 3d 03 	call	0x67a	; 0x67a <_ZN5Print11printNumberEmh>
 788:	80 0f       	add	r24, r16
 78a:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 78c:	df 91       	pop	r29
 78e:	cf 91       	pop	r28
 790:	1f 91       	pop	r17
 792:	0f 91       	pop	r16
 794:	ff 90       	pop	r15
 796:	ef 90       	pop	r14
 798:	df 90       	pop	r13
 79a:	cf 90       	pop	r12
 79c:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
 79e:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
 7a0:	b7 01       	movw	r22, r14
 7a2:	a6 01       	movw	r20, r12
 7a4:	ce 01       	movw	r24, r28
  }
}
 7a6:	df 91       	pop	r29
 7a8:	cf 91       	pop	r28
 7aa:	1f 91       	pop	r17
 7ac:	0f 91       	pop	r16
 7ae:	ff 90       	pop	r15
 7b0:	ef 90       	pop	r14
 7b2:	df 90       	pop	r13
 7b4:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 7b6:	0c 94 3d 03 	jmp	0x67a	; 0x67a <_ZN5Print11printNumberEmh>

000007ba <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 7ba:	0f 93       	push	r16
 7bc:	1f 93       	push	r17
 7be:	cf 93       	push	r28
 7c0:	df 93       	push	r29
 7c2:	ec 01       	movw	r28, r24
 7c4:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 7c6:	ab 01       	movw	r20, r22
 7c8:	77 0f       	add	r23, r23
 7ca:	66 0b       	sbc	r22, r22
 7cc:	77 0b       	sbc	r23, r23
 7ce:	0e 94 93 03 	call	0x726	; 0x726 <_ZN5Print5printEli>
 7d2:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 7d4:	ce 01       	movw	r24, r28
 7d6:	0e 94 39 03 	call	0x672	; 0x672 <_ZN5Print7printlnEv>
  return n;
}
 7da:	80 0f       	add	r24, r16
 7dc:	91 1f       	adc	r25, r17
 7de:	df 91       	pop	r29
 7e0:	cf 91       	pop	r28
 7e2:	1f 91       	pop	r17
 7e4:	0f 91       	pop	r16
 7e6:	08 95       	ret

000007e8 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 7e8:	1f 92       	push	r1
 7ea:	0f 92       	push	r0
 7ec:	0f b6       	in	r0, 0x3f	; 63
 7ee:	0f 92       	push	r0
 7f0:	11 24       	eor	r1, r1
 7f2:	2f 93       	push	r18
 7f4:	3f 93       	push	r19
 7f6:	8f 93       	push	r24
 7f8:	9f 93       	push	r25
 7fa:	af 93       	push	r26
 7fc:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 7fe:	80 91 cc 01 	lds	r24, 0x01CC
 802:	90 91 cd 01 	lds	r25, 0x01CD
 806:	a0 91 ce 01 	lds	r26, 0x01CE
 80a:	b0 91 cf 01 	lds	r27, 0x01CF
	unsigned char f = timer0_fract;
 80e:	30 91 cb 01 	lds	r19, 0x01CB

	m += MILLIS_INC;
	f += FRACT_INC;
 812:	23 e0       	ldi	r18, 0x03	; 3
 814:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 816:	2d 37       	cpi	r18, 0x7D	; 125
 818:	20 f4       	brcc	.+8      	; 0x822 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 81a:	01 96       	adiw	r24, 0x01	; 1
 81c:	a1 1d       	adc	r26, r1
 81e:	b1 1d       	adc	r27, r1
 820:	05 c0       	rjmp	.+10     	; 0x82c <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 822:	26 e8       	ldi	r18, 0x86	; 134
 824:	23 0f       	add	r18, r19
		m += 1;
 826:	02 96       	adiw	r24, 0x02	; 2
 828:	a1 1d       	adc	r26, r1
 82a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 82c:	20 93 cb 01 	sts	0x01CB, r18
	timer0_millis = m;
 830:	80 93 cc 01 	sts	0x01CC, r24
 834:	90 93 cd 01 	sts	0x01CD, r25
 838:	a0 93 ce 01 	sts	0x01CE, r26
 83c:	b0 93 cf 01 	sts	0x01CF, r27
	timer0_overflow_count++;
 840:	80 91 d0 01 	lds	r24, 0x01D0
 844:	90 91 d1 01 	lds	r25, 0x01D1
 848:	a0 91 d2 01 	lds	r26, 0x01D2
 84c:	b0 91 d3 01 	lds	r27, 0x01D3
 850:	01 96       	adiw	r24, 0x01	; 1
 852:	a1 1d       	adc	r26, r1
 854:	b1 1d       	adc	r27, r1
 856:	80 93 d0 01 	sts	0x01D0, r24
 85a:	90 93 d1 01 	sts	0x01D1, r25
 85e:	a0 93 d2 01 	sts	0x01D2, r26
 862:	b0 93 d3 01 	sts	0x01D3, r27
}
 866:	bf 91       	pop	r27
 868:	af 91       	pop	r26
 86a:	9f 91       	pop	r25
 86c:	8f 91       	pop	r24
 86e:	3f 91       	pop	r19
 870:	2f 91       	pop	r18
 872:	0f 90       	pop	r0
 874:	0f be       	out	0x3f, r0	; 63
 876:	0f 90       	pop	r0
 878:	1f 90       	pop	r1
 87a:	18 95       	reti

0000087c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 87c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 87e:	84 b5       	in	r24, 0x24	; 36
 880:	82 60       	ori	r24, 0x02	; 2
 882:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 884:	84 b5       	in	r24, 0x24	; 36
 886:	81 60       	ori	r24, 0x01	; 1
 888:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 88a:	85 b5       	in	r24, 0x25	; 37
 88c:	82 60       	ori	r24, 0x02	; 2
 88e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 890:	85 b5       	in	r24, 0x25	; 37
 892:	81 60       	ori	r24, 0x01	; 1
 894:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 896:	ee e6       	ldi	r30, 0x6E	; 110
 898:	f0 e0       	ldi	r31, 0x00	; 0
 89a:	80 81       	ld	r24, Z
 89c:	81 60       	ori	r24, 0x01	; 1
 89e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 8a0:	e1 e8       	ldi	r30, 0x81	; 129
 8a2:	f0 e0       	ldi	r31, 0x00	; 0
 8a4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 8a6:	80 81       	ld	r24, Z
 8a8:	82 60       	ori	r24, 0x02	; 2
 8aa:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 8ac:	80 81       	ld	r24, Z
 8ae:	81 60       	ori	r24, 0x01	; 1
 8b0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 8b2:	e0 e8       	ldi	r30, 0x80	; 128
 8b4:	f0 e0       	ldi	r31, 0x00	; 0
 8b6:	80 81       	ld	r24, Z
 8b8:	81 60       	ori	r24, 0x01	; 1
 8ba:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 8bc:	e1 eb       	ldi	r30, 0xB1	; 177
 8be:	f0 e0       	ldi	r31, 0x00	; 0
 8c0:	80 81       	ld	r24, Z
 8c2:	84 60       	ori	r24, 0x04	; 4
 8c4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 8c6:	e0 eb       	ldi	r30, 0xB0	; 176
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	80 81       	ld	r24, Z
 8cc:	81 60       	ori	r24, 0x01	; 1
 8ce:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 8d0:	ea e7       	ldi	r30, 0x7A	; 122
 8d2:	f0 e0       	ldi	r31, 0x00	; 0
 8d4:	80 81       	ld	r24, Z
 8d6:	84 60       	ori	r24, 0x04	; 4
 8d8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 8da:	80 81       	ld	r24, Z
 8dc:	82 60       	ori	r24, 0x02	; 2
 8de:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 8e0:	80 81       	ld	r24, Z
 8e2:	81 60       	ori	r24, 0x01	; 1
 8e4:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 8e6:	80 81       	ld	r24, Z
 8e8:	80 68       	ori	r24, 0x80	; 128
 8ea:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 8ec:	10 92 c1 00 	sts	0x00C1, r1
 8f0:	08 95       	ret

000008f2 <__vector_13>:
/** Don't add an extra SCLK pulse after switching from dot-correction mode. */
static uint8_t firstGSInput;

/** Interrupt called after an XLAT pulse to prevent more XLAT pulses. */
ISR(TIMER1_OVF_vect)
{
 8f2:	1f 92       	push	r1
 8f4:	0f 92       	push	r0
 8f6:	0f b6       	in	r0, 0x3f	; 63
 8f8:	0f 92       	push	r0
 8fa:	11 24       	eor	r1, r1
 8fc:	2f 93       	push	r18
 8fe:	3f 93       	push	r19
 900:	4f 93       	push	r20
 902:	5f 93       	push	r21
 904:	6f 93       	push	r22
 906:	7f 93       	push	r23
 908:	8f 93       	push	r24
 90a:	9f 93       	push	r25
 90c:	af 93       	push	r26
 90e:	bf 93       	push	r27
 910:	ef 93       	push	r30
 912:	ff 93       	push	r31
    disable_XLAT_pulses();
 914:	80 e2       	ldi	r24, 0x20	; 32
 916:	80 93 80 00 	sts	0x0080, r24
    clear_XLAT_interrupt();
 91a:	10 92 6f 00 	sts	0x006F, r1
    tlc_needXLAT = 0;
 91e:	10 92 f0 01 	sts	0x01F0, r1
    if (tlc_onUpdateFinished) {
 922:	80 91 ee 01 	lds	r24, 0x01EE
 926:	90 91 ef 01 	lds	r25, 0x01EF
 92a:	89 2b       	or	r24, r25
 92c:	31 f0       	breq	.+12     	; 0x93a <__stack+0x3b>
        sei();
 92e:	78 94       	sei
        tlc_onUpdateFinished();
 930:	e0 91 ee 01 	lds	r30, 0x01EE
 934:	f0 91 ef 01 	lds	r31, 0x01EF
 938:	09 95       	icall
    }
}
 93a:	ff 91       	pop	r31
 93c:	ef 91       	pop	r30
 93e:	bf 91       	pop	r27
 940:	af 91       	pop	r26
 942:	9f 91       	pop	r25
 944:	8f 91       	pop	r24
 946:	7f 91       	pop	r23
 948:	6f 91       	pop	r22
 94a:	5f 91       	pop	r21
 94c:	4f 91       	pop	r20
 94e:	3f 91       	pop	r19
 950:	2f 91       	pop	r18
 952:	0f 90       	pop	r0
 954:	0f be       	out	0x3f, r0	; 63
 956:	0f 90       	pop	r0
 958:	1f 90       	pop	r1
 95a:	18 95       	reti

0000095c <_ZN7Tlc59403setEhj>:
           channel 0, OUT0 of the next TLC is channel 16, etc.
    \param value (0-4095).  The grayscale value, 4095 is maximum.
    \see get */
void Tlc5940::set(TLC_CHANNEL_TYPE channel, uint16_t value)
{
    TLC_CHANNEL_TYPE index8 = (NUM_TLCS * 16 - 1) - channel;
 95c:	8f e0       	ldi	r24, 0x0F	; 15
 95e:	86 1b       	sub	r24, r22
    uint8_t *index12p = tlc_GSData + ((((uint16_t)index8) * 3) >> 1);
 960:	93 e0       	ldi	r25, 0x03	; 3
 962:	89 9f       	mul	r24, r25
 964:	f0 01       	movw	r30, r0
 966:	11 24       	eor	r1, r1
 968:	f6 95       	lsr	r31
 96a:	e7 95       	ror	r30
 96c:	ea 52       	subi	r30, 0x2A	; 42
 96e:	fe 4f       	sbci	r31, 0xFE	; 254
    if (index8 & 1) { // starts in the middle
 970:	80 ff       	sbrs	r24, 0
 972:	05 c0       	rjmp	.+10     	; 0x97e <_ZN7Tlc59403setEhj+0x22>
                      // first 4 bits intact | 4 top bits of value
        *index12p = (*index12p & 0xF0) | (value >> 8);
 974:	80 81       	ld	r24, Z
 976:	80 7f       	andi	r24, 0xF0	; 240
 978:	85 2b       	or	r24, r21
 97a:	80 83       	st	Z, r24
 97c:	0c c0       	rjmp	.+24     	; 0x996 <_ZN7Tlc59403setEhj+0x3a>
                      // 8 lower bits of value
        *(++index12p) = value & 0xFF;
    } else { // starts clean
                      // 8 upper bits of value
        *(index12p++) = value >> 4;
 97e:	ca 01       	movw	r24, r20
 980:	24 e0       	ldi	r18, 0x04	; 4
 982:	96 95       	lsr	r25
 984:	87 95       	ror	r24
 986:	2a 95       	dec	r18
 988:	e1 f7       	brne	.-8      	; 0x982 <_ZN7Tlc59403setEhj+0x26>
 98a:	80 83       	st	Z, r24
                      // 4 lower bits of value | last 4 bits intact
        *index12p = ((uint8_t)(value << 4)) | (*index12p & 0xF);
 98c:	81 81       	ldd	r24, Z+1	; 0x01
 98e:	8f 70       	andi	r24, 0x0F	; 15
 990:	42 95       	swap	r20
 992:	40 7f       	andi	r20, 0xF0	; 240
 994:	48 2b       	or	r20, r24
 996:	41 83       	std	Z+1, r20	; 0x01
 998:	08 95       	ret

0000099a <_ZN7Tlc59406setAllEj>:

/** Sets all channels to value.
    \param value grayscale value (0 - 4095) */
void Tlc5940::setAll(uint16_t value)
{
    uint8_t firstByte = value >> 4;
 99a:	cb 01       	movw	r24, r22
 99c:	24 e0       	ldi	r18, 0x04	; 4
 99e:	96 95       	lsr	r25
 9a0:	87 95       	ror	r24
 9a2:	2a 95       	dec	r18
 9a4:	e1 f7       	brne	.-8      	; 0x99e <_ZN7Tlc59406setAllEj+0x4>
 9a6:	98 2f       	mov	r25, r24
    uint8_t secondByte = (value << 4) | (value >> 8);
 9a8:	26 2f       	mov	r18, r22
 9aa:	86 2f       	mov	r24, r22
 9ac:	82 95       	swap	r24
 9ae:	80 7f       	andi	r24, 0xF0	; 240
 9b0:	87 2b       	or	r24, r23
    uint8_t *p = tlc_GSData;
 9b2:	e6 ed       	ldi	r30, 0xD6	; 214
 9b4:	f1 e0       	ldi	r31, 0x01	; 1
    while (p < tlc_GSData + NUM_TLCS * 24) {
        *p++ = firstByte;
 9b6:	90 83       	st	Z, r25
        *p++ = secondByte;
 9b8:	81 83       	std	Z+1, r24	; 0x01
 9ba:	33 96       	adiw	r30, 0x03	; 3
 9bc:	df 01       	movw	r26, r30
 9be:	11 97       	sbiw	r26, 0x01	; 1
        *p++ = (uint8_t)value;
 9c0:	2c 93       	st	X, r18
void Tlc5940::setAll(uint16_t value)
{
    uint8_t firstByte = value >> 4;
    uint8_t secondByte = (value << 4) | (value >> 8);
    uint8_t *p = tlc_GSData;
    while (p < tlc_GSData + NUM_TLCS * 24) {
 9c2:	31 e0       	ldi	r19, 0x01	; 1
 9c4:	ee 3e       	cpi	r30, 0xEE	; 238
 9c6:	f3 07       	cpc	r31, r19
 9c8:	b0 f3       	brcs	.-20     	; 0x9b6 <_ZN7Tlc59406setAllEj+0x1c>
        *p++ = firstByte;
        *p++ = secondByte;
        *p++ = (uint8_t)value;
    }
}
 9ca:	08 95       	ret

000009cc <_ZN7Tlc59405clearEv>:
/** Clears the grayscale data array, #tlc_GSData, but does not shift in any
    data.  This call should be followed by update() if you are turning off
    all the outputs. */
void Tlc5940::clear(void)
{
    setAll(0);
 9cc:	60 e0       	ldi	r22, 0x00	; 0
 9ce:	70 e0       	ldi	r23, 0x00	; 0
 9d0:	0c 94 cd 04 	jmp	0x99a	; 0x99a <_ZN7Tlc59406setAllEj>

000009d4 <_Z15tlc_shift8_initv>:
#elif DATA_TRANSFER_MODE == TLC_SPI

/** Initializes the SPI module to double speed (f_osc / 2) */
void tlc_shift8_init(void)
{
    SIN_DDR    |= _BV(SIN_PIN);    // SPI MOSI as output
 9d4:	23 9a       	sbi	0x04, 3	; 4
    SCLK_DDR   |= _BV(SCLK_PIN);   // SPI SCK as output
 9d6:	25 9a       	sbi	0x04, 5	; 4
    TLC_SS_DDR |= _BV(TLC_SS_PIN); // SPI SS as output
 9d8:	22 9a       	sbi	0x04, 2	; 4

    SCLK_PORT &= ~_BV(SCLK_PIN);
 9da:	2d 98       	cbi	0x05, 5	; 5

    SPSR = _BV(SPI2X); // double speed (f_osc / 2)
 9dc:	81 e0       	ldi	r24, 0x01	; 1
 9de:	8d bd       	out	0x2d, r24	; 45
    SPCR = _BV(SPE)    // enable SPI
         | _BV(MSTR);  // master mode
 9e0:	80 e5       	ldi	r24, 0x50	; 80
 9e2:	8c bd       	out	0x2c, r24	; 44
 9e4:	08 95       	ret

000009e6 <_Z10tlc_shift8h>:
}

/** Shifts out a byte, MSB first */
void tlc_shift8(uint8_t byte)
{
    SPDR = byte; // starts transmission
 9e6:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & _BV(SPIF)))
 9e8:	0d b4       	in	r0, 0x2d	; 45
 9ea:	07 fe       	sbrs	r0, 7
 9ec:	fd cf       	rjmp	.-6      	; 0x9e8 <_Z10tlc_shift8h+0x2>
        ; // wait for transmission complete
}
 9ee:	08 95       	ret

000009f0 <_ZN7Tlc59406updateEv>:
    or
    \code while(tlc_needXLAT); \endcode
    \returns 1 if there is data waiting to be latched, 0 if data was
             successfully shifted in */
uint8_t Tlc5940::update(void)
{
 9f0:	1f 93       	push	r17
 9f2:	cf 93       	push	r28
 9f4:	df 93       	push	r29
    if (tlc_needXLAT) {
 9f6:	10 91 f0 01 	lds	r17, 0x01F0
 9fa:	11 11       	cpse	r17, r1
 9fc:	29 c0       	rjmp	.+82     	; 0xa50 <_ZN7Tlc59406updateEv+0x60>
        return 1;
    }
    disable_XLAT_pulses();
 9fe:	80 e2       	ldi	r24, 0x20	; 32
 a00:	80 93 80 00 	sts	0x0080, r24
    if (firstGSInput) {
 a04:	80 91 d5 01 	lds	r24, 0x01D5
 a08:	88 23       	and	r24, r24
 a0a:	29 f0       	breq	.+10     	; 0xa16 <_ZN7Tlc59406updateEv+0x26>
        // adds an extra SCLK pulse unless we've just set dot-correction data
        firstGSInput = 0;
 a0c:	10 92 d5 01 	sts	0x01D5, r1
    or
    \code while(tlc_needXLAT); \endcode
    \returns 1 if there is data waiting to be latched, 0 if data was
             successfully shifted in */
uint8_t Tlc5940::update(void)
{
 a10:	c6 ed       	ldi	r28, 0xD6	; 214
 a12:	d1 e0       	ldi	r29, 0x01	; 1
 a14:	03 c0       	rjmp	.+6      	; 0xa1c <_ZN7Tlc59406updateEv+0x2c>
    disable_XLAT_pulses();
    if (firstGSInput) {
        // adds an extra SCLK pulse unless we've just set dot-correction data
        firstGSInput = 0;
    } else {
        pulse_pin(SCLK_PORT, SCLK_PIN);
 a16:	2d 9a       	sbi	0x05, 5	; 5
 a18:	2d 98       	cbi	0x05, 5	; 5
 a1a:	fa cf       	rjmp	.-12     	; 0xa10 <_ZN7Tlc59406updateEv+0x20>
    }
    uint8_t *p = tlc_GSData;
    while (p < tlc_GSData + NUM_TLCS * 24) {
        tlc_shift8(*p++);
 a1c:	88 81       	ld	r24, Y
 a1e:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <_Z10tlc_shift8h>
        tlc_shift8(*p++);
 a22:	89 81       	ldd	r24, Y+1	; 0x01
 a24:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <_Z10tlc_shift8h>
 a28:	23 96       	adiw	r28, 0x03	; 3
 a2a:	fe 01       	movw	r30, r28
 a2c:	31 97       	sbiw	r30, 0x01	; 1
        tlc_shift8(*p++);
 a2e:	80 81       	ld	r24, Z
 a30:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <_Z10tlc_shift8h>
        firstGSInput = 0;
    } else {
        pulse_pin(SCLK_PORT, SCLK_PIN);
    }
    uint8_t *p = tlc_GSData;
    while (p < tlc_GSData + NUM_TLCS * 24) {
 a34:	81 e0       	ldi	r24, 0x01	; 1
 a36:	ce 3e       	cpi	r28, 0xEE	; 238
 a38:	d8 07       	cpc	r29, r24
 a3a:	80 f3       	brcs	.-32     	; 0xa1c <_ZN7Tlc59406updateEv+0x2c>
        tlc_shift8(*p++);
        tlc_shift8(*p++);
        tlc_shift8(*p++);
    }
    tlc_needXLAT = 1;
 a3c:	81 e0       	ldi	r24, 0x01	; 1
 a3e:	80 93 f0 01 	sts	0x01F0, r24
    enable_XLAT_pulses();
 a42:	90 ea       	ldi	r25, 0xA0	; 160
 a44:	90 93 80 00 	sts	0x0080, r25
    set_XLAT_interrupt();
 a48:	b0 9a       	sbi	0x16, 0	; 22
 a4a:	80 93 6f 00 	sts	0x006F, r24
 a4e:	01 c0       	rjmp	.+2      	; 0xa52 <_ZN7Tlc59406updateEv+0x62>
    \returns 1 if there is data waiting to be latched, 0 if data was
             successfully shifted in */
uint8_t Tlc5940::update(void)
{
    if (tlc_needXLAT) {
        return 1;
 a50:	11 e0       	ldi	r17, 0x01	; 1
    }
    tlc_needXLAT = 1;
    enable_XLAT_pulses();
    set_XLAT_interrupt();
    return 0;
}
 a52:	81 2f       	mov	r24, r17
 a54:	df 91       	pop	r29
 a56:	cf 91       	pop	r28
 a58:	1f 91       	pop	r17
 a5a:	08 95       	ret

00000a5c <_ZN7Tlc59404initEj>:
/** Pin i/o and Timer setup.  The grayscale register will be reset to all
    zeros, or whatever initialValue is set to and the Timers will start.
    \param initialValue = 0, optional parameter specifing the inital startup
           value */
void Tlc5940::init(uint16_t initialValue)
{
 a5c:	0f 93       	push	r16
 a5e:	1f 93       	push	r17
 a60:	cf 93       	push	r28
 a62:	df 93       	push	r29
 a64:	00 d0       	rcall	.+0      	; 0xa66 <_ZN7Tlc59404initEj+0xa>
 a66:	cd b7       	in	r28, 0x3d	; 61
 a68:	de b7       	in	r29, 0x3e	; 62
 a6a:	8c 01       	movw	r16, r24
    /* Pin Setup */
    XLAT_DDR |= _BV(XLAT_PIN);
 a6c:	21 9a       	sbi	0x04, 1	; 4
    BLANK_DDR |= _BV(BLANK_PIN);
 a6e:	22 9a       	sbi	0x04, 2	; 4
    GSCLK_DDR |= _BV(GSCLK_PIN);
 a70:	53 9a       	sbi	0x0a, 3	; 10
#endif
#if XERR_ENABLED
    XERR_DDR &= ~_BV(XERR_PIN);   // XERR as input
    XERR_PORT |= _BV(XERR_PIN);   // enable pull-up resistor
#endif
    BLANK_PORT |= _BV(BLANK_PIN); // leave blank high (until the timers start)
 a72:	2a 9a       	sbi	0x05, 2	; 5

    tlc_shift8_init();
 a74:	69 83       	std	Y+1, r22	; 0x01
 a76:	7a 83       	std	Y+2, r23	; 0x02
 a78:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_Z15tlc_shift8_initv>

    setAll(initialValue);
 a7c:	69 81       	ldd	r22, Y+1	; 0x01
 a7e:	7a 81       	ldd	r23, Y+2	; 0x02
 a80:	c8 01       	movw	r24, r16
 a82:	0e 94 cd 04 	call	0x99a	; 0x99a <_ZN7Tlc59406setAllEj>
    update();
 a86:	c8 01       	movw	r24, r16
 a88:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <_ZN7Tlc59406updateEv>
    disable_XLAT_pulses();
 a8c:	e0 e8       	ldi	r30, 0x80	; 128
 a8e:	f0 e0       	ldi	r31, 0x00	; 0
 a90:	80 e2       	ldi	r24, 0x20	; 32
 a92:	80 83       	st	Z, r24
    clear_XLAT_interrupt();
 a94:	10 92 6f 00 	sts	0x006F, r1
    tlc_needXLAT = 0;
 a98:	10 92 f0 01 	sts	0x01F0, r1
    pulse_pin(XLAT_PORT, XLAT_PIN);
 a9c:	29 9a       	sbi	0x05, 1	; 5
 a9e:	29 98       	cbi	0x05, 1	; 5


    /* Timer Setup */

    /* Timer 1 - BLANK / XLAT */
    TCCR1A = _BV(COM1B1);  // non inverting, output on OC1B, BLANK
 aa0:	80 83       	st	Z, r24
    TCCR1B = _BV(WGM13);   // Phase/freq correct PWM, ICR1 top
 aa2:	e1 e8       	ldi	r30, 0x81	; 129
 aa4:	f0 e0       	ldi	r31, 0x00	; 0
 aa6:	80 e1       	ldi	r24, 0x10	; 16
 aa8:	80 83       	st	Z, r24
    OCR1A = 1;             // duty factor on OC1A, XLAT is inside BLANK
 aaa:	81 e0       	ldi	r24, 0x01	; 1
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	90 93 89 00 	sts	0x0089, r25
 ab2:	80 93 88 00 	sts	0x0088, r24
    OCR1B = 2;             // duty factor on BLANK (larger than OCR1A (XLAT))
 ab6:	82 e0       	ldi	r24, 0x02	; 2
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	90 93 8b 00 	sts	0x008B, r25
 abe:	80 93 8a 00 	sts	0x008A, r24
    ICR1 = TLC_PWM_PERIOD; // see tlc_config.h
 ac2:	80 e0       	ldi	r24, 0x00	; 0
 ac4:	90 e2       	ldi	r25, 0x20	; 32
 ac6:	90 93 87 00 	sts	0x0087, r25
 aca:	80 93 86 00 	sts	0x0086, r24
           | _BV(WGM33);      // Fast pwm with ICR3 top
#else
    TCCR2A = _BV(COM2B1)      // set on BOTTOM, clear on OCR2A (non-inverting),
                              // output on OC2B
           | _BV(WGM21)       // Fast pwm with OCR2A top
           | _BV(WGM20);      // Fast pwm with OCR2A top
 ace:	83 e2       	ldi	r24, 0x23	; 35
 ad0:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = _BV(WGM22);      // Fast pwm with OCR2A top
 ad4:	a1 eb       	ldi	r26, 0xB1	; 177
 ad6:	b0 e0       	ldi	r27, 0x00	; 0
 ad8:	88 e0       	ldi	r24, 0x08	; 8
 ada:	8c 93       	st	X, r24
    OCR2B = 0;                // duty factor (as short a pulse as possible)
 adc:	10 92 b4 00 	sts	0x00B4, r1
    OCR2A = TLC_GSCLK_PERIOD; // see tlc_config.h
 ae0:	83 e0       	ldi	r24, 0x03	; 3
 ae2:	80 93 b3 00 	sts	0x00B3, r24
    TCCR2B |= _BV(CS20);      // no prescale, (start pwm output)
 ae6:	8c 91       	ld	r24, X
 ae8:	81 60       	ori	r24, 0x01	; 1
 aea:	8c 93       	st	X, r24
#endif
    TCCR1B |= _BV(CS10);      // no prescale, (start pwm output)
 aec:	80 81       	ld	r24, Z
 aee:	81 60       	ori	r24, 0x01	; 1
 af0:	80 83       	st	Z, r24
    update();
 af2:	c8 01       	movw	r24, r16
}
 af4:	0f 90       	pop	r0
 af6:	0f 90       	pop	r0
 af8:	df 91       	pop	r29
 afa:	cf 91       	pop	r28
 afc:	1f 91       	pop	r17
 afe:	0f 91       	pop	r16
    OCR2B = 0;                // duty factor (as short a pulse as possible)
    OCR2A = TLC_GSCLK_PERIOD; // see tlc_config.h
    TCCR2B |= _BV(CS20);      // no prescale, (start pwm output)
#endif
    TCCR1B |= _BV(CS10);      // no prescale, (start pwm output)
    update();
 b00:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <_ZN7Tlc59406updateEv>

00000b04 <__divmodhi4>:
 b04:	97 fb       	bst	r25, 7
 b06:	07 2e       	mov	r0, r23
 b08:	16 f4       	brtc	.+4      	; 0xb0e <__divmodhi4+0xa>
 b0a:	00 94       	com	r0
 b0c:	07 d0       	rcall	.+14     	; 0xb1c <__divmodhi4_neg1>
 b0e:	77 fd       	sbrc	r23, 7
 b10:	09 d0       	rcall	.+18     	; 0xb24 <__divmodhi4_neg2>
 b12:	0e 94 b8 05 	call	0xb70	; 0xb70 <__udivmodhi4>
 b16:	07 fc       	sbrc	r0, 7
 b18:	05 d0       	rcall	.+10     	; 0xb24 <__divmodhi4_neg2>
 b1a:	3e f4       	brtc	.+14     	; 0xb2a <__divmodhi4_exit>

00000b1c <__divmodhi4_neg1>:
 b1c:	90 95       	com	r25
 b1e:	81 95       	neg	r24
 b20:	9f 4f       	sbci	r25, 0xFF	; 255
 b22:	08 95       	ret

00000b24 <__divmodhi4_neg2>:
 b24:	70 95       	com	r23
 b26:	61 95       	neg	r22
 b28:	7f 4f       	sbci	r23, 0xFF	; 255

00000b2a <__divmodhi4_exit>:
 b2a:	08 95       	ret

00000b2c <__udivmodsi4>:
 b2c:	a1 e2       	ldi	r26, 0x21	; 33
 b2e:	1a 2e       	mov	r1, r26
 b30:	aa 1b       	sub	r26, r26
 b32:	bb 1b       	sub	r27, r27
 b34:	fd 01       	movw	r30, r26
 b36:	0d c0       	rjmp	.+26     	; 0xb52 <__udivmodsi4_ep>

00000b38 <__udivmodsi4_loop>:
 b38:	aa 1f       	adc	r26, r26
 b3a:	bb 1f       	adc	r27, r27
 b3c:	ee 1f       	adc	r30, r30
 b3e:	ff 1f       	adc	r31, r31
 b40:	a2 17       	cp	r26, r18
 b42:	b3 07       	cpc	r27, r19
 b44:	e4 07       	cpc	r30, r20
 b46:	f5 07       	cpc	r31, r21
 b48:	20 f0       	brcs	.+8      	; 0xb52 <__udivmodsi4_ep>
 b4a:	a2 1b       	sub	r26, r18
 b4c:	b3 0b       	sbc	r27, r19
 b4e:	e4 0b       	sbc	r30, r20
 b50:	f5 0b       	sbc	r31, r21

00000b52 <__udivmodsi4_ep>:
 b52:	66 1f       	adc	r22, r22
 b54:	77 1f       	adc	r23, r23
 b56:	88 1f       	adc	r24, r24
 b58:	99 1f       	adc	r25, r25
 b5a:	1a 94       	dec	r1
 b5c:	69 f7       	brne	.-38     	; 0xb38 <__udivmodsi4_loop>
 b5e:	60 95       	com	r22
 b60:	70 95       	com	r23
 b62:	80 95       	com	r24
 b64:	90 95       	com	r25
 b66:	9b 01       	movw	r18, r22
 b68:	ac 01       	movw	r20, r24
 b6a:	bd 01       	movw	r22, r26
 b6c:	cf 01       	movw	r24, r30
 b6e:	08 95       	ret

00000b70 <__udivmodhi4>:
 b70:	aa 1b       	sub	r26, r26
 b72:	bb 1b       	sub	r27, r27
 b74:	51 e1       	ldi	r21, 0x11	; 17
 b76:	07 c0       	rjmp	.+14     	; 0xb86 <__udivmodhi4_ep>

00000b78 <__udivmodhi4_loop>:
 b78:	aa 1f       	adc	r26, r26
 b7a:	bb 1f       	adc	r27, r27
 b7c:	a6 17       	cp	r26, r22
 b7e:	b7 07       	cpc	r27, r23
 b80:	10 f0       	brcs	.+4      	; 0xb86 <__udivmodhi4_ep>
 b82:	a6 1b       	sub	r26, r22
 b84:	b7 0b       	sbc	r27, r23

00000b86 <__udivmodhi4_ep>:
 b86:	88 1f       	adc	r24, r24
 b88:	99 1f       	adc	r25, r25
 b8a:	5a 95       	dec	r21
 b8c:	a9 f7       	brne	.-22     	; 0xb78 <__udivmodhi4_loop>
 b8e:	80 95       	com	r24
 b90:	90 95       	com	r25
 b92:	bc 01       	movw	r22, r24
 b94:	cd 01       	movw	r24, r26
 b96:	08 95       	ret

00000b98 <__tablejump2__>:
 b98:	ee 0f       	add	r30, r30
 b9a:	ff 1f       	adc	r31, r31
 b9c:	05 90       	lpm	r0, Z+
 b9e:	f4 91       	lpm	r31, Z
 ba0:	e0 2d       	mov	r30, r0
 ba2:	09 94       	ijmp

00000ba4 <_exit>:
 ba4:	f8 94       	cli

00000ba6 <__stop_program>:
 ba6:	ff cf       	rjmp	.-2      	; 0xba6 <__stop_program>
