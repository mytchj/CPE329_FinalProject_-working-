
CPE329_FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00000d00  00000d94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ce  0080012c  0080012c  00000dc0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dc0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000df0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f8  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006cfa  00000000  00000000  00001128  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014f3  00000000  00000000  00007e22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001194  00000000  00000000  00009315  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000908  00000000  00000000  0000a4ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001af6  00000000  00000000  0000adb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002e8d  00000000  00000000  0000c8aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000338  00000000  00000000  0000f737  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__vector_3>
  10:	0c 94 09 01 	jmp	0x212	; 0x212 <__vector_4>
  14:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__vector_5>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  34:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__vector_13>
  38:	0c 94 bc 00 	jmp	0x178	; 0x178 <__vector_14>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  40:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <__vector_16>
  44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  48:	0c 94 35 02 	jmp	0x46a	; 0x46a <__vector_18>
  4c:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__vector_19>
  50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <__ctors_start>:
  68:	13 02       	muls	r17, r19
  6a:	8d 02       	muls	r24, r29

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d8 e0       	ldi	r29, 0x08	; 8
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	e0 e0       	ldi	r30, 0x00	; 0
  80:	fd e0       	ldi	r31, 0x0D	; 13
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	ac 32       	cpi	r26, 0x2C	; 44
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	ac e2       	ldi	r26, 0x2C	; 44
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	aa 3f       	cpi	r26, 0xFA	; 250
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	c6 e3       	ldi	r28, 0x36	; 54
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	04 c0       	rjmp	.+8      	; 0xae <__do_global_ctors+0x10>
  a6:	21 97       	sbiw	r28, 0x01	; 1
  a8:	fe 01       	movw	r30, r28
  aa:	0e 94 78 06 	call	0xcf0	; 0xcf0 <__tablejump2__>
  ae:	c4 33       	cpi	r28, 0x34	; 52
  b0:	d1 07       	cpc	r29, r17
  b2:	c9 f7       	brne	.-14     	; 0xa6 <__do_global_ctors+0x8>
  b4:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  b8:	0c 94 7e 06 	jmp	0xcfc	; 0xcfc <_exit>

000000bc <__bad_interrupt>:
  bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	81 ee       	ldi	r24, 0xE1	; 225
  c4:	94 e0       	ldi	r25, 0x04	; 4
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x6>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x10>
  d0:	00 00       	nop
uint32_t dt_us = 0;

int main(void){
	_delay_ms(100);			// startup delay
	
	init();					// initializations for Arduino.h
  d2:	0e 94 26 04 	call	0x84c	; 0x84c <init>
	//Serial.begin(9600);		// set baud rate for serial com
	Tlc.init();				// initialize the TLC chip
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	8d ed       	ldi	r24, 0xDD	; 221
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	0e 94 16 05 	call	0xa2c	; 0xa2c <_ZN7Tlc59404initEj>
	
	initGPIO();
  e2:	0e 94 17 02 	call	0x42e	; 0x42e <_Z8initGPIOv>
	initTimers();
  e6:	0e 94 1e 02 	call	0x43c	; 0x43c <_Z10initTimersv>
	initPCINT();
  ea:	0e 94 27 02 	call	0x44e	; 0x44e <_Z9initPCINTv>
	sei();
  ee:	78 94       	sei
   
	// Turn on full, then fade off
	while(GS >= 0){
  f0:	80 91 00 01 	lds	r24, 0x0100
  f4:	90 91 01 01 	lds	r25, 0x0101
  f8:	97 fd       	sbrc	r25, 7
  fa:	16 c0       	rjmp	.+44     	; 0x128 <main+0x68>
		setAllLEDs(GS,0,0);
  fc:	40 e0       	ldi	r20, 0x00	; 0
  fe:	50 e0       	ldi	r21, 0x00	; 0
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	0e 94 b1 01 	call	0x362	; 0x362 <_Z10setAllLEDsiii>
		GS--;					// increment GS
 108:	80 91 00 01 	lds	r24, 0x0100
 10c:	90 91 01 01 	lds	r25, 0x0101
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	90 93 01 01 	sts	0x0101, r25
 116:	80 93 00 01 	sts	0x0100, r24
 11a:	8f e1       	ldi	r24, 0x1F	; 31
 11c:	9e e4       	ldi	r25, 0x4E	; 78
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x5e>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x64>
 124:	00 00       	nop
 126:	e4 cf       	rjmp	.-56     	; 0xf0 <main+0x30>
		_delay_ms(GS_DELAY);	// delay GS color
	}
   
	// Temporary idea: Determine the bottom/back LED, send it to rgbUtil so that
	//  it knows which led to cycle to next
	setBottomLED(0);
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 33 01 	call	0x266	; 0x266 <_Z12setBottomLEDi>
	//Infintely cycle an LED around the loop
	while (1) {
		nextLED();
		setAmbientColor(GS, 0, 0);
		GS++;
		GS %= (TOP_GS/16);
 130:	ce e4       	ldi	r28, 0x4E	; 78
 132:	d0 e0       	ldi	r29, 0x00	; 0
	//  it knows which led to cycle to next
	setBottomLED(0);
   
	//Infintely cycle an LED around the loop
	while (1) {
		nextLED();
 134:	0e 94 c9 01 	call	0x392	; 0x392 <_Z7nextLEDv>
		setAmbientColor(GS, 0, 0);
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	80 91 00 01 	lds	r24, 0x0100
 144:	90 91 01 01 	lds	r25, 0x0101
 148:	0e 94 36 01 	call	0x26c	; 0x26c <_Z15setAmbientColoriii>
		GS++;
 14c:	80 91 00 01 	lds	r24, 0x0100
 150:	90 91 01 01 	lds	r25, 0x0101
 154:	01 96       	adiw	r24, 0x01	; 1
		GS %= (TOP_GS/16);
 156:	be 01       	movw	r22, r28
 158:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__divmodhi4>
 15c:	90 93 01 01 	sts	0x0101, r25
 160:	80 93 00 01 	sts	0x0100, r24
 164:	9f ef       	ldi	r25, 0xFF	; 255
 166:	21 ee       	ldi	r18, 0xE1	; 225
 168:	84 e0       	ldi	r24, 0x04	; 4
 16a:	91 50       	subi	r25, 0x01	; 1
 16c:	20 40       	sbci	r18, 0x00	; 0
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <main+0xaa>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0xb4>
 174:	00 00       	nop
 176:	de cf       	rjmp	.-68     	; 0x134 <main+0x74>

00000178 <__vector_14>:

////////////////////////////////ISR////////////////////////////////////////////

// ISR that holds the time between halleffect readings
// timer0 set to overflow every 100us / 0.1ms
ISR(TIMER0_COMPA_vect){
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	2f 93       	push	r18
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
 188:	af 93       	push	r26
 18a:	bf 93       	push	r27
	dt_us = dt_us + 100;
 18c:	80 91 2c 01 	lds	r24, 0x012C
 190:	90 91 2d 01 	lds	r25, 0x012D
 194:	a0 91 2e 01 	lds	r26, 0x012E
 198:	b0 91 2f 01 	lds	r27, 0x012F
 19c:	8c 59       	subi	r24, 0x9C	; 156
 19e:	9f 4f       	sbci	r25, 0xFF	; 255
 1a0:	af 4f       	sbci	r26, 0xFF	; 255
 1a2:	bf 4f       	sbci	r27, 0xFF	; 255
	
	// if dt_us > 1 second bike is probalby stopped 
	if(dt_us > 1000000){
 1a4:	81 34       	cpi	r24, 0x41	; 65
 1a6:	22 e4       	ldi	r18, 0x42	; 66
 1a8:	92 07       	cpc	r25, r18
 1aa:	2f e0       	ldi	r18, 0x0F	; 15
 1ac:	a2 07       	cpc	r26, r18
 1ae:	b1 05       	cpc	r27, r1
 1b0:	48 f4       	brcc	.+18     	; 0x1c4 <__vector_14+0x4c>
////////////////////////////////ISR////////////////////////////////////////////

// ISR that holds the time between halleffect readings
// timer0 set to overflow every 100us / 0.1ms
ISR(TIMER0_COMPA_vect){
	dt_us = dt_us + 100;
 1b2:	80 93 2c 01 	sts	0x012C, r24
 1b6:	90 93 2d 01 	sts	0x012D, r25
 1ba:	a0 93 2e 01 	sts	0x012E, r26
 1be:	b0 93 2f 01 	sts	0x012F, r27
 1c2:	08 c0       	rjmp	.+16     	; 0x1d4 <__vector_14+0x5c>
	
	// if dt_us > 1 second bike is probalby stopped 
	if(dt_us > 1000000){
		// tell rgbUtil that bike is stopped
		
		dt_us = 0;		// reset dt_us
 1c4:	10 92 2c 01 	sts	0x012C, r1
 1c8:	10 92 2d 01 	sts	0x012D, r1
 1cc:	10 92 2e 01 	sts	0x012E, r1
 1d0:	10 92 2f 01 	sts	0x012F, r1
	}
}
 1d4:	bf 91       	pop	r27
 1d6:	af 91       	pop	r26
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	2f 91       	pop	r18
 1de:	0f 90       	pop	r0
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	0f 90       	pop	r0
 1e4:	1f 90       	pop	r1
 1e6:	18 95       	reti

000001e8 <__vector_3>:

// ISR for halleffect1 at pin D8
// enters ISR when set from high (from pull-up) to low
ISR(PCINT0_vect){
 1e8:	1f 92       	push	r1
 1ea:	0f 92       	push	r0
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	0f 92       	push	r0
 1f0:	11 24       	eor	r1, r1
 1f2:	8f 93       	push	r24
	dt_us = dt_us + TCNT0;		// add remaining TCNT time to dt_us
 1f4:	86 b5       	in	r24, 0x26	; 38
	
	// send dt_us to rgbUtil
	
	dt_us = 0;		// reset dt_us
 1f6:	10 92 2c 01 	sts	0x012C, r1
 1fa:	10 92 2d 01 	sts	0x012D, r1
 1fe:	10 92 2e 01 	sts	0x012E, r1
 202:	10 92 2f 01 	sts	0x012F, r1
}
 206:	8f 91       	pop	r24
 208:	0f 90       	pop	r0
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	0f 90       	pop	r0
 20e:	1f 90       	pop	r1
 210:	18 95       	reti

00000212 <__vector_4>:

// ISR for halleffect1 at pin D7
// enters ISR when set from high (from pull-up) to low
ISR(PCINT1_vect){
 212:	1f 92       	push	r1
 214:	0f 92       	push	r0
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	0f 92       	push	r0
 21a:	11 24       	eor	r1, r1
 21c:	8f 93       	push	r24
	dt_us = dt_us + TCNT0;		// add remaining TCNT time to dt_us
 21e:	86 b5       	in	r24, 0x26	; 38
	
	// send dt_us to rgbUtil
	
	dt_us = 0;		// reset dt_us
 220:	10 92 2c 01 	sts	0x012C, r1
 224:	10 92 2d 01 	sts	0x012D, r1
 228:	10 92 2e 01 	sts	0x012E, r1
 22c:	10 92 2f 01 	sts	0x012F, r1
}
 230:	8f 91       	pop	r24
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <__vector_5>:

// ISR for halleffect1 at pin A0
// enters ISR when set from high (from pull-up) to low
ISR(PCINT2_vect){
 23c:	1f 92       	push	r1
 23e:	0f 92       	push	r0
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	0f 92       	push	r0
 244:	11 24       	eor	r1, r1
 246:	8f 93       	push	r24
	dt_us = dt_us + TCNT0;		// add remaining TCNT time to dt_us
 248:	86 b5       	in	r24, 0x26	; 38
	
	// send dt_us to rgbUtil
	
	dt_us = 0;		// reset dt_us
 24a:	10 92 2c 01 	sts	0x012C, r1
 24e:	10 92 2d 01 	sts	0x012D, r1
 252:	10 92 2e 01 	sts	0x012E, r1
 256:	10 92 2f 01 	sts	0x012F, r1
}
 25a:	8f 91       	pop	r24
 25c:	0f 90       	pop	r0
 25e:	0f be       	out	0x3f, r0	; 63
 260:	0f 90       	pop	r0
 262:	1f 90       	pop	r1
 264:	18 95       	reti

00000266 <_Z12setBottomLEDi>:
   Tlc.update();     // send GS data to TLC5940
}

/* Something else determines which LED is on the bottom in main */
void setBottomLED(int LED) {
   bottomLED = LED;
 266:	80 93 09 01 	sts	0x0109, r24
 26a:	08 95       	ret

0000026c <_Z15setAmbientColoriii>:
}

void setAmbientColor(int r, int g, int b) {
   ambientColor.r = r;
 26c:	e0 e3       	ldi	r30, 0x30	; 48
 26e:	f1 e0       	ldi	r31, 0x01	; 1
 270:	91 83       	std	Z+1, r25	; 0x01
 272:	80 83       	st	Z, r24
   ambientColor.g = g;
 274:	73 83       	std	Z+3, r23	; 0x03
 276:	62 83       	std	Z+2, r22	; 0x02
   ambientColor.b = b;
 278:	55 83       	std	Z+5, r21	; 0x05
 27a:	44 83       	std	Z+4, r20	; 0x04
 27c:	08 95       	ret

0000027e <_Z6setLEDi5color>:
   
   currentLED++;
   currentLED %= numLeds;
}

void setLED(int ledNum, color color) {
 27e:	0f 93       	push	r16
 280:	1f 93       	push	r17
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	00 d0       	rcall	.+0      	; 0x288 <_Z6setLEDi5color+0xa>
 288:	00 d0       	rcall	.+0      	; 0x28a <_Z6setLEDi5color+0xc>
 28a:	00 d0       	rcall	.+0      	; 0x28c <_Z6setLEDi5color+0xe>
 28c:	cd b7       	in	r28, 0x3d	; 61
 28e:	de b7       	in	r29, 0x3e	; 62
 290:	29 83       	std	Y+1, r18	; 0x01
 292:	3a 83       	std	Y+2, r19	; 0x02
 294:	4b 83       	std	Y+3, r20	; 0x03
 296:	5c 83       	std	Y+4, r21	; 0x04
 298:	6d 83       	std	Y+5, r22	; 0x05
 29a:	7e 83       	std	Y+6, r23	; 0x06
   int offset = -1;
   ledNum *= numColorChannels;
 29c:	8c 01       	movw	r16, r24
 29e:	00 0f       	add	r16, r16
 2a0:	11 1f       	adc	r17, r17
 2a2:	08 0f       	add	r16, r24
 2a4:	19 1f       	adc	r17, r25
   
   if (R_ENABLE)
      Tlc.set(ledNum + ++offset, color.r);
 2a6:	49 81       	ldd	r20, Y+1	; 0x01
 2a8:	5a 81       	ldd	r21, Y+2	; 0x02
 2aa:	60 2f       	mov	r22, r16
 2ac:	8d ed       	ldi	r24, 0xDD	; 221
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	0e 94 96 04 	call	0x92c	; 0x92c <_ZN7Tlc59403setEhj>
   if (G_ENABLE)
      Tlc.set(ledNum + ++offset, color.g);
 2b4:	4b 81       	ldd	r20, Y+3	; 0x03
 2b6:	5c 81       	ldd	r21, Y+4	; 0x04
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	60 0f       	add	r22, r16
 2bc:	8d ed       	ldi	r24, 0xDD	; 221
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	0e 94 96 04 	call	0x92c	; 0x92c <_ZN7Tlc59403setEhj>
   if (B_ENABLE)
      Tlc.set(ledNum + ++offset, color.b);
 2c4:	4d 81       	ldd	r20, Y+5	; 0x05
 2c6:	5e 81       	ldd	r21, Y+6	; 0x06
 2c8:	62 e0       	ldi	r22, 0x02	; 2
 2ca:	60 0f       	add	r22, r16
 2cc:	8d ed       	ldi	r24, 0xDD	; 221
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	26 96       	adiw	r28, 0x06	; 6
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	f8 94       	cli
 2d6:	de bf       	out	0x3e, r29	; 62
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	cd bf       	out	0x3d, r28	; 61
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	1f 91       	pop	r17
 2e2:	0f 91       	pop	r16
   if (R_ENABLE)
      Tlc.set(ledNum + ++offset, color.r);
   if (G_ENABLE)
      Tlc.set(ledNum + ++offset, color.g);
   if (B_ENABLE)
      Tlc.set(ledNum + ++offset, color.b);
 2e4:	0c 94 96 04 	jmp	0x92c	; 0x92c <_ZN7Tlc59403setEhj>

000002e8 <_Z10setAllLEDs5color>:
   color solid = {r, g, b};
   
   setAllLEDs(solid);
}

void setAllLEDs(color solid) {
 2e8:	0f 93       	push	r16
 2ea:	1f 93       	push	r17
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	00 d0       	rcall	.+0      	; 0x2f2 <_Z10setAllLEDs5color+0xa>
 2f2:	00 d0       	rcall	.+0      	; 0x2f4 <_Z10setAllLEDs5color+0xc>
 2f4:	00 d0       	rcall	.+0      	; 0x2f6 <_Z10setAllLEDs5color+0xe>
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
 2fa:	49 83       	std	Y+1, r20	; 0x01
 2fc:	5a 83       	std	Y+2, r21	; 0x02
 2fe:	6b 83       	std	Y+3, r22	; 0x03
 300:	7c 83       	std	Y+4, r23	; 0x04
 302:	8d 83       	std	Y+5, r24	; 0x05
 304:	9e 83       	std	Y+6, r25	; 0x06
   int ndx;
   Serial.println(solid.r);   // print GS data to Serial window (BAUD =9600)
 306:	69 81       	ldd	r22, Y+1	; 0x01
 308:	7a 81       	ldd	r23, Y+2	; 0x02
 30a:	4a e0       	ldi	r20, 0x0A	; 10
 30c:	50 e0       	ldi	r21, 0x00	; 0
 30e:	87 e3       	ldi	r24, 0x37	; 55
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN5Print7printlnEji>
   Tlc.clear();      // clear TLC data
 316:	8d ed       	ldi	r24, 0xDD	; 221
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	0e 94 ce 04 	call	0x99c	; 0x99c <_ZN7Tlc59405clearEv>
   //   Tlc.setAll(r);     // set all TLC channel (15:0) to GS value
   
   for (ndx = 0; ndx < numLeds; ndx++)
 31e:	00 e0       	ldi	r16, 0x00	; 0
 320:	10 e0       	ldi	r17, 0x00	; 0
 322:	80 91 36 01 	lds	r24, 0x0136
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	08 17       	cp	r16, r24
 32a:	19 07       	cpc	r17, r25
 32c:	64 f4       	brge	.+24     	; 0x346 <_Z10setAllLEDs5color+0x5e>
      setLED(ndx, solid);
 32e:	29 81       	ldd	r18, Y+1	; 0x01
 330:	3a 81       	ldd	r19, Y+2	; 0x02
 332:	4b 81       	ldd	r20, Y+3	; 0x03
 334:	5c 81       	ldd	r21, Y+4	; 0x04
 336:	6d 81       	ldd	r22, Y+5	; 0x05
 338:	7e 81       	ldd	r23, Y+6	; 0x06
 33a:	c8 01       	movw	r24, r16
 33c:	0e 94 3f 01 	call	0x27e	; 0x27e <_Z6setLEDi5color>
   int ndx;
   Serial.println(solid.r);   // print GS data to Serial window (BAUD =9600)
   Tlc.clear();      // clear TLC data
   //   Tlc.setAll(r);     // set all TLC channel (15:0) to GS value
   
   for (ndx = 0; ndx < numLeds; ndx++)
 340:	0f 5f       	subi	r16, 0xFF	; 255
 342:	1f 4f       	sbci	r17, 0xFF	; 255
 344:	ee cf       	rjmp	.-36     	; 0x322 <_Z10setAllLEDs5color+0x3a>
      setLED(ndx, solid);
   
   Tlc.update();     // send GS data to TLC5940
 346:	8d ed       	ldi	r24, 0xDD	; 221
 348:	91 e0       	ldi	r25, 0x01	; 1
}
 34a:	26 96       	adiw	r28, 0x06	; 6
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	f8 94       	cli
 350:	de bf       	out	0x3e, r29	; 62
 352:	0f be       	out	0x3f, r0	; 63
 354:	cd bf       	out	0x3d, r28	; 61
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	1f 91       	pop	r17
 35c:	0f 91       	pop	r16
   //   Tlc.setAll(r);     // set all TLC channel (15:0) to GS value
   
   for (ndx = 0; ndx < numLeds; ndx++)
      setLED(ndx, solid);
   
   Tlc.update();     // send GS data to TLC5940
 35e:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <_ZN7Tlc59406updateEv>

00000362 <_Z10setAllLEDsiii>:


void setLED(int ledNum, color color);
void setAllLEDs(color solid);

void setAllLEDs(int r, int g, int b) {
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	00 d0       	rcall	.+0      	; 0x368 <_Z10setAllLEDsiii+0x6>
 368:	00 d0       	rcall	.+0      	; 0x36a <_Z10setAllLEDsiii+0x8>
 36a:	00 d0       	rcall	.+0      	; 0x36c <_Z10setAllLEDsiii+0xa>
 36c:	cd b7       	in	r28, 0x3d	; 61
 36e:	de b7       	in	r29, 0x3e	; 62
 370:	38 2f       	mov	r19, r24
 372:	84 2f       	mov	r24, r20
   color solid = {r, g, b};
 374:	43 2f       	mov	r20, r19
 376:	5e 83       	std	Y+6, r21	; 0x06
   
   setAllLEDs(solid);
 378:	59 2f       	mov	r21, r25
 37a:	9e 81       	ldd	r25, Y+6	; 0x06
 37c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <_Z10setAllLEDs5color>
}
 380:	26 96       	adiw	r28, 0x06	; 6
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	f8 94       	cli
 386:	de bf       	out	0x3e, r29	; 62
 388:	0f be       	out	0x3f, r0	; 63
 38a:	cd bf       	out	0x3d, r28	; 61
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <_Z7nextLEDv>:
   ambientColor.r = r;
   ambientColor.g = g;
   ambientColor.b = b;
}

void nextLED() {
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
   int ndx;
   
   if (currentLED < 0)
      currentLED = bottomLED; // Definitely subject to change, just a placeholder
   
   Serial.println(TOP_GS);
 396:	4a e0       	ldi	r20, 0x0A	; 10
 398:	50 e0       	ldi	r21, 0x00	; 0
 39a:	62 ee       	ldi	r22, 0xE2	; 226
 39c:	74 e0       	ldi	r23, 0x04	; 4
 39e:	87 e3       	ldi	r24, 0x37	; 55
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN5Print7printlnEii>
   Tlc.clear();
 3a6:	8d ed       	ldi	r24, 0xDD	; 221
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	0e 94 ce 04 	call	0x99c	; 0x99c <_ZN7Tlc59405clearEv>
//   Tlc.setAll(ambientColor);
   //setAllLEDs(ambientColor);
   
   for (ndx = 0; ndx < numLeds; ndx++) {
 3ae:	c0 e0       	ldi	r28, 0x00	; 0
 3b0:	d0 e0       	ldi	r29, 0x00	; 0
 3b2:	80 91 36 01 	lds	r24, 0x0136
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	c8 17       	cp	r28, r24
 3ba:	d9 07       	cpc	r29, r25
 3bc:	24 f5       	brge	.+72     	; 0x406 <_Z7nextLEDv+0x74>
      if (ndx == currentLED)
 3be:	80 91 08 01 	lds	r24, 0x0108
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	c8 17       	cp	r28, r24
 3c6:	d9 07       	cpc	r29, r25
 3c8:	69 f4       	brne	.+26     	; 0x3e4 <_Z7nextLEDv+0x52>
         setLED(ndx, rearLight);
 3ca:	20 91 02 01 	lds	r18, 0x0102
 3ce:	30 91 03 01 	lds	r19, 0x0103
 3d2:	40 91 04 01 	lds	r20, 0x0104
 3d6:	50 91 05 01 	lds	r21, 0x0105
 3da:	60 91 06 01 	lds	r22, 0x0106
 3de:	70 91 07 01 	lds	r23, 0x0107
 3e2:	0c c0       	rjmp	.+24     	; 0x3fc <_Z7nextLEDv+0x6a>
      else
         setLED(ndx, ambientColor);
 3e4:	20 91 30 01 	lds	r18, 0x0130
 3e8:	30 91 31 01 	lds	r19, 0x0131
 3ec:	40 91 32 01 	lds	r20, 0x0132
 3f0:	50 91 33 01 	lds	r21, 0x0133
 3f4:	60 91 34 01 	lds	r22, 0x0134
 3f8:	70 91 35 01 	lds	r23, 0x0135
 3fc:	ce 01       	movw	r24, r28
 3fe:	0e 94 3f 01 	call	0x27e	; 0x27e <_Z6setLEDi5color>
   Serial.println(TOP_GS);
   Tlc.clear();
//   Tlc.setAll(ambientColor);
   //setAllLEDs(ambientColor);
   
   for (ndx = 0; ndx < numLeds; ndx++) {
 402:	21 96       	adiw	r28, 0x01	; 1
 404:	d6 cf       	rjmp	.-84     	; 0x3b2 <_Z7nextLEDv+0x20>
         setLED(ndx, rearLight);
      else
         setLED(ndx, ambientColor);
   }
   
   Tlc.update();
 406:	8d ed       	ldi	r24, 0xDD	; 221
 408:	91 e0       	ldi	r25, 0x01	; 1
 40a:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <_ZN7Tlc59406updateEv>
   
   currentLED++;
 40e:	80 91 08 01 	lds	r24, 0x0108
 412:	8f 5f       	subi	r24, 0xFF	; 255
   currentLED %= numLeds;
 414:	60 91 36 01 	lds	r22, 0x0136
 418:	0e 94 22 06 	call	0xc44	; 0xc44 <__udivmodqi4>
 41c:	90 93 08 01 	sts	0x0108, r25
}
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	08 95       	ret

00000426 <_GLOBAL__sub_I_bottomLED>:

uint8_t bottomLED = -1;
uint8_t currentLED = -1;

static uint8_t numColorChannels = R_ENABLE + G_ENABLE + B_ENABLE;
static uint8_t numLeds = NUM_LED_CHANNELS / numColorChannels;
 426:	85 e0       	ldi	r24, 0x05	; 5
 428:	80 93 36 01 	sts	0x0136, r24
 42c:	08 95       	ret

0000042e <_Z8initGPIOv>:
#include "tmr_int_util.h"

// sets up the inputs, outputs and internal pull-ups 
void initGPIO(){
	// all hall effect sensors are outputs
	DDRB |= (1<<HALLEFFECT1);
 42e:	20 9a       	sbi	0x04, 0	; 4
	DDRD |= (1<<HALLEFFECT2);
 430:	57 9a       	sbi	0x0a, 7	; 10
	DDRC |= (1<<HALLEFFECT3);
 432:	38 9a       	sbi	0x07, 0	; 7
	
	// turn on internal pull-up for hall effects
	PORTB |= (1<<HALLEFFECT1);
 434:	28 9a       	sbi	0x05, 0	; 5
	PORTD |= (1<<HALLEFFECT2);
 436:	5f 9a       	sbi	0x0b, 7	; 11
	PORTC |= (1<<HALLEFFECT3);
 438:	40 9a       	sbi	0x08, 0	; 8
 43a:	08 95       	ret

0000043c <_Z10initTimersv>:
// sets up the timers
void initTimers(){
	// timer1 and timer2 are used in SparkFun library
	
	// timer0 (8bit) 0->255
	TCCR0A = 0x02;		// set timer to CTC mode
 43c:	82 e0       	ldi	r24, 0x02	; 2
 43e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x02;		// set pre-scaler to 8
 440:	85 bd       	out	0x25, r24	; 37
	OCR0A = OCR0A_OVR;	// overflow value 
 442:	98 ec       	ldi	r25, 0xC8	; 200
 444:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;		// timer mask interrupt on OCR0A overflow
 446:	80 93 6e 00 	sts	0x006E, r24
	TIFR0 = 0x02;		// set overflow to OCR0A value
 44a:	85 bb       	out	0x15, r24	; 21
 44c:	08 95       	ret

0000044e <_Z9initPCINTv>:
}

// sets up all three PCINT vectors for each halleffect sensor
void initPCINT(){
	cli();		// clear interrupts
 44e:	f8 94       	cli
	
	// enable PCINT (2:0)
	PCICR = 0b00000111;
 450:	87 e0       	ldi	r24, 0x07	; 7
 452:	80 93 68 00 	sts	0x0068, r24
	
	// PCINT0 -> D8 (halleffect sensor 1)
	PCMSK0 = (1<<PCINT0);
 456:	91 e0       	ldi	r25, 0x01	; 1
 458:	90 93 6b 00 	sts	0x006B, r25
	
	// PCINT1 -> D7 (halleffect sensor 2)
	PCMSK1 = (1<<PCINT23);
 45c:	20 e8       	ldi	r18, 0x80	; 128
 45e:	20 93 6c 00 	sts	0x006C, r18
	
	// PCINT2 -> A0 (halleffect sensor 3)
	PCMSK2 = (1<<PCINT8);
 462:	90 93 6d 00 	sts	0x006D, r25
	
	// set the PCINT flag register for all 3 PCINTs
	PCIFR = 0b00000111;
 466:	8b bb       	out	0x1b, r24	; 27
 468:	08 95       	ret

0000046a <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 46a:	1f 92       	push	r1
 46c:	0f 92       	push	r0
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	0f 92       	push	r0
 472:	11 24       	eor	r1, r1
 474:	2f 93       	push	r18
 476:	8f 93       	push	r24
 478:	9f 93       	push	r25
 47a:	ef 93       	push	r30
 47c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 47e:	e0 91 47 01 	lds	r30, 0x0147
 482:	f0 91 48 01 	lds	r31, 0x0148
 486:	80 81       	ld	r24, Z
 488:	e0 91 4d 01 	lds	r30, 0x014D
 48c:	f0 91 4e 01 	lds	r31, 0x014E
 490:	82 fd       	sbrc	r24, 2
 492:	12 c0       	rjmp	.+36     	; 0x4b8 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 494:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 496:	80 91 50 01 	lds	r24, 0x0150
 49a:	8f 5f       	subi	r24, 0xFF	; 255
 49c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 49e:	20 91 51 01 	lds	r18, 0x0151
 4a2:	82 17       	cp	r24, r18
 4a4:	51 f0       	breq	.+20     	; 0x4ba <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 4a6:	e0 91 50 01 	lds	r30, 0x0150
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	e9 5c       	subi	r30, 0xC9	; 201
 4ae:	fe 4f       	sbci	r31, 0xFE	; 254
 4b0:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 4b2:	80 93 50 01 	sts	0x0150, r24
 4b6:	01 c0       	rjmp	.+2      	; 0x4ba <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 4b8:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 4ba:	ff 91       	pop	r31
 4bc:	ef 91       	pop	r30
 4be:	9f 91       	pop	r25
 4c0:	8f 91       	pop	r24
 4c2:	2f 91       	pop	r18
 4c4:	0f 90       	pop	r0
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	0f 90       	pop	r0
 4ca:	1f 90       	pop	r1
 4cc:	18 95       	reti

000004ce <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 4ce:	1f 92       	push	r1
 4d0:	0f 92       	push	r0
 4d2:	0f b6       	in	r0, 0x3f	; 63
 4d4:	0f 92       	push	r0
 4d6:	11 24       	eor	r1, r1
 4d8:	2f 93       	push	r18
 4da:	3f 93       	push	r19
 4dc:	4f 93       	push	r20
 4de:	5f 93       	push	r21
 4e0:	6f 93       	push	r22
 4e2:	7f 93       	push	r23
 4e4:	8f 93       	push	r24
 4e6:	9f 93       	push	r25
 4e8:	af 93       	push	r26
 4ea:	bf 93       	push	r27
 4ec:	ef 93       	push	r30
 4ee:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 4f0:	87 e3       	ldi	r24, 0x37	; 55
 4f2:	91 e0       	ldi	r25, 0x01	; 1
 4f4:	0e 94 98 05 	call	0xb30	; 0xb30 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 4f8:	ff 91       	pop	r31
 4fa:	ef 91       	pop	r30
 4fc:	bf 91       	pop	r27
 4fe:	af 91       	pop	r26
 500:	9f 91       	pop	r25
 502:	8f 91       	pop	r24
 504:	7f 91       	pop	r23
 506:	6f 91       	pop	r22
 508:	5f 91       	pop	r21
 50a:	4f 91       	pop	r20
 50c:	3f 91       	pop	r19
 50e:	2f 91       	pop	r18
 510:	0f 90       	pop	r0
 512:	0f be       	out	0x3f, r0	; 63
 514:	0f 90       	pop	r0
 516:	1f 90       	pop	r1
 518:	18 95       	reti

0000051a <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 51a:	e7 e3       	ldi	r30, 0x37	; 55
 51c:	f1 e0       	ldi	r31, 0x01	; 1
 51e:	13 82       	std	Z+3, r1	; 0x03
 520:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 522:	88 ee       	ldi	r24, 0xE8	; 232
 524:	93 e0       	ldi	r25, 0x03	; 3
 526:	a0 e0       	ldi	r26, 0x00	; 0
 528:	b0 e0       	ldi	r27, 0x00	; 0
 52a:	84 83       	std	Z+4, r24	; 0x04
 52c:	95 83       	std	Z+5, r25	; 0x05
 52e:	a6 83       	std	Z+6, r26	; 0x06
 530:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 532:	8f e1       	ldi	r24, 0x1F	; 31
 534:	91 e0       	ldi	r25, 0x01	; 1
 536:	91 83       	std	Z+1, r25	; 0x01
 538:	80 83       	st	Z, r24
 53a:	85 ec       	ldi	r24, 0xC5	; 197
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	95 87       	std	Z+13, r25	; 0x0d
 540:	84 87       	std	Z+12, r24	; 0x0c
 542:	84 ec       	ldi	r24, 0xC4	; 196
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	97 87       	std	Z+15, r25	; 0x0f
 548:	86 87       	std	Z+14, r24	; 0x0e
 54a:	80 ec       	ldi	r24, 0xC0	; 192
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	91 8b       	std	Z+17, r25	; 0x11
 550:	80 8b       	std	Z+16, r24	; 0x10
 552:	81 ec       	ldi	r24, 0xC1	; 193
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	93 8b       	std	Z+19, r25	; 0x13
 558:	82 8b       	std	Z+18, r24	; 0x12
 55a:	82 ec       	ldi	r24, 0xC2	; 194
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	95 8b       	std	Z+21, r25	; 0x15
 560:	84 8b       	std	Z+20, r24	; 0x14
 562:	86 ec       	ldi	r24, 0xC6	; 198
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	97 8b       	std	Z+23, r25	; 0x17
 568:	86 8b       	std	Z+22, r24	; 0x16
 56a:	11 8e       	std	Z+25, r1	; 0x19
 56c:	12 8e       	std	Z+26, r1	; 0x1a
 56e:	13 8e       	std	Z+27, r1	; 0x1b
 570:	14 8e       	std	Z+28, r1	; 0x1c
 572:	08 95       	ret

00000574 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 574:	cf 92       	push	r12
 576:	df 92       	push	r13
 578:	ef 92       	push	r14
 57a:	ff 92       	push	r15
 57c:	0f 93       	push	r16
 57e:	1f 93       	push	r17
 580:	cf 93       	push	r28
 582:	df 93       	push	r29
 584:	6c 01       	movw	r12, r24
 586:	eb 01       	movw	r28, r22
 588:	7b 01       	movw	r14, r22
 58a:	e4 0e       	add	r14, r20
 58c:	f5 1e       	adc	r15, r21
  size_t n = 0;
 58e:	00 e0       	ldi	r16, 0x00	; 0
 590:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
 592:	ce 15       	cp	r28, r14
 594:	df 05       	cpc	r29, r15
 596:	61 f0       	breq	.+24     	; 0x5b0 <_ZN5Print5writeEPKhj+0x3c>
    n += write(*buffer++);
 598:	69 91       	ld	r22, Y+
 59a:	d6 01       	movw	r26, r12
 59c:	ed 91       	ld	r30, X+
 59e:	fc 91       	ld	r31, X
 5a0:	01 90       	ld	r0, Z+
 5a2:	f0 81       	ld	r31, Z
 5a4:	e0 2d       	mov	r30, r0
 5a6:	c6 01       	movw	r24, r12
 5a8:	09 95       	icall
 5aa:	08 0f       	add	r16, r24
 5ac:	19 1f       	adc	r17, r25
 5ae:	f1 cf       	rjmp	.-30     	; 0x592 <_ZN5Print5writeEPKhj+0x1e>
  }
  return n;
}
 5b0:	c8 01       	movw	r24, r16
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	1f 91       	pop	r17
 5b8:	0f 91       	pop	r16
 5ba:	ff 90       	pop	r15
 5bc:	ef 90       	pop	r14
 5be:	df 90       	pop	r13
 5c0:	cf 90       	pop	r12
 5c2:	08 95       	ret

000005c4 <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 5c4:	61 15       	cp	r22, r1
 5c6:	71 05       	cpc	r23, r1
 5c8:	79 f0       	breq	.+30     	; 0x5e8 <_ZN5Print5writeEPKc+0x24>
      return write((const uint8_t *)str, strlen(str));
 5ca:	fb 01       	movw	r30, r22
 5cc:	01 90       	ld	r0, Z+
 5ce:	00 20       	and	r0, r0
 5d0:	e9 f7       	brne	.-6      	; 0x5cc <_ZN5Print5writeEPKc+0x8>
 5d2:	31 97       	sbiw	r30, 0x01	; 1
 5d4:	af 01       	movw	r20, r30
 5d6:	46 1b       	sub	r20, r22
 5d8:	57 0b       	sbc	r21, r23
 5da:	dc 01       	movw	r26, r24
 5dc:	ed 91       	ld	r30, X+
 5de:	fc 91       	ld	r31, X
 5e0:	02 80       	ldd	r0, Z+2	; 0x02
 5e2:	f3 81       	ldd	r31, Z+3	; 0x03
 5e4:	e0 2d       	mov	r30, r0
 5e6:	09 94       	ijmp
    }
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	08 95       	ret

000005ee <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 5ee:	dc 01       	movw	r26, r24
 5f0:	ed 91       	ld	r30, X+
 5f2:	fc 91       	ld	r31, X
 5f4:	01 90       	ld	r0, Z+
 5f6:	f0 81       	ld	r31, Z
 5f8:	e0 2d       	mov	r30, r0
 5fa:	09 94       	ijmp

000005fc <_ZN5Print7printlnEv>:
  return x.printTo(*this);
}

size_t Print::println(void)
{
  return write("\r\n");
 5fc:	6a e0       	ldi	r22, 0x0A	; 10
 5fe:	71 e0       	ldi	r23, 0x01	; 1
 600:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <_ZN5Print5writeEPKc>

00000604 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 604:	8f 92       	push	r8
 606:	9f 92       	push	r9
 608:	af 92       	push	r10
 60a:	bf 92       	push	r11
 60c:	cf 92       	push	r12
 60e:	df 92       	push	r13
 610:	ef 92       	push	r14
 612:	ff 92       	push	r15
 614:	0f 93       	push	r16
 616:	1f 93       	push	r17
 618:	cf 93       	push	r28
 61a:	df 93       	push	r29
 61c:	cd b7       	in	r28, 0x3d	; 61
 61e:	de b7       	in	r29, 0x3e	; 62
 620:	a1 97       	sbiw	r28, 0x21	; 33
 622:	0f b6       	in	r0, 0x3f	; 63
 624:	f8 94       	cli
 626:	de bf       	out	0x3e, r29	; 62
 628:	0f be       	out	0x3f, r0	; 63
 62a:	cd bf       	out	0x3d, r28	; 61
 62c:	6c 01       	movw	r12, r24
 62e:	14 2f       	mov	r17, r20
 630:	e5 2f       	mov	r30, r21
 632:	cb 01       	movw	r24, r22
 634:	02 2f       	mov	r16, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 636:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 638:	22 30       	cpi	r18, 0x02	; 2
 63a:	08 f4       	brcc	.+2      	; 0x63e <_ZN5Print11printNumberEmh+0x3a>
 63c:	0a e0       	ldi	r16, 0x0A	; 10
 63e:	7e 01       	movw	r14, r28
 640:	21 e2       	ldi	r18, 0x21	; 33
 642:	e2 0e       	add	r14, r18
 644:	f1 1c       	adc	r15, r1

  do {
    unsigned long m = n;
    n /= base;
 646:	80 2e       	mov	r8, r16
 648:	91 2c       	mov	r9, r1
 64a:	a1 2c       	mov	r10, r1
 64c:	b1 2c       	mov	r11, r1
 64e:	61 2f       	mov	r22, r17
 650:	7e 2f       	mov	r23, r30
 652:	a5 01       	movw	r20, r10
 654:	94 01       	movw	r18, r8
 656:	0e 94 42 06 	call	0xc84	; 0xc84 <__udivmodsi4>
    char c = m - base * n;
 65a:	02 9f       	mul	r16, r18
 65c:	10 19       	sub	r17, r0
 65e:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	e8 1a       	sub	r14, r24
 664:	f1 08       	sbc	r15, r1
 666:	1a 30       	cpi	r17, 0x0A	; 10
 668:	10 f4       	brcc	.+4      	; 0x66e <_ZN5Print11printNumberEmh+0x6a>
 66a:	10 5d       	subi	r17, 0xD0	; 208
 66c:	01 c0       	rjmp	.+2      	; 0x670 <_ZN5Print11printNumberEmh+0x6c>
 66e:	19 5c       	subi	r17, 0xC9	; 201
 670:	f7 01       	movw	r30, r14
 672:	10 83       	st	Z, r17
 674:	12 2f       	mov	r17, r18
 676:	e3 2f       	mov	r30, r19
 678:	ca 01       	movw	r24, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 67a:	23 2b       	or	r18, r19
 67c:	24 2b       	or	r18, r20
 67e:	25 2b       	or	r18, r21
 680:	31 f7       	brne	.-52     	; 0x64e <_ZN5Print11printNumberEmh+0x4a>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 682:	b7 01       	movw	r22, r14
 684:	c6 01       	movw	r24, r12
 686:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN5Print5writeEPKc>
}
 68a:	a1 96       	adiw	r28, 0x21	; 33
 68c:	0f b6       	in	r0, 0x3f	; 63
 68e:	f8 94       	cli
 690:	de bf       	out	0x3e, r29	; 62
 692:	0f be       	out	0x3f, r0	; 63
 694:	cd bf       	out	0x3d, r28	; 61
 696:	df 91       	pop	r29
 698:	cf 91       	pop	r28
 69a:	1f 91       	pop	r17
 69c:	0f 91       	pop	r16
 69e:	ff 90       	pop	r15
 6a0:	ef 90       	pop	r14
 6a2:	df 90       	pop	r13
 6a4:	cf 90       	pop	r12
 6a6:	bf 90       	pop	r11
 6a8:	af 90       	pop	r10
 6aa:	9f 90       	pop	r9
 6ac:	8f 90       	pop	r8
 6ae:	08 95       	ret

000006b0 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 6b0:	cf 92       	push	r12
 6b2:	df 92       	push	r13
 6b4:	ef 92       	push	r14
 6b6:	ff 92       	push	r15
 6b8:	0f 93       	push	r16
 6ba:	1f 93       	push	r17
 6bc:	cf 93       	push	r28
 6be:	df 93       	push	r29
 6c0:	ec 01       	movw	r28, r24
 6c2:	6a 01       	movw	r12, r20
 6c4:	7b 01       	movw	r14, r22
  if (base == 0) {
 6c6:	21 15       	cp	r18, r1
 6c8:	31 05       	cpc	r19, r1
 6ca:	79 f4       	brne	.+30     	; 0x6ea <_ZN5Print5printEli+0x3a>
    return write(n);
 6cc:	e8 81       	ld	r30, Y
 6ce:	f9 81       	ldd	r31, Y+1	; 0x01
 6d0:	01 90       	ld	r0, Z+
 6d2:	f0 81       	ld	r31, Z
 6d4:	e0 2d       	mov	r30, r0
 6d6:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 6d8:	df 91       	pop	r29
 6da:	cf 91       	pop	r28
 6dc:	1f 91       	pop	r17
 6de:	0f 91       	pop	r16
 6e0:	ff 90       	pop	r15
 6e2:	ef 90       	pop	r14
 6e4:	df 90       	pop	r13
 6e6:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 6e8:	09 94       	ijmp
  } else if (base == 10) {
 6ea:	2a 30       	cpi	r18, 0x0A	; 10
 6ec:	31 05       	cpc	r19, r1
 6ee:	e9 f4       	brne	.+58     	; 0x72a <_ZN5Print5printEli+0x7a>
    if (n < 0) {
 6f0:	77 ff       	sbrs	r23, 7
 6f2:	1a c0       	rjmp	.+52     	; 0x728 <_ZN5Print5printEli+0x78>
      int t = print('-');
 6f4:	6d e2       	ldi	r22, 0x2D	; 45
 6f6:	0e 94 f7 02 	call	0x5ee	; 0x5ee <_ZN5Print5printEc>
 6fa:	8c 01       	movw	r16, r24
      n = -n;
 6fc:	44 27       	eor	r20, r20
 6fe:	55 27       	eor	r21, r21
 700:	ba 01       	movw	r22, r20
 702:	4c 19       	sub	r20, r12
 704:	5d 09       	sbc	r21, r13
 706:	6e 09       	sbc	r22, r14
 708:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
 70a:	2a e0       	ldi	r18, 0x0A	; 10
 70c:	ce 01       	movw	r24, r28
 70e:	0e 94 02 03 	call	0x604	; 0x604 <_ZN5Print11printNumberEmh>
 712:	80 0f       	add	r24, r16
 714:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 716:	df 91       	pop	r29
 718:	cf 91       	pop	r28
 71a:	1f 91       	pop	r17
 71c:	0f 91       	pop	r16
 71e:	ff 90       	pop	r15
 720:	ef 90       	pop	r14
 722:	df 90       	pop	r13
 724:	cf 90       	pop	r12
 726:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
 728:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
 72a:	b7 01       	movw	r22, r14
 72c:	a6 01       	movw	r20, r12
 72e:	ce 01       	movw	r24, r28
  }
}
 730:	df 91       	pop	r29
 732:	cf 91       	pop	r28
 734:	1f 91       	pop	r17
 736:	0f 91       	pop	r16
 738:	ff 90       	pop	r15
 73a:	ef 90       	pop	r14
 73c:	df 90       	pop	r13
 73e:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 740:	0c 94 02 03 	jmp	0x604	; 0x604 <_ZN5Print11printNumberEmh>

00000744 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 744:	0f 93       	push	r16
 746:	1f 93       	push	r17
 748:	cf 93       	push	r28
 74a:	df 93       	push	r29
 74c:	ec 01       	movw	r28, r24
 74e:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 750:	ab 01       	movw	r20, r22
 752:	77 0f       	add	r23, r23
 754:	66 0b       	sbc	r22, r22
 756:	77 0b       	sbc	r23, r23
 758:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_ZN5Print5printEli>
 75c:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 75e:	ce 01       	movw	r24, r28
 760:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_ZN5Print7printlnEv>
  return n;
}
 764:	80 0f       	add	r24, r16
 766:	91 1f       	adc	r25, r17
 768:	df 91       	pop	r29
 76a:	cf 91       	pop	r28
 76c:	1f 91       	pop	r17
 76e:	0f 91       	pop	r16
 770:	08 95       	ret

00000772 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 772:	21 15       	cp	r18, r1
 774:	31 05       	cpc	r19, r1
 776:	41 f4       	brne	.+16     	; 0x788 <_ZN5Print5printEmi+0x16>
 778:	dc 01       	movw	r26, r24
 77a:	ed 91       	ld	r30, X+
 77c:	fc 91       	ld	r31, X
 77e:	01 90       	ld	r0, Z+
 780:	f0 81       	ld	r31, Z
 782:	e0 2d       	mov	r30, r0
 784:	64 2f       	mov	r22, r20
 786:	09 94       	ijmp
  else return printNumber(n, base);
 788:	0c 94 02 03 	jmp	0x604	; 0x604 <_ZN5Print11printNumberEmh>

0000078c <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
 78c:	0f 93       	push	r16
 78e:	1f 93       	push	r17
 790:	cf 93       	push	r28
 792:	df 93       	push	r29
 794:	ec 01       	movw	r28, r24
 796:	9a 01       	movw	r18, r20
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
 798:	ab 01       	movw	r20, r22
 79a:	60 e0       	ldi	r22, 0x00	; 0
 79c:	70 e0       	ldi	r23, 0x00	; 0
 79e:	0e 94 b9 03 	call	0x772	; 0x772 <_ZN5Print5printEmi>
 7a2:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
 7a4:	ce 01       	movw	r24, r28
 7a6:	0e 94 fe 02 	call	0x5fc	; 0x5fc <_ZN5Print7printlnEv>
  return n;
}
 7aa:	80 0f       	add	r24, r16
 7ac:	91 1f       	adc	r25, r17
 7ae:	df 91       	pop	r29
 7b0:	cf 91       	pop	r28
 7b2:	1f 91       	pop	r17
 7b4:	0f 91       	pop	r16
 7b6:	08 95       	ret

000007b8 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 7b8:	1f 92       	push	r1
 7ba:	0f 92       	push	r0
 7bc:	0f b6       	in	r0, 0x3f	; 63
 7be:	0f 92       	push	r0
 7c0:	11 24       	eor	r1, r1
 7c2:	2f 93       	push	r18
 7c4:	3f 93       	push	r19
 7c6:	8f 93       	push	r24
 7c8:	9f 93       	push	r25
 7ca:	af 93       	push	r26
 7cc:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 7ce:	80 91 d5 01 	lds	r24, 0x01D5
 7d2:	90 91 d6 01 	lds	r25, 0x01D6
 7d6:	a0 91 d7 01 	lds	r26, 0x01D7
 7da:	b0 91 d8 01 	lds	r27, 0x01D8
	unsigned char f = timer0_fract;
 7de:	30 91 d4 01 	lds	r19, 0x01D4

	m += MILLIS_INC;
	f += FRACT_INC;
 7e2:	23 e0       	ldi	r18, 0x03	; 3
 7e4:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 7e6:	2d 37       	cpi	r18, 0x7D	; 125
 7e8:	20 f4       	brcc	.+8      	; 0x7f2 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 7ea:	01 96       	adiw	r24, 0x01	; 1
 7ec:	a1 1d       	adc	r26, r1
 7ee:	b1 1d       	adc	r27, r1
 7f0:	05 c0       	rjmp	.+10     	; 0x7fc <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 7f2:	26 e8       	ldi	r18, 0x86	; 134
 7f4:	23 0f       	add	r18, r19
		m += 1;
 7f6:	02 96       	adiw	r24, 0x02	; 2
 7f8:	a1 1d       	adc	r26, r1
 7fa:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 7fc:	20 93 d4 01 	sts	0x01D4, r18
	timer0_millis = m;
 800:	80 93 d5 01 	sts	0x01D5, r24
 804:	90 93 d6 01 	sts	0x01D6, r25
 808:	a0 93 d7 01 	sts	0x01D7, r26
 80c:	b0 93 d8 01 	sts	0x01D8, r27
	timer0_overflow_count++;
 810:	80 91 d9 01 	lds	r24, 0x01D9
 814:	90 91 da 01 	lds	r25, 0x01DA
 818:	a0 91 db 01 	lds	r26, 0x01DB
 81c:	b0 91 dc 01 	lds	r27, 0x01DC
 820:	01 96       	adiw	r24, 0x01	; 1
 822:	a1 1d       	adc	r26, r1
 824:	b1 1d       	adc	r27, r1
 826:	80 93 d9 01 	sts	0x01D9, r24
 82a:	90 93 da 01 	sts	0x01DA, r25
 82e:	a0 93 db 01 	sts	0x01DB, r26
 832:	b0 93 dc 01 	sts	0x01DC, r27
}
 836:	bf 91       	pop	r27
 838:	af 91       	pop	r26
 83a:	9f 91       	pop	r25
 83c:	8f 91       	pop	r24
 83e:	3f 91       	pop	r19
 840:	2f 91       	pop	r18
 842:	0f 90       	pop	r0
 844:	0f be       	out	0x3f, r0	; 63
 846:	0f 90       	pop	r0
 848:	1f 90       	pop	r1
 84a:	18 95       	reti

0000084c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 84c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 84e:	84 b5       	in	r24, 0x24	; 36
 850:	82 60       	ori	r24, 0x02	; 2
 852:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 854:	84 b5       	in	r24, 0x24	; 36
 856:	81 60       	ori	r24, 0x01	; 1
 858:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 85a:	85 b5       	in	r24, 0x25	; 37
 85c:	82 60       	ori	r24, 0x02	; 2
 85e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 860:	85 b5       	in	r24, 0x25	; 37
 862:	81 60       	ori	r24, 0x01	; 1
 864:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 866:	ee e6       	ldi	r30, 0x6E	; 110
 868:	f0 e0       	ldi	r31, 0x00	; 0
 86a:	80 81       	ld	r24, Z
 86c:	81 60       	ori	r24, 0x01	; 1
 86e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 870:	e1 e8       	ldi	r30, 0x81	; 129
 872:	f0 e0       	ldi	r31, 0x00	; 0
 874:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 876:	80 81       	ld	r24, Z
 878:	82 60       	ori	r24, 0x02	; 2
 87a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 87c:	80 81       	ld	r24, Z
 87e:	81 60       	ori	r24, 0x01	; 1
 880:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 882:	e0 e8       	ldi	r30, 0x80	; 128
 884:	f0 e0       	ldi	r31, 0x00	; 0
 886:	80 81       	ld	r24, Z
 888:	81 60       	ori	r24, 0x01	; 1
 88a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 88c:	e1 eb       	ldi	r30, 0xB1	; 177
 88e:	f0 e0       	ldi	r31, 0x00	; 0
 890:	80 81       	ld	r24, Z
 892:	84 60       	ori	r24, 0x04	; 4
 894:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 896:	e0 eb       	ldi	r30, 0xB0	; 176
 898:	f0 e0       	ldi	r31, 0x00	; 0
 89a:	80 81       	ld	r24, Z
 89c:	81 60       	ori	r24, 0x01	; 1
 89e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 8a0:	ea e7       	ldi	r30, 0x7A	; 122
 8a2:	f0 e0       	ldi	r31, 0x00	; 0
 8a4:	80 81       	ld	r24, Z
 8a6:	84 60       	ori	r24, 0x04	; 4
 8a8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 8aa:	80 81       	ld	r24, Z
 8ac:	82 60       	ori	r24, 0x02	; 2
 8ae:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 8b0:	80 81       	ld	r24, Z
 8b2:	81 60       	ori	r24, 0x01	; 1
 8b4:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 8b6:	80 81       	ld	r24, Z
 8b8:	80 68       	ori	r24, 0x80	; 128
 8ba:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 8bc:	10 92 c1 00 	sts	0x00C1, r1
 8c0:	08 95       	ret

000008c2 <__vector_13>:
/** Don't add an extra SCLK pulse after switching from dot-correction mode. */
static uint8_t firstGSInput;

/** Interrupt called after an XLAT pulse to prevent more XLAT pulses. */
ISR(TIMER1_OVF_vect)
{
 8c2:	1f 92       	push	r1
 8c4:	0f 92       	push	r0
 8c6:	0f b6       	in	r0, 0x3f	; 63
 8c8:	0f 92       	push	r0
 8ca:	11 24       	eor	r1, r1
 8cc:	2f 93       	push	r18
 8ce:	3f 93       	push	r19
 8d0:	4f 93       	push	r20
 8d2:	5f 93       	push	r21
 8d4:	6f 93       	push	r22
 8d6:	7f 93       	push	r23
 8d8:	8f 93       	push	r24
 8da:	9f 93       	push	r25
 8dc:	af 93       	push	r26
 8de:	bf 93       	push	r27
 8e0:	ef 93       	push	r30
 8e2:	ff 93       	push	r31
    disable_XLAT_pulses();
 8e4:	80 e2       	ldi	r24, 0x20	; 32
 8e6:	80 93 80 00 	sts	0x0080, r24
    clear_XLAT_interrupt();
 8ea:	10 92 6f 00 	sts	0x006F, r1
    tlc_needXLAT = 0;
 8ee:	10 92 f9 01 	sts	0x01F9, r1
    if (tlc_onUpdateFinished) {
 8f2:	80 91 f7 01 	lds	r24, 0x01F7
 8f6:	90 91 f8 01 	lds	r25, 0x01F8
 8fa:	89 2b       	or	r24, r25
 8fc:	31 f0       	breq	.+12     	; 0x90a <__stack+0xb>
        sei();
 8fe:	78 94       	sei
        tlc_onUpdateFinished();
 900:	e0 91 f7 01 	lds	r30, 0x01F7
 904:	f0 91 f8 01 	lds	r31, 0x01F8
 908:	09 95       	icall
    }
}
 90a:	ff 91       	pop	r31
 90c:	ef 91       	pop	r30
 90e:	bf 91       	pop	r27
 910:	af 91       	pop	r26
 912:	9f 91       	pop	r25
 914:	8f 91       	pop	r24
 916:	7f 91       	pop	r23
 918:	6f 91       	pop	r22
 91a:	5f 91       	pop	r21
 91c:	4f 91       	pop	r20
 91e:	3f 91       	pop	r19
 920:	2f 91       	pop	r18
 922:	0f 90       	pop	r0
 924:	0f be       	out	0x3f, r0	; 63
 926:	0f 90       	pop	r0
 928:	1f 90       	pop	r1
 92a:	18 95       	reti

0000092c <_ZN7Tlc59403setEhj>:
           channel 0, OUT0 of the next TLC is channel 16, etc.
    \param value (0-4095).  The grayscale value, 4095 is maximum.
    \see get */
void Tlc5940::set(TLC_CHANNEL_TYPE channel, uint16_t value)
{
    TLC_CHANNEL_TYPE index8 = (NUM_TLCS * 16 - 1) - channel;
 92c:	8f e0       	ldi	r24, 0x0F	; 15
 92e:	86 1b       	sub	r24, r22
    uint8_t *index12p = tlc_GSData + ((((uint16_t)index8) * 3) >> 1);
 930:	93 e0       	ldi	r25, 0x03	; 3
 932:	89 9f       	mul	r24, r25
 934:	f0 01       	movw	r30, r0
 936:	11 24       	eor	r1, r1
 938:	f6 95       	lsr	r31
 93a:	e7 95       	ror	r30
 93c:	e1 52       	subi	r30, 0x21	; 33
 93e:	fe 4f       	sbci	r31, 0xFE	; 254
    if (index8 & 1) { // starts in the middle
 940:	80 ff       	sbrs	r24, 0
 942:	05 c0       	rjmp	.+10     	; 0x94e <_ZN7Tlc59403setEhj+0x22>
                      // first 4 bits intact | 4 top bits of value
        *index12p = (*index12p & 0xF0) | (value >> 8);
 944:	80 81       	ld	r24, Z
 946:	80 7f       	andi	r24, 0xF0	; 240
 948:	85 2b       	or	r24, r21
 94a:	80 83       	st	Z, r24
 94c:	0c c0       	rjmp	.+24     	; 0x966 <_ZN7Tlc59403setEhj+0x3a>
                      // 8 lower bits of value
        *(++index12p) = value & 0xFF;
    } else { // starts clean
                      // 8 upper bits of value
        *(index12p++) = value >> 4;
 94e:	ca 01       	movw	r24, r20
 950:	24 e0       	ldi	r18, 0x04	; 4
 952:	96 95       	lsr	r25
 954:	87 95       	ror	r24
 956:	2a 95       	dec	r18
 958:	e1 f7       	brne	.-8      	; 0x952 <_ZN7Tlc59403setEhj+0x26>
 95a:	80 83       	st	Z, r24
                      // 4 lower bits of value | last 4 bits intact
        *index12p = ((uint8_t)(value << 4)) | (*index12p & 0xF);
 95c:	81 81       	ldd	r24, Z+1	; 0x01
 95e:	8f 70       	andi	r24, 0x0F	; 15
 960:	42 95       	swap	r20
 962:	40 7f       	andi	r20, 0xF0	; 240
 964:	48 2b       	or	r20, r24
 966:	41 83       	std	Z+1, r20	; 0x01
 968:	08 95       	ret

0000096a <_ZN7Tlc59406setAllEj>:

/** Sets all channels to value.
    \param value grayscale value (0 - 4095) */
void Tlc5940::setAll(uint16_t value)
{
    uint8_t firstByte = value >> 4;
 96a:	cb 01       	movw	r24, r22
 96c:	24 e0       	ldi	r18, 0x04	; 4
 96e:	96 95       	lsr	r25
 970:	87 95       	ror	r24
 972:	2a 95       	dec	r18
 974:	e1 f7       	brne	.-8      	; 0x96e <_ZN7Tlc59406setAllEj+0x4>
 976:	98 2f       	mov	r25, r24
    uint8_t secondByte = (value << 4) | (value >> 8);
 978:	26 2f       	mov	r18, r22
 97a:	86 2f       	mov	r24, r22
 97c:	82 95       	swap	r24
 97e:	80 7f       	andi	r24, 0xF0	; 240
 980:	87 2b       	or	r24, r23
    uint8_t *p = tlc_GSData;
 982:	ef ed       	ldi	r30, 0xDF	; 223
 984:	f1 e0       	ldi	r31, 0x01	; 1
    while (p < tlc_GSData + NUM_TLCS * 24) {
        *p++ = firstByte;
 986:	90 83       	st	Z, r25
        *p++ = secondByte;
 988:	81 83       	std	Z+1, r24	; 0x01
 98a:	33 96       	adiw	r30, 0x03	; 3
 98c:	df 01       	movw	r26, r30
 98e:	11 97       	sbiw	r26, 0x01	; 1
        *p++ = (uint8_t)value;
 990:	2c 93       	st	X, r18
void Tlc5940::setAll(uint16_t value)
{
    uint8_t firstByte = value >> 4;
    uint8_t secondByte = (value << 4) | (value >> 8);
    uint8_t *p = tlc_GSData;
    while (p < tlc_GSData + NUM_TLCS * 24) {
 992:	31 e0       	ldi	r19, 0x01	; 1
 994:	e7 3f       	cpi	r30, 0xF7	; 247
 996:	f3 07       	cpc	r31, r19
 998:	b0 f3       	brcs	.-20     	; 0x986 <_ZN7Tlc59406setAllEj+0x1c>
        *p++ = firstByte;
        *p++ = secondByte;
        *p++ = (uint8_t)value;
    }
}
 99a:	08 95       	ret

0000099c <_ZN7Tlc59405clearEv>:
/** Clears the grayscale data array, #tlc_GSData, but does not shift in any
    data.  This call should be followed by update() if you are turning off
    all the outputs. */
void Tlc5940::clear(void)
{
    setAll(0);
 99c:	60 e0       	ldi	r22, 0x00	; 0
 99e:	70 e0       	ldi	r23, 0x00	; 0
 9a0:	0c 94 b5 04 	jmp	0x96a	; 0x96a <_ZN7Tlc59406setAllEj>

000009a4 <_Z15tlc_shift8_initv>:
#elif DATA_TRANSFER_MODE == TLC_SPI

/** Initializes the SPI module to double speed (f_osc / 2) */
void tlc_shift8_init(void)
{
    SIN_DDR    |= _BV(SIN_PIN);    // SPI MOSI as output
 9a4:	23 9a       	sbi	0x04, 3	; 4
    SCLK_DDR   |= _BV(SCLK_PIN);   // SPI SCK as output
 9a6:	25 9a       	sbi	0x04, 5	; 4
    TLC_SS_DDR |= _BV(TLC_SS_PIN); // SPI SS as output
 9a8:	22 9a       	sbi	0x04, 2	; 4

    SCLK_PORT &= ~_BV(SCLK_PIN);
 9aa:	2d 98       	cbi	0x05, 5	; 5

    SPSR = _BV(SPI2X); // double speed (f_osc / 2)
 9ac:	81 e0       	ldi	r24, 0x01	; 1
 9ae:	8d bd       	out	0x2d, r24	; 45
    SPCR = _BV(SPE)    // enable SPI
         | _BV(MSTR);  // master mode
 9b0:	80 e5       	ldi	r24, 0x50	; 80
 9b2:	8c bd       	out	0x2c, r24	; 44
 9b4:	08 95       	ret

000009b6 <_Z10tlc_shift8h>:
}

/** Shifts out a byte, MSB first */
void tlc_shift8(uint8_t byte)
{
    SPDR = byte; // starts transmission
 9b6:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & _BV(SPIF)))
 9b8:	0d b4       	in	r0, 0x2d	; 45
 9ba:	07 fe       	sbrs	r0, 7
 9bc:	fd cf       	rjmp	.-6      	; 0x9b8 <_Z10tlc_shift8h+0x2>
        ; // wait for transmission complete
}
 9be:	08 95       	ret

000009c0 <_ZN7Tlc59406updateEv>:
    or
    \code while(tlc_needXLAT); \endcode
    \returns 1 if there is data waiting to be latched, 0 if data was
             successfully shifted in */
uint8_t Tlc5940::update(void)
{
 9c0:	1f 93       	push	r17
 9c2:	cf 93       	push	r28
 9c4:	df 93       	push	r29
    if (tlc_needXLAT) {
 9c6:	10 91 f9 01 	lds	r17, 0x01F9
 9ca:	11 11       	cpse	r17, r1
 9cc:	29 c0       	rjmp	.+82     	; 0xa20 <_ZN7Tlc59406updateEv+0x60>
        return 1;
    }
    disable_XLAT_pulses();
 9ce:	80 e2       	ldi	r24, 0x20	; 32
 9d0:	80 93 80 00 	sts	0x0080, r24
    if (firstGSInput) {
 9d4:	80 91 de 01 	lds	r24, 0x01DE
 9d8:	88 23       	and	r24, r24
 9da:	29 f0       	breq	.+10     	; 0x9e6 <_ZN7Tlc59406updateEv+0x26>
        // adds an extra SCLK pulse unless we've just set dot-correction data
        firstGSInput = 0;
 9dc:	10 92 de 01 	sts	0x01DE, r1
    or
    \code while(tlc_needXLAT); \endcode
    \returns 1 if there is data waiting to be latched, 0 if data was
             successfully shifted in */
uint8_t Tlc5940::update(void)
{
 9e0:	cf ed       	ldi	r28, 0xDF	; 223
 9e2:	d1 e0       	ldi	r29, 0x01	; 1
 9e4:	03 c0       	rjmp	.+6      	; 0x9ec <_ZN7Tlc59406updateEv+0x2c>
    disable_XLAT_pulses();
    if (firstGSInput) {
        // adds an extra SCLK pulse unless we've just set dot-correction data
        firstGSInput = 0;
    } else {
        pulse_pin(SCLK_PORT, SCLK_PIN);
 9e6:	2d 9a       	sbi	0x05, 5	; 5
 9e8:	2d 98       	cbi	0x05, 5	; 5
 9ea:	fa cf       	rjmp	.-12     	; 0x9e0 <_ZN7Tlc59406updateEv+0x20>
    }
    uint8_t *p = tlc_GSData;
    while (p < tlc_GSData + NUM_TLCS * 24) {
        tlc_shift8(*p++);
 9ec:	88 81       	ld	r24, Y
 9ee:	0e 94 db 04 	call	0x9b6	; 0x9b6 <_Z10tlc_shift8h>
        tlc_shift8(*p++);
 9f2:	89 81       	ldd	r24, Y+1	; 0x01
 9f4:	0e 94 db 04 	call	0x9b6	; 0x9b6 <_Z10tlc_shift8h>
 9f8:	23 96       	adiw	r28, 0x03	; 3
 9fa:	fe 01       	movw	r30, r28
 9fc:	31 97       	sbiw	r30, 0x01	; 1
        tlc_shift8(*p++);
 9fe:	80 81       	ld	r24, Z
 a00:	0e 94 db 04 	call	0x9b6	; 0x9b6 <_Z10tlc_shift8h>
        firstGSInput = 0;
    } else {
        pulse_pin(SCLK_PORT, SCLK_PIN);
    }
    uint8_t *p = tlc_GSData;
    while (p < tlc_GSData + NUM_TLCS * 24) {
 a04:	81 e0       	ldi	r24, 0x01	; 1
 a06:	c7 3f       	cpi	r28, 0xF7	; 247
 a08:	d8 07       	cpc	r29, r24
 a0a:	80 f3       	brcs	.-32     	; 0x9ec <_ZN7Tlc59406updateEv+0x2c>
        tlc_shift8(*p++);
        tlc_shift8(*p++);
        tlc_shift8(*p++);
    }
    tlc_needXLAT = 1;
 a0c:	81 e0       	ldi	r24, 0x01	; 1
 a0e:	80 93 f9 01 	sts	0x01F9, r24
    enable_XLAT_pulses();
 a12:	90 ea       	ldi	r25, 0xA0	; 160
 a14:	90 93 80 00 	sts	0x0080, r25
    set_XLAT_interrupt();
 a18:	b0 9a       	sbi	0x16, 0	; 22
 a1a:	80 93 6f 00 	sts	0x006F, r24
 a1e:	01 c0       	rjmp	.+2      	; 0xa22 <_ZN7Tlc59406updateEv+0x62>
    \returns 1 if there is data waiting to be latched, 0 if data was
             successfully shifted in */
uint8_t Tlc5940::update(void)
{
    if (tlc_needXLAT) {
        return 1;
 a20:	11 e0       	ldi	r17, 0x01	; 1
    }
    tlc_needXLAT = 1;
    enable_XLAT_pulses();
    set_XLAT_interrupt();
    return 0;
}
 a22:	81 2f       	mov	r24, r17
 a24:	df 91       	pop	r29
 a26:	cf 91       	pop	r28
 a28:	1f 91       	pop	r17
 a2a:	08 95       	ret

00000a2c <_ZN7Tlc59404initEj>:
/** Pin i/o and Timer setup.  The grayscale register will be reset to all
    zeros, or whatever initialValue is set to and the Timers will start.
    \param initialValue = 0, optional parameter specifing the inital startup
           value */
void Tlc5940::init(uint16_t initialValue)
{
 a2c:	0f 93       	push	r16
 a2e:	1f 93       	push	r17
 a30:	cf 93       	push	r28
 a32:	df 93       	push	r29
 a34:	00 d0       	rcall	.+0      	; 0xa36 <_ZN7Tlc59404initEj+0xa>
 a36:	cd b7       	in	r28, 0x3d	; 61
 a38:	de b7       	in	r29, 0x3e	; 62
 a3a:	8c 01       	movw	r16, r24
    /* Pin Setup */
    XLAT_DDR |= _BV(XLAT_PIN);
 a3c:	21 9a       	sbi	0x04, 1	; 4
    BLANK_DDR |= _BV(BLANK_PIN);
 a3e:	22 9a       	sbi	0x04, 2	; 4
    GSCLK_DDR |= _BV(GSCLK_PIN);
 a40:	53 9a       	sbi	0x0a, 3	; 10
#endif
#if XERR_ENABLED
    XERR_DDR &= ~_BV(XERR_PIN);   // XERR as input
    XERR_PORT |= _BV(XERR_PIN);   // enable pull-up resistor
#endif
    BLANK_PORT |= _BV(BLANK_PIN); // leave blank high (until the timers start)
 a42:	2a 9a       	sbi	0x05, 2	; 5

    tlc_shift8_init();
 a44:	69 83       	std	Y+1, r22	; 0x01
 a46:	7a 83       	std	Y+2, r23	; 0x02
 a48:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <_Z15tlc_shift8_initv>

    setAll(initialValue);
 a4c:	69 81       	ldd	r22, Y+1	; 0x01
 a4e:	7a 81       	ldd	r23, Y+2	; 0x02
 a50:	c8 01       	movw	r24, r16
 a52:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN7Tlc59406setAllEj>
    update();
 a56:	c8 01       	movw	r24, r16
 a58:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <_ZN7Tlc59406updateEv>
    disable_XLAT_pulses();
 a5c:	e0 e8       	ldi	r30, 0x80	; 128
 a5e:	f0 e0       	ldi	r31, 0x00	; 0
 a60:	80 e2       	ldi	r24, 0x20	; 32
 a62:	80 83       	st	Z, r24
    clear_XLAT_interrupt();
 a64:	10 92 6f 00 	sts	0x006F, r1
    tlc_needXLAT = 0;
 a68:	10 92 f9 01 	sts	0x01F9, r1
    pulse_pin(XLAT_PORT, XLAT_PIN);
 a6c:	29 9a       	sbi	0x05, 1	; 5
 a6e:	29 98       	cbi	0x05, 1	; 5


    /* Timer Setup */

    /* Timer 1 - BLANK / XLAT */
    TCCR1A = _BV(COM1B1);  // non inverting, output on OC1B, BLANK
 a70:	80 83       	st	Z, r24
    TCCR1B = _BV(WGM13);   // Phase/freq correct PWM, ICR1 top
 a72:	e1 e8       	ldi	r30, 0x81	; 129
 a74:	f0 e0       	ldi	r31, 0x00	; 0
 a76:	80 e1       	ldi	r24, 0x10	; 16
 a78:	80 83       	st	Z, r24
    OCR1A = 1;             // duty factor on OC1A, XLAT is inside BLANK
 a7a:	81 e0       	ldi	r24, 0x01	; 1
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	90 93 89 00 	sts	0x0089, r25
 a82:	80 93 88 00 	sts	0x0088, r24
    OCR1B = 2;             // duty factor on BLANK (larger than OCR1A (XLAT))
 a86:	82 e0       	ldi	r24, 0x02	; 2
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	90 93 8b 00 	sts	0x008B, r25
 a8e:	80 93 8a 00 	sts	0x008A, r24
    ICR1 = TLC_PWM_PERIOD; // see tlc_config.h
 a92:	80 e0       	ldi	r24, 0x00	; 0
 a94:	90 e2       	ldi	r25, 0x20	; 32
 a96:	90 93 87 00 	sts	0x0087, r25
 a9a:	80 93 86 00 	sts	0x0086, r24
           | _BV(WGM33);      // Fast pwm with ICR3 top
#else
    TCCR2A = _BV(COM2B1)      // set on BOTTOM, clear on OCR2A (non-inverting),
                              // output on OC2B
           | _BV(WGM21)       // Fast pwm with OCR2A top
           | _BV(WGM20);      // Fast pwm with OCR2A top
 a9e:	83 e2       	ldi	r24, 0x23	; 35
 aa0:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = _BV(WGM22);      // Fast pwm with OCR2A top
 aa4:	a1 eb       	ldi	r26, 0xB1	; 177
 aa6:	b0 e0       	ldi	r27, 0x00	; 0
 aa8:	88 e0       	ldi	r24, 0x08	; 8
 aaa:	8c 93       	st	X, r24
    OCR2B = 0;                // duty factor (as short a pulse as possible)
 aac:	10 92 b4 00 	sts	0x00B4, r1
    OCR2A = TLC_GSCLK_PERIOD; // see tlc_config.h
 ab0:	83 e0       	ldi	r24, 0x03	; 3
 ab2:	80 93 b3 00 	sts	0x00B3, r24
    TCCR2B |= _BV(CS20);      // no prescale, (start pwm output)
 ab6:	8c 91       	ld	r24, X
 ab8:	81 60       	ori	r24, 0x01	; 1
 aba:	8c 93       	st	X, r24
#endif
    TCCR1B |= _BV(CS10);      // no prescale, (start pwm output)
 abc:	80 81       	ld	r24, Z
 abe:	81 60       	ori	r24, 0x01	; 1
 ac0:	80 83       	st	Z, r24
    update();
 ac2:	c8 01       	movw	r24, r16
}
 ac4:	0f 90       	pop	r0
 ac6:	0f 90       	pop	r0
 ac8:	df 91       	pop	r29
 aca:	cf 91       	pop	r28
 acc:	1f 91       	pop	r17
 ace:	0f 91       	pop	r16
    OCR2B = 0;                // duty factor (as short a pulse as possible)
    OCR2A = TLC_GSCLK_PERIOD; // see tlc_config.h
    TCCR2B |= _BV(CS20);      // no prescale, (start pwm output)
#endif
    TCCR1B |= _BV(CS10);      // no prescale, (start pwm output)
    update();
 ad0:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <_ZN7Tlc59406updateEv>

00000ad4 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 ad4:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 ad6:	91 8d       	ldd	r25, Z+25	; 0x19
 ad8:	22 8d       	ldd	r18, Z+26	; 0x1a
 ada:	89 2f       	mov	r24, r25
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	80 5c       	subi	r24, 0xC0	; 192
 ae0:	9f 4f       	sbci	r25, 0xFF	; 255
 ae2:	82 1b       	sub	r24, r18
 ae4:	91 09       	sbc	r25, r1
}
 ae6:	8f 73       	andi	r24, 0x3F	; 63
 ae8:	99 27       	eor	r25, r25
 aea:	08 95       	ret

00000aec <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 aec:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 aee:	91 8d       	ldd	r25, Z+25	; 0x19
 af0:	82 8d       	ldd	r24, Z+26	; 0x1a
 af2:	98 17       	cp	r25, r24
 af4:	31 f0       	breq	.+12     	; 0xb02 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 af6:	82 8d       	ldd	r24, Z+26	; 0x1a
 af8:	e8 0f       	add	r30, r24
 afa:	f1 1d       	adc	r31, r1
 afc:	85 8d       	ldd	r24, Z+29	; 0x1d
 afe:	90 e0       	ldi	r25, 0x00	; 0
 b00:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 b02:	8f ef       	ldi	r24, 0xFF	; 255
 b04:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 b06:	08 95       	ret

00000b08 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 b08:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 b0a:	91 8d       	ldd	r25, Z+25	; 0x19
 b0c:	82 8d       	ldd	r24, Z+26	; 0x1a
 b0e:	98 17       	cp	r25, r24
 b10:	61 f0       	breq	.+24     	; 0xb2a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 b12:	82 8d       	ldd	r24, Z+26	; 0x1a
 b14:	df 01       	movw	r26, r30
 b16:	a8 0f       	add	r26, r24
 b18:	b1 1d       	adc	r27, r1
 b1a:	5d 96       	adiw	r26, 0x1d	; 29
 b1c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 b1e:	92 8d       	ldd	r25, Z+26	; 0x1a
 b20:	9f 5f       	subi	r25, 0xFF	; 255
 b22:	9f 73       	andi	r25, 0x3F	; 63
 b24:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 b26:	90 e0       	ldi	r25, 0x00	; 0
 b28:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 b2a:	8f ef       	ldi	r24, 0xFF	; 255
 b2c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 b2e:	08 95       	ret

00000b30 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 b30:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 b32:	84 8d       	ldd	r24, Z+28	; 0x1c
 b34:	df 01       	movw	r26, r30
 b36:	a8 0f       	add	r26, r24
 b38:	b1 1d       	adc	r27, r1
 b3a:	a3 5a       	subi	r26, 0xA3	; 163
 b3c:	bf 4f       	sbci	r27, 0xFF	; 255
 b3e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 b40:	84 8d       	ldd	r24, Z+28	; 0x1c
 b42:	90 e0       	ldi	r25, 0x00	; 0
 b44:	01 96       	adiw	r24, 0x01	; 1
 b46:	8f 73       	andi	r24, 0x3F	; 63
 b48:	99 27       	eor	r25, r25
 b4a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 b4c:	a6 89       	ldd	r26, Z+22	; 0x16
 b4e:	b7 89       	ldd	r27, Z+23	; 0x17
 b50:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 b52:	a0 89       	ldd	r26, Z+16	; 0x10
 b54:	b1 89       	ldd	r27, Z+17	; 0x11
 b56:	8c 91       	ld	r24, X
 b58:	80 64       	ori	r24, 0x40	; 64
 b5a:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 b5c:	93 8d       	ldd	r25, Z+27	; 0x1b
 b5e:	84 8d       	ldd	r24, Z+28	; 0x1c
 b60:	98 13       	cpse	r25, r24
 b62:	06 c0       	rjmp	.+12     	; 0xb70 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 b64:	02 88       	ldd	r0, Z+18	; 0x12
 b66:	f3 89       	ldd	r31, Z+19	; 0x13
 b68:	e0 2d       	mov	r30, r0
 b6a:	80 81       	ld	r24, Z
 b6c:	8f 7d       	andi	r24, 0xDF	; 223
 b6e:	80 83       	st	Z, r24
 b70:	08 95       	ret

00000b72 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 b72:	cf 93       	push	r28
 b74:	df 93       	push	r29
 b76:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 b78:	88 8d       	ldd	r24, Y+24	; 0x18
 b7a:	88 23       	and	r24, r24
 b7c:	c9 f0       	breq	.+50     	; 0xbb0 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 b7e:	ea 89       	ldd	r30, Y+18	; 0x12
 b80:	fb 89       	ldd	r31, Y+19	; 0x13
 b82:	80 81       	ld	r24, Z
 b84:	85 fd       	sbrc	r24, 5
 b86:	05 c0       	rjmp	.+10     	; 0xb92 <_ZN14HardwareSerial5flushEv+0x20>
 b88:	a8 89       	ldd	r26, Y+16	; 0x10
 b8a:	b9 89       	ldd	r27, Y+17	; 0x11
 b8c:	8c 91       	ld	r24, X
 b8e:	86 fd       	sbrc	r24, 6
 b90:	0f c0       	rjmp	.+30     	; 0xbb0 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 b92:	0f b6       	in	r0, 0x3f	; 63
 b94:	07 fc       	sbrc	r0, 7
 b96:	f5 cf       	rjmp	.-22     	; 0xb82 <_ZN14HardwareSerial5flushEv+0x10>
 b98:	80 81       	ld	r24, Z
 b9a:	85 ff       	sbrs	r24, 5
 b9c:	f2 cf       	rjmp	.-28     	; 0xb82 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 b9e:	a8 89       	ldd	r26, Y+16	; 0x10
 ba0:	b9 89       	ldd	r27, Y+17	; 0x11
 ba2:	8c 91       	ld	r24, X
 ba4:	85 ff       	sbrs	r24, 5
 ba6:	ed cf       	rjmp	.-38     	; 0xb82 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 ba8:	ce 01       	movw	r24, r28
 baa:	0e 94 98 05 	call	0xb30	; 0xb30 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 bae:	e7 cf       	rjmp	.-50     	; 0xb7e <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 bb0:	df 91       	pop	r29
 bb2:	cf 91       	pop	r28
 bb4:	08 95       	ret

00000bb6 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 bb6:	ef 92       	push	r14
 bb8:	ff 92       	push	r15
 bba:	0f 93       	push	r16
 bbc:	1f 93       	push	r17
 bbe:	cf 93       	push	r28
 bc0:	df 93       	push	r29
 bc2:	ec 01       	movw	r28, r24
  _written = true;
 bc4:	81 e0       	ldi	r24, 0x01	; 1
 bc6:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 bc8:	9b 8d       	ldd	r25, Y+27	; 0x1b
 bca:	8c 8d       	ldd	r24, Y+28	; 0x1c
 bcc:	98 13       	cpse	r25, r24
 bce:	05 c0       	rjmp	.+10     	; 0xbda <_ZN14HardwareSerial5writeEh+0x24>
 bd0:	e8 89       	ldd	r30, Y+16	; 0x10
 bd2:	f9 89       	ldd	r31, Y+17	; 0x11
 bd4:	80 81       	ld	r24, Z
 bd6:	85 fd       	sbrc	r24, 5
 bd8:	24 c0       	rjmp	.+72     	; 0xc22 <_ZN14HardwareSerial5writeEh+0x6c>
 bda:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 bdc:	0b 8d       	ldd	r16, Y+27	; 0x1b
 bde:	10 e0       	ldi	r17, 0x00	; 0
 be0:	0f 5f       	subi	r16, 0xFF	; 255
 be2:	1f 4f       	sbci	r17, 0xFF	; 255
 be4:	0f 73       	andi	r16, 0x3F	; 63
 be6:	11 27       	eor	r17, r17
 be8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 bea:	8c 8d       	ldd	r24, Y+28	; 0x1c
 bec:	e8 12       	cpse	r14, r24
 bee:	0c c0       	rjmp	.+24     	; 0xc08 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 bf0:	0f b6       	in	r0, 0x3f	; 63
 bf2:	07 fc       	sbrc	r0, 7
 bf4:	fa cf       	rjmp	.-12     	; 0xbea <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 bf6:	e8 89       	ldd	r30, Y+16	; 0x10
 bf8:	f9 89       	ldd	r31, Y+17	; 0x11
 bfa:	80 81       	ld	r24, Z
 bfc:	85 ff       	sbrs	r24, 5
 bfe:	f5 cf       	rjmp	.-22     	; 0xbea <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 c00:	ce 01       	movw	r24, r28
 c02:	0e 94 98 05 	call	0xb30	; 0xb30 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 c06:	f1 cf       	rjmp	.-30     	; 0xbea <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 c08:	8b 8d       	ldd	r24, Y+27	; 0x1b
 c0a:	fe 01       	movw	r30, r28
 c0c:	e8 0f       	add	r30, r24
 c0e:	f1 1d       	adc	r31, r1
 c10:	e3 5a       	subi	r30, 0xA3	; 163
 c12:	ff 4f       	sbci	r31, 0xFF	; 255
 c14:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 c16:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 c18:	ea 89       	ldd	r30, Y+18	; 0x12
 c1a:	fb 89       	ldd	r31, Y+19	; 0x13
 c1c:	80 81       	ld	r24, Z
 c1e:	80 62       	ori	r24, 0x20	; 32
 c20:	07 c0       	rjmp	.+14     	; 0xc30 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 c22:	ee 89       	ldd	r30, Y+22	; 0x16
 c24:	ff 89       	ldd	r31, Y+23	; 0x17
 c26:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 c28:	e8 89       	ldd	r30, Y+16	; 0x10
 c2a:	f9 89       	ldd	r31, Y+17	; 0x11
 c2c:	80 81       	ld	r24, Z
 c2e:	80 64       	ori	r24, 0x40	; 64
 c30:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 c32:	81 e0       	ldi	r24, 0x01	; 1
 c34:	90 e0       	ldi	r25, 0x00	; 0
 c36:	df 91       	pop	r29
 c38:	cf 91       	pop	r28
 c3a:	1f 91       	pop	r17
 c3c:	0f 91       	pop	r16
 c3e:	ff 90       	pop	r15
 c40:	ef 90       	pop	r14
 c42:	08 95       	ret

00000c44 <__udivmodqi4>:
 c44:	99 1b       	sub	r25, r25
 c46:	79 e0       	ldi	r23, 0x09	; 9
 c48:	04 c0       	rjmp	.+8      	; 0xc52 <__udivmodqi4_ep>

00000c4a <__udivmodqi4_loop>:
 c4a:	99 1f       	adc	r25, r25
 c4c:	96 17       	cp	r25, r22
 c4e:	08 f0       	brcs	.+2      	; 0xc52 <__udivmodqi4_ep>
 c50:	96 1b       	sub	r25, r22

00000c52 <__udivmodqi4_ep>:
 c52:	88 1f       	adc	r24, r24
 c54:	7a 95       	dec	r23
 c56:	c9 f7       	brne	.-14     	; 0xc4a <__udivmodqi4_loop>
 c58:	80 95       	com	r24
 c5a:	08 95       	ret

00000c5c <__divmodhi4>:
 c5c:	97 fb       	bst	r25, 7
 c5e:	07 2e       	mov	r0, r23
 c60:	16 f4       	brtc	.+4      	; 0xc66 <__divmodhi4+0xa>
 c62:	00 94       	com	r0
 c64:	07 d0       	rcall	.+14     	; 0xc74 <__divmodhi4_neg1>
 c66:	77 fd       	sbrc	r23, 7
 c68:	09 d0       	rcall	.+18     	; 0xc7c <__divmodhi4_neg2>
 c6a:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__udivmodhi4>
 c6e:	07 fc       	sbrc	r0, 7
 c70:	05 d0       	rcall	.+10     	; 0xc7c <__divmodhi4_neg2>
 c72:	3e f4       	brtc	.+14     	; 0xc82 <__divmodhi4_exit>

00000c74 <__divmodhi4_neg1>:
 c74:	90 95       	com	r25
 c76:	81 95       	neg	r24
 c78:	9f 4f       	sbci	r25, 0xFF	; 255
 c7a:	08 95       	ret

00000c7c <__divmodhi4_neg2>:
 c7c:	70 95       	com	r23
 c7e:	61 95       	neg	r22
 c80:	7f 4f       	sbci	r23, 0xFF	; 255

00000c82 <__divmodhi4_exit>:
 c82:	08 95       	ret

00000c84 <__udivmodsi4>:
 c84:	a1 e2       	ldi	r26, 0x21	; 33
 c86:	1a 2e       	mov	r1, r26
 c88:	aa 1b       	sub	r26, r26
 c8a:	bb 1b       	sub	r27, r27
 c8c:	fd 01       	movw	r30, r26
 c8e:	0d c0       	rjmp	.+26     	; 0xcaa <__udivmodsi4_ep>

00000c90 <__udivmodsi4_loop>:
 c90:	aa 1f       	adc	r26, r26
 c92:	bb 1f       	adc	r27, r27
 c94:	ee 1f       	adc	r30, r30
 c96:	ff 1f       	adc	r31, r31
 c98:	a2 17       	cp	r26, r18
 c9a:	b3 07       	cpc	r27, r19
 c9c:	e4 07       	cpc	r30, r20
 c9e:	f5 07       	cpc	r31, r21
 ca0:	20 f0       	brcs	.+8      	; 0xcaa <__udivmodsi4_ep>
 ca2:	a2 1b       	sub	r26, r18
 ca4:	b3 0b       	sbc	r27, r19
 ca6:	e4 0b       	sbc	r30, r20
 ca8:	f5 0b       	sbc	r31, r21

00000caa <__udivmodsi4_ep>:
 caa:	66 1f       	adc	r22, r22
 cac:	77 1f       	adc	r23, r23
 cae:	88 1f       	adc	r24, r24
 cb0:	99 1f       	adc	r25, r25
 cb2:	1a 94       	dec	r1
 cb4:	69 f7       	brne	.-38     	; 0xc90 <__udivmodsi4_loop>
 cb6:	60 95       	com	r22
 cb8:	70 95       	com	r23
 cba:	80 95       	com	r24
 cbc:	90 95       	com	r25
 cbe:	9b 01       	movw	r18, r22
 cc0:	ac 01       	movw	r20, r24
 cc2:	bd 01       	movw	r22, r26
 cc4:	cf 01       	movw	r24, r30
 cc6:	08 95       	ret

00000cc8 <__udivmodhi4>:
 cc8:	aa 1b       	sub	r26, r26
 cca:	bb 1b       	sub	r27, r27
 ccc:	51 e1       	ldi	r21, 0x11	; 17
 cce:	07 c0       	rjmp	.+14     	; 0xcde <__udivmodhi4_ep>

00000cd0 <__udivmodhi4_loop>:
 cd0:	aa 1f       	adc	r26, r26
 cd2:	bb 1f       	adc	r27, r27
 cd4:	a6 17       	cp	r26, r22
 cd6:	b7 07       	cpc	r27, r23
 cd8:	10 f0       	brcs	.+4      	; 0xcde <__udivmodhi4_ep>
 cda:	a6 1b       	sub	r26, r22
 cdc:	b7 0b       	sbc	r27, r23

00000cde <__udivmodhi4_ep>:
 cde:	88 1f       	adc	r24, r24
 ce0:	99 1f       	adc	r25, r25
 ce2:	5a 95       	dec	r21
 ce4:	a9 f7       	brne	.-22     	; 0xcd0 <__udivmodhi4_loop>
 ce6:	80 95       	com	r24
 ce8:	90 95       	com	r25
 cea:	bc 01       	movw	r22, r24
 cec:	cd 01       	movw	r24, r26
 cee:	08 95       	ret

00000cf0 <__tablejump2__>:
 cf0:	ee 0f       	add	r30, r30
 cf2:	ff 1f       	adc	r31, r31
 cf4:	05 90       	lpm	r0, Z+
 cf6:	f4 91       	lpm	r31, Z
 cf8:	e0 2d       	mov	r30, r0
 cfa:	09 94       	ijmp

00000cfc <_exit>:
 cfc:	f8 94       	cli

00000cfe <__stop_program>:
 cfe:	ff cf       	rjmp	.-2      	; 0xcfe <__stop_program>
